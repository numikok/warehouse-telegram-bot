from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from models import User, UserRole, Film, Panel, Joint, Glue, Operation, FinishedProduct, Order, CompletedOrder, OrderStatus, JointType, CompletedOrderJoint, CompletedOrderItem, CompletedOrderGlue, CompletedOrderStatus
from database import get_db
import json
import logging
from navigation import MenuState, get_menu_keyboard, go_back
from datetime import datetime, timedelta
from sqlalchemy.orm import joinedload, selectinload
from sqlalchemy import desc
import re

router = Router()

def get_main_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–∫–ª–∞–¥–æ–≤—â–∏–∫–∞"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ")],
            [KeyboardButton(text="üì• –û–ø—Ä–∏—Ö–æ–¥–æ–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã")],
            [KeyboardButton(text="üì¶ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–≥—Ä—É–∑–∫—É")],
            [KeyboardButton(text="üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã")]
        ],
        resize_keyboard=True
    )

class WarehouseStates(StatesGroup):
    waiting_for_order_id = State()
    waiting_for_confirmation = State()
    confirming_shipment = State()

@router.message(Command("stock"))
async def cmd_stock(message: Message, state: FSMContext):
    # –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
    
    db = next(get_db())
    try:
        state_data = await state.get_data()
        is_admin_context = state_data.get("is_admin_context", False)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        user_role = user.role if user else UserRole.NONE
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º
        films = db.query(Film).all()
        joints = db.query(Joint).all()
        glue = db.query(Glue).first()
        panels = db.query(Panel).all()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞–Ω–µ–ª–∏ –≤–º–µ—Å—Ç–æ –æ–¥–Ω–æ–π
        finished_products = db.query(FinishedProduct).join(Film).all()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ –ø–ª–µ–Ω–∫–∞–º
        response = "üìä –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ:\n\n"
        
        response += "üéû –ü–ª–µ–Ω–∫–∏:\n"
        for film in films:
            meters_per_roll = film.meters_per_roll or 50.0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 50 –º–µ—Ç—Ä–æ–≤ –≤ —Ä—É–ª–æ–Ω–µ
            rolls = film.total_remaining / meters_per_roll if meters_per_roll > 0 else 0
            response += (
                f"- {film.code}:\n"
                f"  ‚Ä¢ –†—É–ª–æ–Ω–æ–≤: {rolls:.1f}\n"
                f"  ‚Ä¢ –û–±—â–∞—è –¥–ª–∏–Ω–∞: {film.total_remaining:.2f} –º\n"
                f"  ‚Ä¢ –ú–æ–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–∞–Ω–µ–ª–µ–π: {film.calculate_possible_panels()}\n\n"
            )
        
        response += "üîÑ –°—Ç—ã–∫–∏:\n"
        for joint in joints:
            response += (
                f"- {joint.color} ({joint.type.value}, {joint.thickness} –º–º):\n"
                f"  ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {joint.quantity}\n"
            )
        
        response += "\nüì¶ –ü—É—Å—Ç—ã–µ –ø–∞–Ω–µ–ª–∏:\n"
        if panels:
            for panel in panels:
                response += f"- –¢–æ–ª—â–∏–Ω–∞ {panel.thickness} –º–º: {panel.quantity} —à—Ç.\n"
        else:
            response += "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏\n"
            
        response += "\nüß™ –ö–ª–µ–π:\n"
        if glue:
            response += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {glue.quantity}\n"
        else:
            response += "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏\n"
            
        response += "\n‚úÖ –ì–æ—Ç–æ–≤—ã–µ –ø–∞–Ω–µ–ª–∏:\n"
        if finished_products:
            for product in finished_products:
                response += f"- {product.film.code} (—Ç–æ–ª—â–∏–Ω–∞ {product.thickness} –º–º): {product.quantity} —à—Ç.\n"
        else:
            response += "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏\n"
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_role == UserRole.WAREHOUSE:
            keyboard = get_menu_keyboard(MenuState.WAREHOUSE_MAIN, is_admin_context)
        elif user_role == UserRole.PRODUCTION:
            keyboard = get_menu_keyboard(MenuState.PRODUCTION_MAIN)
        else:
            # –î–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ –∏ –¥—Ä—É–≥–∏—Ö —Ä–æ–ª–µ–π
            keyboard = get_menu_keyboard(MenuState.SUPER_ADMIN_MAIN) if user_role == UserRole.SUPER_ADMIN else None
        
        await message.answer(response, reply_markup=keyboard)
    finally:
        db.close()

@router.message(Command("income_materials"))
async def cmd_income_materials(message: Message, state: FSMContext):
    if not await check_warehouse_access(message):
        return
    
    await state.set_state(MenuState.WAREHOUSE_MATERIALS)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è –æ–ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_MATERIALS)
    )
    await state.set_state(WarehouseStates.waiting_for_order_id)

@router.message(WarehouseStates.waiting_for_order_id)
async def process_order_id(message: Message, state: FSMContext):
    order_id = message.text
    
    if not order_id.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.")
        return
        
    await state.update_data(order_id=int(order_id))
    
    await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–≥—Ä—É–∑–∫—É –∑–∞–∫–∞–∑–∞:")
    await state.set_state(WarehouseStates.waiting_for_confirmation)

@router.message(WarehouseStates.waiting_for_confirmation)
async def process_confirmation(message: Message, state: FSMContext):
    confirmation = message.text.lower()
    
    if confirmation not in ["–¥–∞", "–Ω–µ—Ç"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –¥–∞ –∏–ª–∏ –Ω–µ—Ç.")
        return
        
    data = await state.get_data()
    order_id = data["order_id"]
    
    await process_order_shipment(message, order_id)

@router.message(Command("confirm_order"))
async def cmd_confirm_order(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
    if not await check_warehouse_access(message):
        return
        
    await display_active_orders(message, state)

async def display_active_orders(message: Message, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–≥—Ä—É–∑–∫–∏"""
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º NEW –∏–ª–∏ IN_PROGRESS (–∏–∑ handle_my_orders)
        orders_to_ship = db.query(Order).filter(
            Order.status.in_([OrderStatus.NEW, OrderStatus.IN_PROGRESS])
        ).options(
            joinedload(Order.products),
            joinedload(Order.joints),
            joinedload(Order.glues),
            joinedload(Order.manager) # Load manager
        ).order_by(Order.created_at).all() # Added order_by

        if not orders_to_ship:
            await message.answer(
                "üì¶ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç–≥—Ä—É–∑–∫–∏.",
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∫–ª–∞–¥–∞, –∞ –Ω–µ –º–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤, —Ç.–∫. –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç
                reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_MAIN)
            )
            return

        response = "üì¶ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –æ—Ç–≥—Ä—É–∑–∫–∏:\n\n"
        keyboard_buttons = [] # For reply keyboard buttons
        for order in orders_to_ship:
            response += f"---\n"
            response += f"üìù –ó–∞–∫–∞–∑ #{order.id}\n"
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º order.manager —Ç.–∫. –∑–∞–≥—Ä—É–∑–∏–ª–∏ –µ–≥–æ —á–µ—Ä–µ–∑ joinedload
            response += f"üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: {order.manager.username if order.manager else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            response += f"–°—Ç–∞—Ç—É—Å: {order.status.value}\n"
            response += f"–ö–ª–∏–µ–Ω—Ç: {order.customer_phone}\n"
            response += f"–ê–¥—Ä–µ—Å: {order.delivery_address}\n"
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –æ—Ç–≥—Ä—É–∑–∫–∏ –∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
            shipment_date_str = order.shipment_date.strftime('%d.%m.%Y') if order.shipment_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
            payment_method_str = order.payment_method if order.payment_method else '–ù–µ —É–∫–∞–∑–∞–Ω'
            response += f"üóì –î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏: {shipment_date_str}\n"
            response += f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method_str}\n"
            response += f"üîß –ú–æ–Ω—Ç–∞–∂: {'–î–∞' if order.installation_required else '–ù–µ—Ç'}\n"

            # –ü—Ä–æ–¥—É–∫—Ü–∏—è
            response += "\nüé® –ü—Ä–æ–¥—É–∫—Ü–∏—è:\n"
            if order.products:
                 for item in order.products:
                     # Changed formatting slightly to match handle_my_orders
                     response += f"- {item.color} ({item.thickness} –º–º): {item.quantity} —à—Ç.\n"
            else:
                 response += "- –Ω–µ—Ç\n"

            # –°—Ç—ã–∫–∏
            response += "\nüîó –°—Ç—ã–∫–∏:\n"
            if order.joints:
                 for joint in order.joints:
                     joint_type_str = joint.joint_type.name.capitalize() if joint.joint_type else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                     # Changed formatting slightly
                     response += f"- {joint_type_str} ({joint.joint_thickness} –º–º, {joint.joint_color}): {joint.joint_quantity} —à—Ç.\n"
            else:
                 response += "- –Ω–µ—Ç\n"

            # –ö–ª–µ–π
            response += "\nüß¥ –ö–ª–µ–π:\n"
            glue_total = sum(g.quantity for g in order.glues) if order.glues else 0
            if glue_total > 0:
                response += f"- {glue_total} —à—Ç.\n"
            else:
                 response += "- –Ω–µ—Ç\n"

            response += f"\n"
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–≥—Ä—É–∑–∫–∏
            keyboard_buttons.append([KeyboardButton(text=f"‚úÖ –û—Ç–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑ #{order.id}")])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard_buttons.append([KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")])

        reply_markup = ReplyKeyboardMarkup(
            keyboard=keyboard_buttons,
            resize_keyboard=True
        )

        await message.answer(response, reply_markup=reply_markup)
        await state.set_state(WarehouseStates.confirming_shipment) # Set state for button handler

    finally:
        db.close()

@router.message(F.text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def handle_orders(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ú–æ–∏ –∑–∞–∫–∞–∑—ã'"""
    if not await check_warehouse_access(message):
        return
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤, –ø–µ—Ä–µ–¥–∞–µ–º state
    await display_active_orders(message, state) # Pass state

@router.message(F.text == "üì¶ –û—Å—Ç–∞—Ç–∫–∏")
async def handle_stock(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ—Å—Ç–∞—Ç–∫–æ–≤"""
    if not await check_warehouse_access(message):
        return
    
    await state.set_state(MenuState.INVENTORY_CATEGORIES)
    keyboard = get_menu_keyboard(MenuState.INVENTORY_CATEGORIES)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=keyboard
    )

@router.message(F.text == "üìä –í—Å–µ –æ—Å—Ç–∞—Ç–∫–∏")
async def handle_all_stock(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ"""
    if not await check_warehouse_access(message):
        return
        
    await state.set_state(MenuState.WAREHOUSE_STOCK) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    db = next(get_db())
    try:
        # –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤
        finished_products = db.query(FinishedProduct).options(joinedload(FinishedProduct.film)).all()
        films = db.query(Film).all()
        panels = db.query(Panel).all()
        joints = db.query(Joint).all()
        glue = db.query(Glue).first()
        
        response = "üì¶ –í—Å–µ –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ:\n\n"
        
        response += "‚úÖ –ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è:\n"
        if finished_products:
            for product in finished_products:
                 if product.quantity > 0:
                    response += f"- {product.film.code} ({product.thickness} –º–º): {product.quantity} —à—Ç.\n"
        if not any(p.quantity > 0 for p in finished_products):
             response += "- –ù–µ—Ç\n"
            
        response += "\nüéû –ü–ª–µ–Ω–∫–∞:\n"
        if films:
            for f in films:
                 if f.total_remaining > 0:
                    response += f"- {f.code}: {f.total_remaining:.2f} –º–µ—Ç—Ä–æ–≤\n"
        if not any(f.total_remaining > 0 for f in films):
             response += "- –ù–µ—Ç\n"
            
        response += "\nü™µ –ü–∞–Ω–µ–ª–∏:\n"
        if panels:
            for p in panels:
                 if p.quantity > 0:
                    response += f"- –¢–æ–ª—â–∏–Ω–∞ {p.thickness} –º–º: {p.quantity} —à—Ç.\n"
        if not any(p.quantity > 0 for p in panels):
             response += "- –ù–µ—Ç\n"
            
        response += "\nüîÑ –°—Ç—ã–∫–∏:\n"
        if joints:
            for j in joints:
                 if j.quantity > 0:
                    response += f"- {j.type.name.capitalize()} ({j.thickness} –º–º, {j.color}): {j.quantity} —à—Ç.\n"
        if not any(j.quantity > 0 for j in joints):
             response += "- –ù–µ—Ç\n"
            
        response += "\nüß™ –ö–ª–µ–π:\n"
        if glue and glue.quantity > 0:
            response += f"- {glue.quantity} —à—Ç.\n"
        else:
            response += "- –ù–µ—Ç\n"
            
        await message.answer(response, reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_STOCK))
    finally:
        db.close()

@router.message(F.text == "‚úÖ –ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è")
async def handle_finished_products(message: Message, state: FSMContext):
    if not await check_warehouse_access(message): return
    await state.set_state(MenuState.INVENTORY_FINISHED_PRODUCTS)
    
    db = next(get_db())
    try:
        finished_products = db.query(FinishedProduct).join(Film).filter(FinishedProduct.quantity > 0).all()
        response = "‚úÖ –ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è –Ω–∞ —Å–∫–ª–∞–¥–µ:\n\n"
        if finished_products:
            for product in finished_products:
                response += f"- {product.film.code} (—Ç–æ–ª—â–∏–Ω–∞ {product.thickness} –º–º): {product.quantity} —à—Ç.\n"
        else:
            response += "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏\n"
        keyboard = get_menu_keyboard(MenuState.INVENTORY_FINISHED_PRODUCTS)
        await message.answer(response, reply_markup=keyboard)
    finally:
        db.close()

@router.message(F.text == "üéû –ü–ª–µ–Ω–∫–∞")
async def handle_films(message: Message, state: FSMContext):
    if not await check_warehouse_access(message): return
    await state.set_state(MenuState.INVENTORY_FILMS)
    
    db = next(get_db())
    try:
        films = db.query(Film).filter(Film.total_remaining > 0).all()
        response = "üéû –ü–ª–µ–Ω–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ:\n\n"
        if films:
            for film in films:
                response += f"- {film.code}: {film.total_remaining:.2f} –º–µ—Ç—Ä–æ–≤\n"
        else:
            response += "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏\n"
        keyboard = get_menu_keyboard(MenuState.INVENTORY_FILMS)
        await message.answer(response, reply_markup=keyboard)
    finally:
        db.close()

@router.message(F.text == "ü™µ –ü–∞–Ω–µ–ª–∏")
async def handle_panels(message: Message, state: FSMContext):
    if not await check_warehouse_access(message): return
    await state.set_state(MenuState.INVENTORY_PANELS)
    
    db = next(get_db())
    try:
        panels = db.query(Panel).filter(Panel.quantity > 0).all()
        response = "ü™µ –ü—É—Å—Ç—ã–µ –ø–∞–Ω–µ–ª–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ:\n\n"
        if panels:
            for panel in panels:
                response += f"- –¢–æ–ª—â–∏–Ω–∞ {panel.thickness} –º–º: {panel.quantity} —à—Ç.\n"
        else:
            response += "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏\n"
        keyboard = get_menu_keyboard(MenuState.INVENTORY_PANELS)
        await message.answer(response, reply_markup=keyboard)
    finally:
        db.close()

@router.message(F.text == "üîÑ –°—Ç—ã–∫–∏")
async def handle_joints(message: Message, state: FSMContext):
    if not await check_warehouse_access(message): return
    await state.set_state(MenuState.INVENTORY_JOINTS)
    
    db = next(get_db())
    try:
        joints = db.query(Joint).filter(Joint.quantity > 0).all()
        response = "üîÑ –°—Ç—ã–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ:\n\n"
        if joints:
            for joint in joints:
                response += f"- {joint.type.name.capitalize()} ({joint.thickness} –º–º, {joint.color}): {joint.quantity} —à—Ç.\n"
        else:
            response += "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏\n"
        keyboard = get_menu_keyboard(MenuState.INVENTORY_JOINTS)
        await message.answer(response, reply_markup=keyboard)
    finally:
        db.close()

@router.message(F.text == "üß™ –ö–ª–µ–π")
async def handle_glue(message: Message, state: FSMContext):
    if not await check_warehouse_access(message): return
    await state.set_state(MenuState.INVENTORY_GLUE)
    
    db = next(get_db())
    try:
        glue = db.query(Glue).filter(Glue.quantity > 0).first()
        response = "üß™ –ö–ª–µ–π –Ω–∞ —Å–∫–ª–∞–¥–µ:\n\n"
        if glue:
            response += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {glue.quantity} —à—Ç.\n"
        else:
            response += "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏\n"
        keyboard = get_menu_keyboard(MenuState.INVENTORY_GLUE)
        await message.answer(response, reply_markup=keyboard)
    finally:
        db.close()

@router.message(WarehouseStates.confirming_shipment, F.text.startswith("‚úÖ –û—Ç–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑ #"))
async def confirm_shipment(message: Message, state: FSMContext):
    if not await check_warehouse_access(message):
        return
        
    try:
        order_id = int(message.text.split("#")[-1])
    except (IndexError, ValueError):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")
        return
        
    db = next(get_db())
    try:
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑ –¥–ª—è –æ—Ç–≥—Ä—É–∑–∫–∏
        order = db.query(Order).filter(
            Order.id == order_id,
            Order.status.in_([OrderStatus.NEW, OrderStatus.IN_PROGRESS])
        ).options(
            joinedload(Order.products),
            joinedload(Order.joints),
            joinedload(Order.glues),
            joinedload(Order.manager) # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        ).first()
        
        if not order:
            await message.answer(f"–ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ—Ç–≥—Ä—É–∂–µ–Ω.")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-—Å–∫–ª–∞–¥–æ–≤—â–∏–∫–∞
        warehouse_user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not warehouse_user:
            await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–ª–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        # 1. –ü—Ä–æ–¥—É–∫—Ü–∏—è
        insufficient_items = []
        for item in order.products:
            finished_product = db.query(FinishedProduct).join(Film).filter(
                Film.code == item.color,
                FinishedProduct.thickness == item.thickness
            ).first()
            if not finished_product or finished_product.quantity < item.quantity:
                available = finished_product.quantity if finished_product else 0
                insufficient_items.append(f"- {item.color} ({item.thickness} –º–º): –Ω—É–∂–Ω–æ {item.quantity}, –¥–æ—Å—Ç—É–ø–Ω–æ {available}")
        
        # 2. –°—Ç—ã–∫–∏
        for joint_item in order.joints:
            joint = db.query(Joint).filter(
                Joint.type == joint_item.joint_type,
                Joint.thickness == joint_item.joint_thickness,
                Joint.color == joint_item.joint_color
            ).first()
            if not joint or joint.quantity < joint_item.joint_quantity:
                available = joint.quantity if joint else 0
                insufficient_items.append(f"- –°—Ç—ã–∫ {joint_item.joint_type.name.capitalize()} ({joint_item.joint_thickness} –º–º, {joint_item.joint_color}): –Ω—É–∂–Ω–æ {joint_item.joint_quantity}, –¥–æ—Å—Ç—É–ø–Ω–æ {available}")
                
        # 3. –ö–ª–µ–π
        for glue_item in order.glues:
            glue = db.query(Glue).first()
            if not glue or glue.quantity < glue_item.quantity:
                available = glue.quantity if glue else 0
                insufficient_items.append(f"- –ö–ª–µ–π: –Ω—É–∂–Ω–æ {glue_item.quantity}, –¥–æ—Å—Ç—É–ø–Ω–æ {available}")
                
        # –ï—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç
        if insufficient_items:
            await message.answer(
                f"‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑ #{order_id}. –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π:\n"
                + "\n".join(insufficient_items),
                reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_MAIN) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∫–ª–∞–¥–∞
            )
            await state.set_state(MenuState.WAREHOUSE_MAIN)
            return
            
        # –ï—Å–ª–∏ –≤—Å–µ–≥–æ —Ö–≤–∞—Ç–∞–µ—Ç, —Å–ø–∏—Å—ã–≤–∞–µ–º —Å–æ —Å–∫–ª–∞–¥–∞ –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤ completed_orders
        # 1. –°–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ü–∏—é
        for item in order.products:
            finished_product = db.query(FinishedProduct).join(Film).filter(
                Film.code == item.color,
                FinishedProduct.thickness == item.thickness
            ).first()
            finished_product.quantity -= item.quantity
            
        # 2. –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç—ã–∫–∏
        for joint_item in order.joints:
            joint = db.query(Joint).filter(
                Joint.type == joint_item.joint_type,
                Joint.thickness == joint_item.joint_thickness,
                Joint.color == joint_item.joint_color
            ).first()
            joint.quantity -= joint_item.joint_quantity
            
        # 3. –°–ø–∏—Å—ã–≤–∞–µ–º –∫–ª–µ–π
        for glue_item in order.glues:
            glue = db.query(Glue).first()
            glue.quantity -= glue_item.quantity
            
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ completed_orders, –∫–æ–ø–∏—Ä—É—è –Ω–æ–≤—ã–µ –ø–æ–ª—è
        completed_order = CompletedOrder(
            order_id=order.id,
            manager_id=order.manager_id,
            warehouse_user_id=warehouse_user.id,
            installation_required=order.installation_required,
            customer_phone=order.customer_phone,
            delivery_address=order.delivery_address,
            shipment_date=order.shipment_date, # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞—Ç—É –æ—Ç–≥—Ä—É–∑–∫–∏
            payment_method=order.payment_method, # –ö–æ–ø–∏—Ä—É–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
            completed_at=datetime.utcnow()
        )
        db.add(completed_order)
        db.flush() # –ü–æ–ª—É—á–∞–µ–º ID –¥–ª—è completed_order
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (items, joints, glues)
        for item in order.products:
            comp_item = CompletedOrderItem(
                order_id=completed_order.id,
                quantity=item.quantity,
                color=item.color,
                thickness=item.thickness
            )
            db.add(comp_item)
            
        for joint_item in order.joints:
            comp_joint = CompletedOrderJoint(
                order_id=completed_order.id,
                joint_type=joint_item.joint_type,
                joint_color=joint_item.joint_color,
                quantity=joint_item.joint_quantity,
                joint_thickness=joint_item.joint_thickness
            )
            db.add(comp_joint)
            
        for glue_item in order.glues:
            comp_glue = CompletedOrderGlue(
                order_id=completed_order.id,
                quantity=glue_item.quantity
            )
            db.add(comp_glue)
            
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–∫–∞–∑ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã orders
        db.delete(order)
        
        db.commit()
        
        await message.answer(
            f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–≥—Ä—É–∂–µ–Ω –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ.",
            reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_MAIN)
        )
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∫–ª–∞–¥–∞
        await state.set_state(MenuState.WAREHOUSE_MAIN)
        
    except Exception as e:
        db.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–∞ #{order_id}: {e}", exc_info=True)
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–∞: {e}")
    finally:
        db.close()

@router.message(F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã")
async def handle_completed_orders(message: Message, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–≤–µ—Å—Ç–∏ ID –¥–ª—è –¥–µ—Ç–∞–ª–µ–π."""
    if not await check_warehouse_access(message):
        return
    
    await state.set_state(MenuState.WAREHOUSE_COMPLETED_ORDERS)
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        completed_orders = db.query(CompletedOrder).options(
            # Eager load related data if needed for the list view, otherwise remove
            # joinedload(CompletedOrder.items), 
            # joinedload(CompletedOrder.joints),
            # joinedload(CompletedOrder.glues),
            joinedload(CompletedOrder.manager),
            joinedload(CompletedOrder.warehouse_user)
        ).order_by(desc(CompletedOrder.completed_at)).limit(20).all()
        
        if not completed_orders:
            await message.answer(
                "–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.",
                reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_COMPLETED_ORDERS)
            )
            return
            
        response = "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20):\n\n"
        for order in completed_orders:
            response += f"---\n"
            response += f"–ó–∞–∫–∞–∑ #{order.order_id} (–ó–∞–≤–µ—Ä—à–µ–Ω ID: {order.id})\n"
            response += f"–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {order.completed_at.strftime('%Y-%m-%d %H:%M')}\n"
            response += f"–°—Ç–∞—Ç—É—Å: {order.status}\n"
            # Removed the prompt to enter ID here as the next handler handles it
        
        response += f"\n–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ (–∏–∑ –ø–æ–ª—è '–ó–∞–≤–µ—Ä—à–µ–Ω ID: ...') –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∏ –æ–ø—Ü–∏–π.\n" 
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ
        if len(response) > 4000: # Telegram limit is 4096
            response = response[:4000] + "\n... (—Å–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π)"
            
        await message.answer(
            response,
            reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_COMPLETED_ORDERS)
        )
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {e}", exc_info=True)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.",
            reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_COMPLETED_ORDERS)
        )
    finally:
        db.close()

@router.message(StateFilter(MenuState.WAREHOUSE_COMPLETED_ORDERS), F.text.regexp(r'^\d+$'))
async def view_completed_order(message: Message, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∏ –∫–Ω–æ–ø–∫—É –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç."""
    if not await check_warehouse_access(message):
        return

    try:
        completed_order_id = int(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.", reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_COMPLETED_ORDERS))
        return

    db = next(get_db())
    try:
        order = db.query(CompletedOrder).options(
            joinedload(CompletedOrder.items),
            joinedload(CompletedOrder.joints),
            joinedload(CompletedOrder.glues),
            joinedload(CompletedOrder.manager),
            joinedload(CompletedOrder.warehouse_user)
        ).filter(CompletedOrder.id == completed_order_id).first()

        if not order:
            await message.answer(f"–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ —Å ID {completed_order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_COMPLETED_ORDERS))
            return

        # Format order details
        response = f"–î–µ—Ç–∞–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ ID: {order.id} (–ò—Å—Ö–æ–¥–Ω—ã–π: #{order.order_id})\n"
        response += f"–°—Ç–∞—Ç—É—Å: {order.status}\n"
        response += f"–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {order.completed_at.strftime('%Y-%m-%d %H:%M')}\n"
        response += f"–ö–ª–∏–µ–Ω—Ç: {order.customer_phone}\n"
        response += f"–ê–¥—Ä–µ—Å: {order.delivery_address}\n"
        shipment_date_str = order.shipment_date.strftime('%d.%m.%Y') if order.shipment_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
        payment_method_str = order.payment_method if order.payment_method else '–ù–µ —É–∫–∞–∑–∞–Ω'
        response += f"üóì –î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏: {shipment_date_str}\n"
        response += f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method_str}\n"
        response += f"–ú–æ–Ω—Ç–∞–∂: {'–î–∞' if order.installation_required else '–ù–µ—Ç'}\n"
        response += f"–ú–µ–Ω–µ–¥–∂–µ—Ä: {order.manager.username if order.manager else 'N/A'}\n"
        response += f"–°–∫–ª–∞–¥: {order.warehouse_user.username if order.warehouse_user else 'N/A'}\n"
        
        response += "\n–ü—Ä–æ–¥—É–∫—Ü–∏—è:\n"
        if order.items:
            for item in order.items:
                response += f"- {item.color} ({item.thickness} –º–º): {item.quantity} —à—Ç.\n"
        else:
            response += "- –Ω–µ—Ç\n"
        
        response += "\n–°—Ç—ã–∫–∏:\n"
        if order.joints:
            for joint in order.joints:
                response += f"- {joint.joint_type.name.capitalize()} ({joint.joint_thickness} –º–º, {joint.joint_color}): {joint.quantity} —à—Ç.\n"
        else:
            response += "- –Ω–µ—Ç\n"
        
        response += "\n–ö–ª–µ–π:\n"
        if order.glues:
            for glue_item in order.glues:
                response += f"- {glue_item.quantity} —à—Ç.\n"
        else:
            response += "- –Ω–µ—Ç\n"

        # Create inline keyboard
        keyboard_buttons = []
        if order.status == CompletedOrderStatus.COMPLETED.value:
             keyboard_buttons.append([
                 InlineKeyboardButton(text="‚ôªÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç", callback_data=f"request_return:{order.id}")
             ])
        
        inline_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons) if keyboard_buttons else None

        # Set state for potential further actions on this order
        await state.set_state(MenuState.WAREHOUSE_VIEW_COMPLETED_ORDER)
        await state.update_data(viewed_completed_order_id=order.id)
        
        await message.answer(
            response,
            reply_markup=inline_keyboard
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ {completed_order_id}: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞.", reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_COMPLETED_ORDERS))
    finally:
        db.close()

@router.callback_query(F.data.startswith("request_return:"))
async def process_return_request(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç'."""
    completed_order_id = int(callback_query.data.split(":")[1])
    user_id = callback_query.from_user.id
    message = callback_query.message

    db = next(get_db())
    try: # Outer try for DB connection management
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user or user.role not in [UserRole.WAREHOUSE, UserRole.SALES_MANAGER, UserRole.SUPER_ADMIN]:
            await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
            return 

        order = db.query(CompletedOrder).filter(CompletedOrder.id == completed_order_id).first()

        if not order:
            await callback_query.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            try:
                await message.edit_text(message.text + "\n\n‚ùå –û—à–∏–±–∫–∞: –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            except Exception as edit_err:
                 logging.error(f"Failed to edit message on order not found: {edit_err}")
            return

        if order.status != CompletedOrderStatus.COMPLETED.value:
            await callback_query.answer(f"–ù–µ–ª—å–∑—è –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{order.status}'.", show_alert=True)
            return

        # --- Start DB Transaction Logic ---
        try: # Inner try for the actual DB update + commit/rollback
            order.status = CompletedOrderStatus.RETURN_REQUESTED.value
            db.commit()
            logging.info(f"User {user_id} requested return for completed order {completed_order_id}")
            
            await callback_query.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç —Å–æ–∑–¥–∞–Ω.", show_alert=False)
            
            new_text = message.text.replace(f"–°—Ç–∞—Ç—É—Å: {CompletedOrderStatus.COMPLETED.value}", f"–°—Ç–∞—Ç—É—Å: {CompletedOrderStatus.RETURN_REQUESTED.value}")
            await message.edit_text(new_text, reply_markup=None)
            
        except Exception as db_exc:
            db.rollback()
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ {completed_order_id}: {db_exc}", exc_info=True)
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.", show_alert=True)
        # --- End DB Transaction Logic ---

    except Exception as outer_exc: # Catch exceptions outside the DB transaction logic
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç (–≤–Ω–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏) –¥–ª—è –∑–∞–∫–∞–∑–∞ {completed_order_id}: {outer_exc}", exc_info=True)
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.", show_alert=True)
    finally:
        db.close()

@router.message(F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def handle_back(message: Message, state: FSMContext):
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
            return
        
        next_menu, keyboard = await go_back(state, user.role)
        await state.set_state(next_menu)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
    finally:
        db.close()

@router.message(lambda message: message.text and message.text.startswith("/confirm_"))
async def confirm_specific_order(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    if not await check_warehouse_access(message):
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã /confirm_123
        order_id = int(message.text.split("_")[1])
        await process_order_shipment(message, order_id)
    except (IndexError, ValueError):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /confirm_ID, –≥–¥–µ ID - –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.",
            reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_ORDERS)
        )

async def process_order_shipment(message: Message, order_id: int):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≥—Ä—É–∑–∫—É –∑–∞–∫–∞–∑–∞"""
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –ø–æ ID
        order = db.query(Order).filter(Order.id == order_id).first()
        if not order:
            await message.answer(
                f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_MAIN)
            )
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        if order.status == OrderStatus.COMPLETED:
            await message.answer(
                f"‚ùå –ó–∞–∫–∞–∑ #{order_id} —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.",
                reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_MAIN)
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–∫–ª–∞–¥–∞
        warehouse_user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not warehouse_user:
            await message.answer(
                "‚ùå –í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_MAIN)
            )
            return
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è CompletedOrder —Å —É—á–µ—Ç–æ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            completed_order_data = {
                'order_id': order.id,
                'manager_id': order.manager_id,
                'warehouse_user_id': warehouse_user.id,
                'installation_required': getattr(order, 'installation_required', False),
                'customer_phone': getattr(order, 'customer_phone', "") or "–ù–µ —É–∫–∞–∑–∞–Ω",
                'delivery_address': getattr(order, 'delivery_address', "") or "–ù–µ —É–∫–∞–∑–∞–Ω"
            }
            
            # –û–±—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ–ª—è CompletedOrder –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            valid_fields = {}
            for column in CompletedOrder.__table__.columns:
                valid_fields[column.name] = True
            
            # –£–¥–∞–ª—è–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ –æ—à–∏–±–∫–µ
            for field in list(completed_order_data.keys()):
                if field not in valid_fields:
                    logging.warning(f"–£–¥–∞–ª—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –ø–æ–ª–µ {field} –∏–∑ –¥–∞–Ω–Ω—ã—Ö CompletedOrder")
                    del completed_order_data[field]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤–∫–ª—é—á–µ–Ω—ã
            for column in CompletedOrder.__table__.columns:
                if not column.nullable and column.name not in ['id', 'completed_at'] and column.name not in completed_order_data and not column.default:
                    if column.name == 'customer_phone':
                        completed_order_data[column.name] = "–ù–µ —É–∫–∞–∑–∞–Ω"
                    elif column.name == 'delivery_address':
                        completed_order_data[column.name] = "–ù–µ —É–∫–∞–∑–∞–Ω"
                    else:
                        logging.warning(f"–î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è {column.name}")
                        completed_order_data[column.name] = None
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ
            logging.info(f"–°–æ–∑–¥–∞–µ–º CompletedOrder —Å –¥–∞–Ω–Ω—ã–º–∏: {completed_order_data}")
            completed_order = CompletedOrder(**completed_order_data)
            db.add(completed_order)
            db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
            if hasattr(order, 'products') and order.products:
                for product in order.products:
                    try:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è CompletedOrderItem
                        item_data = {
                            'order_id': completed_order.id,
                            'quantity': getattr(product, 'quantity', 0),
                            'color': getattr(product, 'color', "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                            'thickness': getattr(product, 'thickness', 0.5)
                        }
                        
                        # –í–º–µ—Å—Ç–æ –ø–æ–∏—Å–∫–∞ –ø–æ film_id, –∏—â–µ–º Film –ø–æ –∫–æ–¥—É –ø–ª–µ–Ω–∫–∏ (color) –∏ –∑–∞—Ç–µ–º FinishedProduct
                        color = getattr(product, 'color', None)
                        thickness = getattr(product, 'thickness', 0.5)
                        
                        if color and item_data['quantity'] > 0:
                            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ
                            completed_item = CompletedOrderItem(**item_data)
                            db.add(completed_item)
                            logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä –≤ completed_order_items: {item_data}")
                            
                            # –ò—â–µ–º –ø–ª–µ–Ω–∫—É –ø–æ –∫–æ–¥—É
                            film = db.query(Film).filter(Film.code == color).first()
                            if film:
                                # –ò—â–µ–º –≥–æ—Ç–æ–≤—É—é –ø—Ä–æ–¥—É–∫—Ü–∏—é –ø–æ film_id –∏ —Ç–æ–ª—â–∏–Ω–µ
                                finished_product = db.query(FinishedProduct).filter(
                                    FinishedProduct.film_id == film.id,
                                    FinishedProduct.thickness == thickness
                                ).first()
                                
                                if finished_product:
                                    old_quantity = finished_product.quantity
                                    new_quantity = old_quantity - item_data['quantity']
                                    logging.info(f"–°–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ü–∏—é —Å–æ —Å–∫–ª–∞–¥–∞: film_code={color}, film_id={film.id}, thickness={thickness}, –±—ã–ª–æ={old_quantity}, —Å—Ç–∞–Ω–µ—Ç={new_quantity}")
                                    
                                    finished_product.quantity = new_quantity
                                    db.flush()  # –§–∏–∫—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏
                                    
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å
                                    updated_product = db.query(FinishedProduct).filter(
                                        FinishedProduct.film_id == film.id,
                                        FinishedProduct.thickness == thickness
                                    ).first()
                                    
                                    if updated_product and updated_product.quantity == new_quantity:
                                        logging.info(f"–£—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω–∞ –ø—Ä–æ–¥—É–∫—Ü–∏—è. –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –±–∞–∑–µ: {updated_product.quantity}")
                                    else:
                                        logging.error(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ü–∏–∏! –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –±–∞–∑–µ: {updated_product.quantity if updated_product else '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}")
                                else:
                                    logging.error(f"–ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è film_id={film.id}, thickness={thickness}")
                            else:
                                logging.error(f"–ü–ª–µ–Ω–∫–∞ —Å –∫–æ–¥–æ–º {color} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑: {str(e)}")
            else:
                # –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                try:
                    if hasattr(order, 'film_code') and order.film_code:
                        # –ù–∞—Ö–æ–¥–∏–º –ø–ª–µ–Ω–∫—É –ø–æ –∫–æ–¥—É
                        film = db.query(Film).filter(Film.code == order.film_code).first()
                        
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ
                        item_data = {
                            'order_id': completed_order.id,
                            'color': order.film_code,
                            'thickness': getattr(order, 'panel_thickness', 0.5),
                            'quantity': getattr(order, 'panel_quantity', 0)
                        }
                        
                        completed_item = CompletedOrderItem(**item_data)
                        db.add(completed_item)
                        logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä –∏–∑ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ completed_order_items: {item_data}")
                        
                        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å–æ —Å–∫–ª–∞–¥–∞
                        if film:
                            finished_product = db.query(FinishedProduct).filter(
                                FinishedProduct.film_id == film.id,
                                FinishedProduct.thickness == item_data['thickness']
                            ).first()
                            
                            if finished_product:
                                old_quantity = finished_product.quantity
                                new_quantity = old_quantity - item_data['quantity']
                                logging.info(f"–°–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ü–∏—é –∏–∑ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: film_id={film.id}, thickness={item_data['thickness']}, –±—ã–ª–æ={old_quantity}, —Å—Ç–∞–Ω–µ—Ç={new_quantity}")
                                
                                finished_product.quantity = new_quantity
                                db.flush()
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å
                                updated_product = db.query(FinishedProduct).filter(
                                    FinishedProduct.film_id == film.id,
                                    FinishedProduct.thickness == item_data['thickness']
                                ).first()
                                
                                if updated_product and updated_product.quantity == new_quantity:
                                    logging.info(f"–£—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω–∞ –ø—Ä–æ–¥—É–∫—Ü–∏—è –∏–∑ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã. –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –±–∞–∑–µ: {updated_product.quantity}")
                                else:
                                    logging.error(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã! –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –±–∞–∑–µ: {updated_product.quantity if updated_product else '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}")
                            else:
                                logging.error(f"–ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è film_id={film.id}, thickness={item_data['thickness']}")
                        else:
                            logging.error(f"–ü–ª–µ–Ω–∫–∞ —Å –∫–æ–¥–æ–º {order.film_code} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {str(e)}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—ã–∫–∞—Ö –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
            if hasattr(order, 'joints') and order.joints:
                for joint_item in order.joints:
                    try:
                        joint_type = getattr(joint_item, 'joint_type', None)
                        joint_color = getattr(joint_item, 'joint_color', None)
                        thickness = getattr(joint_item, 'joint_thickness', 0.5)
                        quantity = getattr(joint_item, 'quantity', getattr(joint_item, 'joint_quantity', 0))
                        
                        if joint_type and joint_color and quantity > 0:
                            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–º —Å—Ç—ã–∫–µ
                            joint_data = {
                                'order_id': completed_order.id,
                                'joint_type': joint_type,
                                'joint_color': joint_color,
                                'quantity': quantity,
                                'joint_thickness': thickness  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—è
                            }
                            
                            completed_joint = CompletedOrderJoint(**joint_data)
                            db.add(completed_joint)
                            logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Å—Ç—ã–∫ –≤ completed_order_joints: {joint_data}")
                            
                            # –°–ø–∏—Å—ã–≤–∞–µ–º —Å–æ —Å–∫–ª–∞–¥–∞
                            joint_db = db.query(Joint).filter(
                                Joint.type == joint_type,
                                Joint.color == joint_color,
                                Joint.thickness == thickness
                            ).first()
                            
                            if joint_db:
                                old_quantity = joint_db.quantity
                                new_quantity = old_quantity - quantity
                                logging.info(f"–°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç—ã–∫ —Å–æ —Å–∫–ª–∞–¥–∞: type={joint_type}, color={joint_color}, thickness={thickness}, –±—ã–ª–æ={old_quantity}, —Å—Ç–∞–Ω–µ—Ç={new_quantity}")
                                
                                joint_db.quantity = new_quantity
                                db.flush()
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å
                                updated_joint = db.query(Joint).filter(
                                    Joint.type == joint_type,
                                    Joint.color == joint_color,
                                    Joint.thickness == thickness
                                ).first()
                                
                                if updated_joint and updated_joint.quantity == new_quantity:
                                    logging.info(f"–£—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω —Å—Ç—ã–∫. –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –±–∞–∑–µ: {updated_joint.quantity}")
                                else:
                                    logging.error(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ç—ã–∫–∞! –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –±–∞–∑–µ: {updated_joint.quantity if updated_joint else '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}")
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—ã–∫–∞ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑: {str(e)}")
            else:
                # –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—ã–∫–µ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                    joint_type = getattr(order, 'joint_type', None)
                    joint_color = getattr(order, 'joint_color', None)
                    joint_quantity = getattr(order, 'joint_quantity', 0)
                    
                    if joint_type and joint_color and joint_quantity > 0:
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–º —Å—Ç—ã–∫–µ
                        joint_data = {
                            'order_id': completed_order.id,
                            'joint_type': joint_type,
                            'joint_color': joint_color,
                            'quantity': joint_quantity,
                            'joint_thickness': getattr(order, 'panel_thickness', 0.5)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—è
                        }
                        
                        completed_joint = CompletedOrderJoint(**joint_data)
                        db.add(completed_joint)
                        logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Å—Ç—ã–∫ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ completed_order_joints: {joint_data}")
                        
                        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å–æ —Å–∫–ª–∞–¥–∞
                        joint_thickness = getattr(order, 'panel_thickness', 0.5)
                        joint_db = db.query(Joint).filter(
                            Joint.type == joint_type,
                            Joint.color == joint_color,
                            Joint.thickness == joint_thickness
                        ).first()
                        
                        if joint_db:
                            old_quantity = joint_db.quantity
                            new_quantity = old_quantity - joint_quantity
                            logging.info(f"–°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç—ã–∫ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: type={joint_type}, color={joint_color}, thickness={joint_thickness}, –±—ã–ª–æ={old_quantity}, —Å—Ç–∞–Ω–µ—Ç={new_quantity}")
                            
                            joint_db.quantity = new_quantity
                            db.flush()
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å
                            updated_joint = db.query(Joint).filter(
                                Joint.type == joint_type,
                                Joint.color == joint_color,
                                Joint.thickness == joint_thickness
                            ).first()
                            
                            if updated_joint and updated_joint.quantity == new_quantity:
                                logging.info(f"–£—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω —Å—Ç—ã–∫ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã. –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –±–∞–∑–µ: {updated_joint.quantity}")
                            else:
                                logging.error(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ç—ã–∫–∞ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã! –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –±–∞–∑–µ: {updated_joint.quantity if updated_joint else '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—ã–∫–∞ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {str(e)}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–µ–µ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
            glue_quantity = 0
            if hasattr(order, 'glues') and order.glues:
                try:
                    glue_quantity = sum(getattr(glue, 'quantity', 0) for glue in order.glues)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–µ–µ: {str(e)}")
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç glues, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∑–∞–∫–∞–∑–∞ (—Å—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
                glue_quantity = getattr(order, 'glue_quantity', 0)
                
            if glue_quantity > 0:
                try:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–º –∫–ª–µ–µ
                    glue_data = {
                        'order_id': completed_order.id,
                        'quantity': glue_quantity
                    }
                    
                    completed_glue = CompletedOrderGlue(**glue_data)
                    db.add(completed_glue)
                    logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∫–ª–µ–π –≤ completed_order_glues: {glue_data}")
                    
                    # –°–ø–∏—Å—ã–≤–∞–µ–º –∫–ª–µ–π —Å–æ —Å–∫–ª–∞–¥–∞
                    glue = db.query(Glue).first()
                    if glue:
                        old_quantity = glue.quantity
                        new_quantity = old_quantity - glue_quantity
                        logging.info(f"–°–ø–∏—Å—ã–≤–∞–µ–º –∫–ª–µ–π —Å–æ —Å–∫–ª–∞–¥–∞: –±—ã–ª–æ={old_quantity}, —Å—Ç–∞–Ω–µ—Ç={new_quantity}")
                        
                        glue.quantity = new_quantity
                        db.flush()
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å
                        updated_glue = db.query(Glue).first()
                        if updated_glue and updated_glue.quantity == new_quantity:
                            logging.info(f"–£—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω –∫–ª–µ–π. –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –±–∞–∑–µ: {updated_glue.quantity}")
                        else:
                            logging.error(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –∫–ª–µ—è! –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –±–∞–∑–µ: {updated_glue.quantity if updated_glue else '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª–µ—è –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑: {str(e)}")
            
            # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π
            order.status = OrderStatus.COMPLETED
            order.completed_at = datetime.utcnow()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            logging.info(f"–ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î —á–µ—Ä–µ–∑ commit –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order.id}")
            db.commit()
            logging.info(f"–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order.id}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
            manager = db.query(User).filter(User.id == order.manager_id).first()
            if manager and manager.telegram_id:
                try:
                    await message.bot.send_message(
                        manager.telegram_id,
                        f"‚úÖ –ó–∞–∫–∞–∑ #{order.id} –≤—ã–ø–æ–ª–Ω–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É."
                    )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É: {str(e)}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–∫–ª–∞–¥—É
            await message.answer(
                f"‚úÖ –ó–∞–∫–∞–∑ #{order.id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π.",
                reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_MAIN)
            )
        
        except Exception as e:
            db.rollback()
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ CompletedOrder: {str(e)}")
            await message.answer(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {str(e)}",
                reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_MAIN)
            )
            return
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ—Ç–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞ #{order_id}: {str(e)}")
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {str(e)}",
            reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_MAIN)
        )
    finally:
        db.close()

@router.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É")
async def handle_back_to_admin(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞"""
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user or user.role != UserRole.SUPER_ADMIN:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–¥–º–∏–Ω–∞
        await state.update_data(is_admin_context=False)
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
        await state.set_state(MenuState.SUPER_ADMIN_MAIN)
        await message.answer(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=get_menu_keyboard(MenuState.SUPER_ADMIN_MAIN)
        )
    finally:
        db.close()

async def check_warehouse_access(message: Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∞ –¥–ª—è —Ä–æ–ª–∏ —Å–∫–ª–∞–¥–∞"""
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        # –î–æ—Å—Ç—É–ø –∫ –æ—Å—Ç–∞—Ç–∫–∞–º –µ—Å—Ç—å —É –°–∫–ª–∞–¥–∞, –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞, –ú–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –∏ –°—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
        allowed_roles = [UserRole.WAREHOUSE, UserRole.PRODUCTION, UserRole.SUPER_ADMIN, UserRole.SALES_MANAGER]
        if not user or user.role not in allowed_roles:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤.")
            return False
        return True
    finally:
        db.close()

# --- NEW HANDLERS FOR RETURN PROCESSING ---

@router.message(StateFilter(MenuState.WAREHOUSE_MAIN), F.text == "‚ôªÔ∏è –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç")
async def handle_return_requests(message: Message, state: FSMContext):
    """Displays a list of orders awaiting return confirmation."""
    if not await check_warehouse_access(message):
        return
        
    # –ü–æ–ª—É—á–∏–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        user_role = user.role if user else UserRole.NONE
        return_menu_state = MenuState.WAREHOUSE_MAIN  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å–∫–ª–∞–¥–∞
        
        # –£—Å—Ç–∞–Ω–æ–≤–∏–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø—Ä–æ—Å–æ–≤
        await state.set_state(MenuState.WAREHOUSE_RETURN_REQUESTS)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç
        return_requests = db.query(CompletedOrder).filter(
            CompletedOrder.status == CompletedOrderStatus.RETURN_REQUESTED.value
        ).options(
            joinedload(CompletedOrder.manager)
        ).order_by(desc(CompletedOrder.completed_at)).limit(30).all() # Limit to 30 requests

        # –û–ø—Ä–µ–¥–µ–ª–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        if user_role == UserRole.SALES_MANAGER:
            return_menu_state = MenuState.SALES_MAIN
        elif user_role == UserRole.SUPER_ADMIN:
            # –î–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞, –ø—Ä–æ–≤–µ—Ä–∏–º, –≤ –∫–∞–∫–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç
            state_data = await state.get_data()
            is_admin_context = state_data.get("is_admin_context", False)
            if is_admin_context:
                # –ï—Å–ª–∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω —ç–º—É–ª–∏—Ä—É–µ—Ç —Å–∫–ª–∞–¥
                return_menu_state = MenuState.WAREHOUSE_MAIN
            else:
                return_menu_state = MenuState.SUPER_ADMIN_MAIN

        if not return_requests:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –≤–µ—Ä–Ω–µ–º—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é —Ä–æ–ª–∏
            await message.answer(
                "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç.",
                reply_markup=get_menu_keyboard(return_menu_state)
            )
            await state.set_state(return_menu_state)
            return

        response = "‚ôªÔ∏è –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30):\n\n"
        for req in return_requests:
            response += f"---\n"
            response += f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç ID: {req.id} (–ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–∫–∞–∑ #{req.order_id})\n"
            response += f"–î–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ (–ø—Ä–∏–º–µ—Ä–Ω–æ): {req.updated_at.strftime('%Y-%m-%d %H:%M') if req.updated_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            response += f"–ú–µ–Ω–µ–¥–∂–µ—Ä: {req.manager.username if req.manager else 'N/A'}\n"

        response += f"\n–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.\n"

        if len(response) > 4000:
            response = response[:4000] + "\n... (—Å–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π)"

        # –°–æ—Ö—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
        await state.update_data(return_menu_state=return_menu_state)

        await message.answer(
            response,
            reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_RETURN_REQUESTS) # Keyboard with Back button
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç: {e}", exc_info=True)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç.",
            reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_MAIN)
        )
        await state.set_state(MenuState.WAREHOUSE_MAIN)
    finally:
        db.close()

@router.message(StateFilter(MenuState.WAREHOUSE_RETURN_REQUESTS), F.text.regexp(r'^\d+$'))
async def view_return_request_details(message: Message, state: FSMContext):
    """Displays details of a specific return request with confirmation buttons."""
    if not await check_warehouse_access(message):
        return

    try:
        completed_order_id = int(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.", reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_RETURN_REQUESTS))
        return

    db = next(get_db())
    try:
        order = db.query(CompletedOrder).options(
            joinedload(CompletedOrder.items),
            joinedload(CompletedOrder.joints),
            joinedload(CompletedOrder.glues),
            joinedload(CompletedOrder.manager),
            joinedload(CompletedOrder.warehouse_user)
        ).filter(
            CompletedOrder.id == completed_order_id,
            CompletedOrder.status == CompletedOrderStatus.RETURN_REQUESTED.value
        ).first()

        if not order:
            await message.answer(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç —Å ID {completed_order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_RETURN_REQUESTS))
            return

        # Format order details (similar to view_completed_order)
        response = f"–î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç ID: {order.id} (–ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–∫–∞–∑ #{order.order_id})\n"
        response += f"–°—Ç–∞—Ç—É—Å: {order.status}\n"
        response += f"–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {order.completed_at.strftime('%Y-%m-%d %H:%M')}\n"
        response += f"–ö–ª–∏–µ–Ω—Ç: {order.customer_phone}\n"
        response += f"–ê–¥—Ä–µ—Å: {order.delivery_address}\n"
        shipment_date_str = order.shipment_date.strftime('%d.%m.%Y') if order.shipment_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
        payment_method_str = order.payment_method if order.payment_method else '–ù–µ —É–∫–∞–∑–∞–Ω'
        response += f"üóì –î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏: {shipment_date_str}\n"
        response += f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method_str}\n"
        response += f"–ú–æ–Ω—Ç–∞–∂: {'–î–∞' if order.installation_required else '–ù–µ—Ç'}\n"
        response += f"–ú–µ–Ω–µ–¥–∂–µ—Ä: {order.manager.username if order.manager else 'N/A'}\n"
        response += f"–°–∫–ª–∞–¥ (–æ—Ç–≥—Ä—É–∑–∏–ª): {order.warehouse_user.username if order.warehouse_user else 'N/A'}\n"

        response += "\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è:\n"
        if order.items:
            for item in order.items:
                response += f"- {item.color} ({item.thickness} –º–º): {item.quantity} —à—Ç.\n"
        else: response += "- –Ω–µ—Ç\n"

        response += "\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ —Å—Ç—ã–∫–∏:\n"
        if order.joints:
            for joint in order.joints:
                response += f"- {joint.joint_type.name.capitalize()} ({joint.joint_thickness} –º–º, {joint.joint_color}): {joint.quantity} —à—Ç.\n"
        else: response += "- –Ω–µ—Ç\n"

        response += "\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π –∫–ª–µ–π:\n"
        if order.glues:
            for glue_item in order.glues:
                response += f"- {glue_item.quantity} —à—Ç.\n"
        else: response += "- –Ω–µ—Ç\n"

        # Create inline keyboard for confirmation/rejection
        keyboard_buttons = [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç", callback_data=f"confirm_return:{order.id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç", callback_data=f"reject_return:{order.id}")
        ]
        inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[keyboard_buttons])

        # Set state for potential further actions on this order
        await state.set_state(MenuState.VIEW_RETURN_REQUEST)
        await state.update_data(viewed_return_request_id=order.id)

        await message.answer(
            response,
            reply_markup=inline_keyboard
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç {completed_order_id}: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–ø—Ä–æ—Å–∞.", reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_RETURN_REQUESTS))
    finally:
        db.close()

@router.callback_query(F.data.startswith("confirm_return:"))
async def process_confirm_return(callback_query: CallbackQuery, state: FSMContext):
    """Handles the confirmation of a return request."""
    completed_order_id = int(callback_query.data.split(":")[1])
    user_id = callback_query.from_user.id
    message = callback_query.message

    db = next(get_db())
    try:
        warehouse_user = db.query(User).filter(User.telegram_id == user_id).first()
        if not warehouse_user or warehouse_user.role not in [UserRole.WAREHOUSE, UserRole.SUPER_ADMIN, UserRole.SALES_MANAGER]:
            await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
            return

        order = db.query(CompletedOrder).options(
            selectinload(CompletedOrder.items),
            selectinload(CompletedOrder.joints),
            selectinload(CompletedOrder.glues),
            joinedload(CompletedOrder.manager) # Load manager for notification
        ).filter(CompletedOrder.id == completed_order_id).first()

        if not order:
            await callback_query.answer("–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        if order.status != CompletedOrderStatus.RETURN_REQUESTED.value:
            await callback_query.answer(f"–ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω (—Å—Ç–∞—Ç—É—Å: {order.status}).", show_alert=True)
            return

        # --- Start DB Transaction --- Add items back to stock
        try:
            logging.info(f"Confirming return for CompletedOrder ID: {order.id}. User: {user_id}")
            stock_update_details = []

            # 1. Return Finished Products
            for item in order.items:
                film = db.query(Film).filter(Film.code == item.color).first()
                if film:
                    finished_product = db.query(FinishedProduct).filter(
                        FinishedProduct.film_id == film.id,
                        FinishedProduct.thickness == item.thickness
                    ).first()
                    if finished_product:
                        old_qty = finished_product.quantity
                        finished_product.quantity += item.quantity
                        stock_update_details.append(f"–ü—Ä–æ–¥—É–∫—Ç {item.color} ({item.thickness}–º–º): +{item.quantity} (–±—ã–ª–æ {old_qty})")
                    else:
                        # If product didn't exist, create it (shouldn't happen often)
                        finished_product = FinishedProduct(film_id=film.id, thickness=item.thickness, quantity=item.quantity)
                        db.add(finished_product)
                        stock_update_details.append(f"–ü—Ä–æ–¥—É–∫—Ç {item.color} ({item.thickness}–º–º): +{item.quantity} (—Å–æ–∑–¥–∞–Ω)")
                else:
                     logging.warning(f"Film {item.color} not found during return confirmation for order {order.id}")

            # 2. Return Joints
            for joint_item in order.joints:
                joint = db.query(Joint).filter(
                    Joint.type == joint_item.joint_type,
                    Joint.thickness == joint_item.joint_thickness,
                    Joint.color == joint_item.joint_color
                ).first()
                if joint:
                    old_qty = joint.quantity
                    joint.quantity += joint_item.quantity
                    stock_update_details.append(f"–°—Ç—ã–∫ {joint_item.joint_type.name} ({joint_item.joint_thickness}–º–º, {joint_item.joint_color}): +{joint_item.quantity} (–±—ã–ª–æ {old_qty})")
                else:
                    # Create if doesn't exist
                    joint = Joint(type=joint_item.joint_type, thickness=joint_item.joint_thickness, color=joint_item.joint_color, quantity=joint_item.quantity)
                    db.add(joint)
                    stock_update_details.append(f"–°—Ç—ã–∫ {joint_item.joint_type.name} ({joint_item.joint_thickness}–º–º, {joint_item.joint_color}): +{joint_item.quantity} (—Å–æ–∑–¥–∞–Ω)")

            # 3. Return Glue
            for glue_item in order.glues:
                glue = db.query(Glue).first()
                if glue:
                    old_qty = glue.quantity
                    glue.quantity += glue_item.quantity
                    stock_update_details.append(f"–ö–ª–µ–π: +{glue_item.quantity} (–±—ã–ª–æ {old_qty})")
                else:
                    glue = Glue(quantity=glue_item.quantity)
                    db.add(glue)
                    stock_update_details.append(f"–ö–ª–µ–π: +{glue_item.quantity} (—Å–æ–∑–¥–∞–Ω)")

            # Update order status
            order.status = CompletedOrderStatus.RETURNED.value
            order.updated_at = datetime.utcnow() # Explicitly update timestamp

            # Log operation (optional but recommended)
            # TODO: Consider adding a specific 'return' operation type?
            operation_details = {
                "completed_order_id": order.id,
                "original_order_id": order.order_id,
                "confirmed_by": warehouse_user.id,
                "stock_updates": stock_update_details
            }
            op = Operation(
                user_id=warehouse_user.id,
                operation_type="order_return_confirmed", 
                quantity=1, # Represents one order return
                details=json.dumps(operation_details)
            )
            db.add(op)

            db.commit()
            logging.info(f"Return confirmed and stock updated for CompletedOrder ID: {order.id}")

            await callback_query.answer("‚úÖ –í–æ–∑–≤—Ä–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –æ—Å—Ç–∞—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.", show_alert=False)

            # Notify manager
            if order.manager and order.manager.telegram_id:
                try:
                    await message.bot.send_message(
                        order.manager.telegram_id,
                        f"‚ôªÔ∏è –í–æ–∑–≤—Ä–∞—Ç –ø–æ –∑–∞–∫–∞–∑—É #{order.order_id} (–ó–∞–ø—Ä–æ—Å ID: {order.id}) –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —Å–∫–ª–∞–¥–æ–º."
                    )
                except Exception as e:
                    logging.error(f"Failed to send return confirmation notification to manager {order.manager.telegram_id}: {e}")

            # Update message text
            new_text = message.text.replace(f"–°—Ç–∞—Ç—É—Å: {CompletedOrderStatus.RETURN_REQUESTED.value}", f"–°—Ç–∞—Ç—É—Å: {CompletedOrderStatus.RETURNED.value}")
            new_text += "\n\n‚úÖ –í–æ–∑–≤—Ä–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —Å–∫–ª–∞–¥–æ–º."
            await message.edit_text(new_text, reply_markup=None)
            
            # Return to the list of return requests or appropriate menu based on user role
            state_data = await state.get_data()
            return_menu_state = state_data.get("return_menu_state", MenuState.WAREHOUSE_MAIN)

            # If returning to main menu of role, go directly there
            if return_menu_state in [MenuState.WAREHOUSE_MAIN, MenuState.SALES_MAIN, MenuState.SUPER_ADMIN_MAIN]:
                await state.set_state(return_menu_state)
                await message.answer("–í–æ–∑–≤—Ä–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", 
                                     reply_markup=get_menu_keyboard(return_menu_state))
            else:
                # Otherwise return to the list of return requests
                await state.set_state(MenuState.WAREHOUSE_RETURN_REQUESTS)
                await handle_return_requests(message, state)

        except Exception as db_exc:
            db.rollback()
            logging.error(f"DB Error during return confirmation for order {order.id}: {db_exc}", exc_info=True)
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤.", show_alert=True)
        # --- End DB Transaction ---

    except Exception as outer_exc:
        logging.error(f"Outer error during return confirmation processing for order {completed_order_id}: {outer_exc}", exc_info=True)
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ–±—â–∞—è –æ—à–∏–±–∫–∞.", show_alert=True)
    finally:
        db.close()

@router.callback_query(F.data.startswith("reject_return:"))
async def process_reject_return(callback_query: CallbackQuery, state: FSMContext):
    """Handles the rejection of a return request."""
    completed_order_id = int(callback_query.data.split(":")[1])
    user_id = callback_query.from_user.id
    message = callback_query.message

    db = next(get_db())
    try:
        warehouse_user = db.query(User).filter(User.telegram_id == user_id).first()
        if not warehouse_user or warehouse_user.role not in [UserRole.WAREHOUSE, UserRole.SUPER_ADMIN, UserRole.SALES_MANAGER]:
            await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
            return

        order = db.query(CompletedOrder).options(
            joinedload(CompletedOrder.manager) # Load manager for notification
        ).filter(CompletedOrder.id == completed_order_id).first()

        if not order:
            await callback_query.answer("–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        if order.status != CompletedOrderStatus.RETURN_REQUESTED.value:
            await callback_query.answer(f"–ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω (—Å—Ç–∞—Ç—É—Å: {order.status}).", show_alert=True)
            return

        # --- Start DB Transaction ---
        try:
            logging.info(f"Rejecting return for CompletedOrder ID: {order.id}. User: {user_id}")
            # Change status back to COMPLETED or to RETURN_REJECTED
            order.status = CompletedOrderStatus.RETURN_REJECTED.value # Using the specific rejected status
            order.updated_at = datetime.utcnow()

            # Log operation (optional)
            operation_details = {
                 "completed_order_id": order.id,
                 "original_order_id": order.order_id,
                 "rejected_by": warehouse_user.id
            }
            op = Operation(
                user_id=warehouse_user.id,
                operation_type="order_return_rejected",
                quantity=1, # Represents one order return rejection
                details=json.dumps(operation_details)
            )
            db.add(op)

            db.commit()
            logging.info(f"Return rejected for CompletedOrder ID: {order.id}")

            await callback_query.answer("‚ùå –í–æ–∑–≤—Ä–∞—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω.", show_alert=False)

            # Notify manager
            if order.manager and order.manager.telegram_id:
                try:
                    await message.bot.send_message(
                        order.manager.telegram_id,
                        f"‚ùå –í–æ–∑–≤—Ä–∞—Ç –ø–æ –∑–∞–∫–∞–∑—É #{order.order_id} (–ó–∞–ø—Ä–æ—Å ID: {order.id}) –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω —Å–∫–ª–∞–¥–æ–º."
                    )
                except Exception as e:
                    logging.error(f"Failed to send return rejection notification to manager {order.manager.telegram_id}: {e}")

            # Update message text
            new_text = message.text.replace(f"–°—Ç–∞—Ç—É—Å: {CompletedOrderStatus.RETURN_REQUESTED.value}", f"–°—Ç–∞—Ç—É—Å: {CompletedOrderStatus.RETURN_REJECTED.value}")
            new_text += "\n\n‚ùå –í–æ–∑–≤—Ä–∞—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω —Å–∫–ª–∞–¥–æ–º."
            await message.edit_text(new_text, reply_markup=None)
            
            # Return to the list of return requests or appropriate menu based on user role
            state_data = await state.get_data()
            return_menu_state = state_data.get("return_menu_state", MenuState.WAREHOUSE_MAIN)

            # If returning to main menu of role, go directly there
            if return_menu_state in [MenuState.WAREHOUSE_MAIN, MenuState.SALES_MAIN, MenuState.SUPER_ADMIN_MAIN]:
                await state.set_state(return_menu_state)
                await message.answer("–í–æ–∑–≤—Ä–∞—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", 
                                     reply_markup=get_menu_keyboard(return_menu_state))
            else:
                # Otherwise return to the list of return requests
                await state.set_state(MenuState.WAREHOUSE_RETURN_REQUESTS)
                await handle_return_requests(message, state)

        except Exception as db_exc:
            db.rollback()
            logging.error(f"DB Error during return rejection for order {order.id}: {db_exc}", exc_info=True)
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞.", show_alert=True)
        # --- End DB Transaction ---

    except Exception as outer_exc:
        logging.error(f"Outer error during return rejection processing for order {completed_order_id}: {outer_exc}", exc_info=True)
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ–±—â–∞—è –æ—à–∏–±–∫–∞.", show_alert=True)
    finally:
        db.close() 

@router.message(F.text == "üîñ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã", StateFilter(MenuState.WAREHOUSE_MAIN))
async def handle_reserved_orders_warehouse(message: Message, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Å–∫–ª–∞–¥—Å–∫–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞"""
    if not await check_warehouse_access(message):
        return
    
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º RESERVED
        reserved_orders = db.query(Order).filter(
            Order.status == OrderStatus.RESERVED.value
        ).options(
            joinedload(Order.products),
            joinedload(Order.joints),
            joinedload(Order.glues),
            joinedload(Order.manager)
        ).order_by(desc(Order.created_at)).all()
        
        if not reserved_orders:
            await message.answer(
                "üîñ –ù–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.",
                reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_MAIN)
            )
            return
        
        response = "üîñ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n\n"
        keyboard_buttons = []
        
        for order in reserved_orders:
            response += f"---\n"
            response += f"–ó–∞–∫–∞–∑ #{order.id}\n"
            response += f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {order.created_at.strftime('%Y-%m-%d %H:%M')}\n"
            response += f"–ú–µ–Ω–µ–¥–∂–µ—Ä: {order.manager.username if order.manager else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            response += f"–ö–ª–∏–µ–Ω—Ç: {order.customer_phone}\n"
            response += f"–ê–¥—Ä–µ—Å: {order.delivery_address}\n"
            shipment_date_str = order.shipment_date.strftime('%d.%m.%Y') if order.shipment_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
            response += f"üóì –î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏: {shipment_date_str}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–æ–¥—É–∫—Ü–∏–µ–π (–∫—Ä–∞—Ç–∫–æ)
            products_count = len(order.products) if order.products else 0
            joints_count = len(order.joints) if order.joints else 0
            glue_count = sum(g.quantity for g in order.glues) if order.glues else 0
            
            response += f"üì¶ –ü—Ä–æ–¥—É–∫—Ü–∏—è: {products_count} –ø–æ–∑–∏—Ü–∏–π, "
            response += f"üîó –°—Ç—ã–∫–∏: {joints_count} –ø–æ–∑–∏—Ü–∏–π, "
            response += f"üß¥ –ö–ª–µ–π: {glue_count} —à—Ç.\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
            keyboard_buttons.append([KeyboardButton(text=f"üîñ –ó–∞–∫–∞–∑ #{order.id}")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard_buttons.append([KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")])
        
        keyboard = ReplyKeyboardMarkup(
            keyboard=keyboard_buttons,
            resize_keyboard=True
        )
        
        await message.answer(response, reply_markup=keyboard)
        await state.set_state(MenuState.WAREHOUSE_RESERVED_ORDERS)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {e}", exc_info=True)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.",
            reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_MAIN)
        )
    finally:
        db.close()

@router.message(StateFilter(MenuState.WAREHOUSE_RESERVED_ORDERS), F.text.regexp(r"^üîñ –ó–∞–∫–∞–∑ #(\d+)$"))
async def view_reserved_order_warehouse(message: Message, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –µ–≥–æ"""
    if not await check_warehouse_access(message):
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        order_id_match = re.search(r"^üîñ –ó–∞–∫–∞–∑ #(\d+)$", message.text)
        if not order_id_match:
            await message.answer(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞–∫–∞–∑–∞.",
                reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_RESERVED_ORDERS)
            )
            return
        
        order_id = int(order_id_match.group(1))
        
        db = next(get_db())
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
            order = db.query(Order).options(
                joinedload(Order.products),
                joinedload(Order.joints),
                joinedload(Order.glues),
                joinedload(Order.manager)
            ).filter(
                Order.id == order_id,
                Order.status == OrderStatus.RESERVED.value
            ).first()
            
            if not order:
                await message.answer(
                    f"–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ —Å ID {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –Ω–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω'.",
                    reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_RESERVED_ORDERS)
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
            response = f"üîñ –î–µ—Ç–∞–ª–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ #{order.id}\n\n"
            response += f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {order.created_at.strftime('%Y-%m-%d %H:%M')}\n"
            response += f"–ú–µ–Ω–µ–¥–∂–µ—Ä: {order.manager.username if order.manager else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            response += f"–ö–ª–∏–µ–Ω—Ç: {order.customer_phone}\n"
            response += f"–ê–¥—Ä–µ—Å: {order.delivery_address}\n"
            shipment_date_str = order.shipment_date.strftime('%d.%m.%Y') if order.shipment_date else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
            payment_method_str = order.payment_method if order.payment_method else '–ù–µ —É–∫–∞–∑–∞–Ω'
            response += f"üóì –î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏: {shipment_date_str}\n"
            response += f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method_str}\n"
            response += f"–ú–æ–Ω—Ç–∞–∂: {'–î–∞' if order.installation_required else '–ù–µ—Ç'}\n\n"
            
            response += "üì¶ –ü—Ä–æ–¥—É–∫—Ü–∏—è:\n"
            if order.products:
                for item in order.products:
                    response += f"- {item.color} ({item.thickness} –º–º): {item.quantity} —à—Ç.\n"
            else:
                response += "- –Ω–µ—Ç\n"
            
            response += "\nüîó –°—Ç—ã–∫–∏:\n"
            if order.joints:
                for joint in order.joints:
                    joint_type_name = "–î—Ä—É–≥–æ–π"
                    if joint.joint_type == JointType.SIMPLE.value:
                        joint_type_name = "–ü—Ä–æ—Å—Ç–æ–π"
                    elif joint.joint_type == JointType.BUTTERFLY.value:
                        joint_type_name = "–ë–∞–±–æ—á–∫–∞"
                    elif joint.joint_type == JointType.CLOSING.value:
                        joint_type_name = "–ó–∞–º—ã–∫–∞—é—â–∏–π"
                    
                    response += f"- {joint_type_name} ({joint.joint_thickness} –º–º, {joint.joint_color}): {joint.quantity} —à—Ç.\n"
            else:
                response += "- –Ω–µ—Ç\n"
            
            response += "\nüß¥ –ö–ª–µ–π:\n"
            if order.glues:
                for glue in order.glues:
                    response += f"- {glue.quantity} —à—Ç.\n"
            else:
                response += "- –Ω–µ—Ç\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text=f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑ #{order.id}"), KeyboardButton(text=f"‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ #{order.id}")],
                    [KeyboardButton(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö")]
                ],
                resize_keyboard=True
            )
            
            await message.answer(response, reply_markup=keyboard)
            await state.set_state(MenuState.WAREHOUSE_VIEW_RESERVED_ORDER)
            await state.update_data(viewed_reserved_order_id=order.id)
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ {order_id}: {e}", exc_info=True)
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞.",
                reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_RESERVED_ORDERS)
            )
        finally:
            db.close()
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞–∫–∞–∑–∞.",
            reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_RESERVED_ORDERS)
        )

@router.message(StateFilter(MenuState.WAREHOUSE_VIEW_RESERVED_ORDER), F.text.regexp(r"^‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑ #(\d+)$"))
async def confirm_reserved_order_warehouse(message: Message, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –∏ –º–µ–Ω—è–µ—Ç –µ–≥–æ —Å—Ç–∞—Ç—É—Å –Ω–∞ NEW"""
    if not await check_warehouse_access(message):
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        order_id_match = re.search(r"^‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑ #(\d+)$", message.text)
        if not order_id_match:
            await message.answer(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞–∫–∞–∑–∞.",
                reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_RESERVED_ORDERS)
            )
            return
        
        order_id = int(order_id_match.group(1))
        
        db = next(get_db())
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
            order = db.query(Order).filter(
                Order.id == order_id,
                Order.status == OrderStatus.RESERVED.value
            ).first()
            
            if not order:
                await message.answer(
                    f"–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ —Å ID {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –Ω–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω'.",
                    reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_RESERVED_ORDERS)
                )
                return
            
            # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ NEW
            order.status = OrderStatus.NEW.value
            db.commit()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
            try:
                manager = db.query(User).filter(User.id == order.manager_id).first()
                if manager and manager.telegram_id:
                    await message.bot.send_message(
                        manager.telegram_id,
                        f"‚úÖ –í–∞—à –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ #{order.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —Å–∫–ª–∞–¥–æ–º –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É."
                    )
            except Exception as notify_error:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É: {notify_error}")
            
            await message.answer(
                f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É.",
                reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_MAIN)
            )
            await state.set_state(MenuState.WAREHOUSE_MAIN)
            
        except Exception as e:
            db.rollback()
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ {order_id}: {e}", exc_info=True)
            await message.answer(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}",
                reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_MAIN)
            )
            await state.set_state(MenuState.WAREHOUSE_MAIN)
        finally:
            db.close()
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞–∫–∞–∑–∞.",
            reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_RESERVED_ORDERS)
        )

@router.message(StateFilter(MenuState.WAREHOUSE_VIEW_RESERVED_ORDER), F.text.regexp(r"^‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ #(\d+)$"))
async def reject_reserved_order_warehouse(message: Message, state: FSMContext):
    """–û—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –∏ –º–µ–Ω—è–µ—Ç –µ–≥–æ —Å—Ç–∞—Ç—É—Å –Ω–∞ CANCELLED"""
    if not await check_warehouse_access(message):
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        order_id_match = re.search(r"^‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ #(\d+)$", message.text)
        if not order_id_match:
            await message.answer(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞–∫–∞–∑–∞.",
                reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_RESERVED_ORDERS)
            )
            return
        
        order_id = int(order_id_match.group(1))
        
        db = next(get_db())
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
            order = db.query(Order).filter(
                Order.id == order_id,
                Order.status == OrderStatus.RESERVED.value
            ).first()
            
            if not order:
                await message.answer(
                    f"–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ —Å ID {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –Ω–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω'.",
                    reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_RESERVED_ORDERS)
                )
                return
            
            # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ CANCELLED
            order.status = OrderStatus.CANCELLED.value
            db.commit()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
            try:
                manager = db.query(User).filter(User.id == order.manager_id).first()
                if manager and manager.telegram_id:
                    await message.bot.send_message(
                        manager.telegram_id,
                        f"‚ùå –í–∞—à –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ #{order.id} –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω —Å–∫–ª–∞–¥–æ–º."
                    )
            except Exception as notify_error:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É: {notify_error}")
            
            await message.answer(
                f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω.",
                reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_MAIN)
            )
            await state.set_state(MenuState.WAREHOUSE_MAIN)
            
        except Exception as e:
            db.rollback()
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ {order_id}: {e}", exc_info=True)
            await message.answer(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}",
                reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_MAIN)
            )
            await state.set_state(MenuState.WAREHOUSE_MAIN)
        finally:
            db.close()
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞–∫–∞–∑–∞.",
            reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_RESERVED_ORDERS)
        )

@router.message(StateFilter(MenuState.WAREHOUSE_VIEW_RESERVED_ORDER), F.text == "‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö")
async def back_to_reserved_orders_list(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
    if not await check_warehouse_access(message):
        return
    
    await handle_reserved_orders_warehouse(message, state)