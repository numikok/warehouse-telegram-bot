from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from models import User, UserRole, Film, Panel, Joint, Glue, Operation, FinishedProduct, Order, CompletedOrder, OrderStatus, JointType, CompletedOrderJoint, CompletedOrderItem, CompletedOrderGlue
from database import get_db
import json
import logging
from navigation import MenuState, get_menu_keyboard, go_back
from datetime import datetime

router = Router()

def get_main_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–∫–ª–∞–¥–æ–≤—â–∏–∫–∞"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ")],
            [KeyboardButton(text="üì• –û–ø—Ä–∏—Ö–æ–¥–æ–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã")],
            [KeyboardButton(text="üì¶ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–≥—Ä—É–∑–∫—É")],
            [KeyboardButton(text="üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã")]
        ],
        resize_keyboard=True
    )

class WarehouseStates(StatesGroup):
    waiting_for_order_id = State()
    waiting_for_confirmation = State()

@router.message(Command("stock"))
async def cmd_stock(message: Message, state: FSMContext):
    # –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
    
    db = next(get_db())
    try:
        state_data = await state.get_data()
        is_admin_context = state_data.get("is_admin_context", False)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        user_role = user.role if user else UserRole.NONE
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º
        films = db.query(Film).all()
        joints = db.query(Joint).all()
        glue = db.query(Glue).first()
        panels = db.query(Panel).all()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞–Ω–µ–ª–∏ –≤–º–µ—Å—Ç–æ –æ–¥–Ω–æ–π
        finished_products = db.query(FinishedProduct).join(Film).all()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ –ø–ª–µ–Ω–∫–∞–º
        response = "üìä –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ:\n\n"
        
        response += "üéû –ü–ª–µ–Ω–∫–∏:\n"
        for film in films:
            meters_per_roll = film.meters_per_roll or 50.0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 50 –º–µ—Ç—Ä–æ–≤ –≤ —Ä—É–ª–æ–Ω–µ
            rolls = film.total_remaining / meters_per_roll if meters_per_roll > 0 else 0
            response += (
                f"- {film.code}:\n"
                f"  ‚Ä¢ –†—É–ª–æ–Ω–æ–≤: {rolls:.1f}\n"
                f"  ‚Ä¢ –û–±—â–∞—è –¥–ª–∏–Ω–∞: {film.total_remaining:.2f} –º\n"
                f"  ‚Ä¢ –ú–æ–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–∞–Ω–µ–ª–µ–π: {film.calculate_possible_panels()}\n\n"
            )
        
        response += "üîÑ –°—Ç—ã–∫–∏:\n"
        for joint in joints:
            response += (
                f"- {joint.color} ({joint.type.value}, {joint.thickness} –º–º):\n"
                f"  ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {joint.quantity}\n"
            )
        
        response += "\nüì¶ –ü—É—Å—Ç—ã–µ –ø–∞–Ω–µ–ª–∏:\n"
        if panels:
            for panel in panels:
                response += f"- –¢–æ–ª—â–∏–Ω–∞ {panel.thickness} –º–º: {panel.quantity} —à—Ç.\n"
        else:
            response += "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏\n"
            
        response += "\nüß™ –ö–ª–µ–π:\n"
        if glue:
            response += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {glue.quantity}\n"
        else:
            response += "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏\n"
            
        response += "\n‚úÖ –ì–æ—Ç–æ–≤—ã–µ –ø–∞–Ω–µ–ª–∏:\n"
        if finished_products:
            for product in finished_products:
                response += f"- {product.film.code} (—Ç–æ–ª—â–∏–Ω–∞ {product.thickness} –º–º): {product.quantity} —à—Ç.\n"
        else:
            response += "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏\n"
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_role == UserRole.WAREHOUSE:
            keyboard = get_menu_keyboard(MenuState.WAREHOUSE_MAIN, is_admin_context)
        elif user_role == UserRole.PRODUCTION:
            keyboard = get_menu_keyboard(MenuState.PRODUCTION_MAIN)
        else:
            # –î–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ –∏ –¥—Ä—É–≥–∏—Ö —Ä–æ–ª–µ–π
            keyboard = get_menu_keyboard(MenuState.SUPER_ADMIN_MAIN) if user_role == UserRole.SUPER_ADMIN else None
        
        await message.answer(response, reply_markup=keyboard)
    finally:
        db.close()

@router.message(Command("income_materials"))
async def cmd_income_materials(message: Message, state: FSMContext):
    if not await check_warehouse_access(message):
        return
    
    await state.set_state(MenuState.WAREHOUSE_MATERIALS)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è –æ–ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_MATERIALS)
    )
    await state.set_state(WarehouseStates.waiting_for_order_id)

@router.message(WarehouseStates.waiting_for_order_id)
async def process_order_id(message: Message, state: FSMContext):
    order_id = message.text
    
    if not order_id.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.")
        return
        
    await state.update_data(order_id=int(order_id))
    
    await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–≥—Ä—É–∑–∫—É –∑–∞–∫–∞–∑–∞:")
    await state.set_state(WarehouseStates.waiting_for_confirmation)

@router.message(WarehouseStates.waiting_for_confirmation)
async def process_confirmation(message: Message, state: FSMContext):
    confirmation = message.text.lower()
    
    if confirmation not in ["–¥–∞", "–Ω–µ—Ç"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –¥–∞ –∏–ª–∏ –Ω–µ—Ç.")
        return
        
    data = await state.get_data()
    order_id = data["order_id"]
    
    await process_order_shipment(message, order_id)

@router.message(Command("confirm_order"))
async def cmd_confirm_order(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
    if not await check_warehouse_access(message):
        return
        
    await display_active_orders(message)

async def display_active_orders(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–≥—Ä—É–∑–∫–∏"""
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º NEW
        orders = db.query(Order).filter(Order.status == OrderStatus.NEW).all()
        
        if not orders:
            await message.answer(
                "üì¶ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç–≥—Ä—É–∑–∫–∏.",
                reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_MAIN)
            )
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤
        response = "üì¶ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –æ—Ç–≥—Ä—É–∑–∫–∏:\n\n"
        
        for order in orders:
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            manager = db.query(User).filter(User.id == order.manager_id).first()
            manager_name = manager.username if manager else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
            products_info = ""
            if hasattr(order, 'products') and order.products:
                products_info = "üé® –ü—Ä–æ–¥—É–∫—Ü–∏—è:\n"
                for product in order.products:
                    try:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
                        product_desc = []
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∞—Ç—Ä–∏–±—É—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç—É–ø–∞
                        color = getattr(product, 'color', "–ù–µ —É–∫–∞–∑–∞–Ω")
                        if color:
                            product_desc.append(f"—Ü–≤–µ—Ç: {color}")
                            
                        thickness = getattr(product, 'thickness', None)
                        if thickness is not None:
                            product_desc.append(f"—Ç–æ–ª—â–∏–Ω–∞: {thickness} –º–º")
                            
                        quantity = getattr(product, 'quantity', None)
                        if quantity is not None:
                            product_desc.append(f"–∫–æ–ª-–≤–æ: {quantity} —à—Ç")
                        
                        if product_desc:
                            products_info += f"  ‚Ä¢ {', '.join(product_desc)}\n"
                        else:
                            products_info += "  ‚Ä¢ –ü—Ä–æ–¥—É–∫—Ü–∏—è (–¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)\n"
                    except Exception as e:
                        logging.error(f"Error displaying product: {str(e)}")
                        products_info += "  ‚Ä¢ –ü—Ä–æ–¥—É–∫—Ü–∏—è (–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö)\n"
            else:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                try:
                    if hasattr(order, 'film_code') and order.film_code:
                        panel_quantity = 0
                        try:
                            if hasattr(order, 'panel_quantity'):
                                panel_quantity = order.panel_quantity
                        except:
                            pass
                        products_info = f"üé® –ü–ª–µ–Ω–∫–∞: {order.film_code}, {panel_quantity} —à—Ç.\n"
                    else:
                        products_info = "üé® –ü—Ä–æ–¥—É–∫—Ü–∏—è: –ù–µ —É–∫–∞–∑–∞–Ω–∞\n"
                except:
                    products_info = "üé® –ü—Ä–æ–¥—É–∫—Ü–∏—è: –ù–µ —É–∫–∞–∑–∞–Ω–∞\n"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—ã–∫–∞—Ö
            joints_info = ""
            if hasattr(order, 'joints') and order.joints:
                joints_info = "üîó –°—Ç—ã–∫–∏:\n"
                for joint in order.joints:
                    try:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—ã–∫–µ
                        joint_desc = []
                        
                        # –¢–∏–ø —Å—Ç—ã–∫–∞
                        joint_type_text = "–ù–µ —É–∫–∞–∑–∞–Ω"
                        if hasattr(joint, 'joint_type'):
                            try:
                                if joint.joint_type == JointType.BUTTERFLY:
                                    joint_type_text = "–ë–∞–±–æ—á–∫–∞"
                                elif joint.joint_type == JointType.SIMPLE:
                                    joint_type_text = "–ü—Ä–æ—Å—Ç—ã–µ"
                                elif joint.joint_type == JointType.CLOSING:
                                    joint_type_text = "–ó–∞–º—ã–∫–∞—é—â–∏–µ"
                                else:
                                    joint_type_text = str(joint.joint_type)
                                joint_desc.append(joint_type_text)
                            except Exception as e:
                                logging.error(f"Error processing joint type: {str(e)}")
                                joint_desc.append("—Ç–∏–ø: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å")
                        
                        # –¶–≤–µ—Ç —Å—Ç—ã–∫–∞
                        joint_color = getattr(joint, 'joint_color', None)
                        if joint_color:
                            joint_desc.append(f"—Ü–≤–µ—Ç: {joint_color}")
                            
                        # –¢–æ–ª—â–∏–Ω–∞ —Å—Ç—ã–∫–∞
                        thickness = getattr(joint, 'joint_thickness', None)
                        if thickness is not None:
                            joint_desc.append(f"—Ç–æ–ª—â–∏–Ω–∞: {thickness} –º–º")
                            
                        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—ã–∫–æ–≤
                        quantity = getattr(joint, 'quantity', None)
                        if quantity is None:
                            quantity = getattr(joint, 'joint_quantity', 0)
                        if quantity:
                            joint_desc.append(f"–∫–æ–ª-–≤–æ: {quantity} —à—Ç")
                        
                        if joint_desc:
                            joints_info += f"  ‚Ä¢ {', '.join(joint_desc)}\n"
                        else:
                            joints_info += "  ‚Ä¢ –°—Ç—ã–∫ (–¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã)\n"
                    except Exception as e:
                        logging.error(f"Error displaying joint: {str(e)}")
                        joints_info += "  ‚Ä¢ –°—Ç—ã–∫ (–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö)\n"
            else:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                try:
                    if hasattr(order, 'joint_quantity') and order.joint_quantity and order.joint_quantity > 0:
                        joint_type_text = "–ù–µ —É–∫–∞–∑–∞–Ω"
                        try:
                            if hasattr(order, 'joint_type'):
                                if order.joint_type == JointType.BUTTERFLY:
                                    joint_type_text = "–ë–∞–±–æ—á–∫–∞"
                                elif order.joint_type == JointType.SIMPLE:
                                    joint_type_text = "–ü—Ä–æ—Å—Ç—ã–µ"
                                elif order.joint_type == JointType.CLOSING:
                                    joint_type_text = "–ó–∞–º—ã–∫–∞—é—â–∏–µ"
                        except:
                            pass
                            
                        joint_color = "–ù–µ —É–∫–∞–∑–∞–Ω"
                        try:
                            if hasattr(order, 'joint_color'):
                                joint_color = order.joint_color
                        except:
                            pass
                            
                        joints_info = f"üîó –°—Ç—ã–∫–∏: {joint_type_text}, {joint_color}: {order.joint_quantity} —à—Ç.\n"
                    else:
                        joints_info = "üîó –°—Ç—ã–∫–∏: –ù–µ—Ç\n"
                except:
                    joints_info = "üîó –°—Ç—ã–∫–∏: –ù–µ—Ç\n"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫–ª–µ—è
            glue_quantity = 0
            try:
                if hasattr(order, 'glues') and order.glues:
                    for glue in order.glues:
                        glue_quantity += getattr(glue, 'quantity', 0)
                elif hasattr(order, 'glue_quantity'):
                    glue_quantity = order.glue_quantity
            except Exception as e:
                logging.error(f"Error getting glue quantity: {str(e)}")
                glue_quantity = 0
            
            response += (
                f"üìù –ó–∞–∫–∞–∑ #{order.id}\n"
                f"üìÜ –î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: {manager_name}\n"
                f"{products_info}"
                f"{joints_info}"
                f"üß¥ –ö–ª–µ–π: {glue_quantity} —à—Ç.\n"
                f"üîß –ú–æ–Ω—Ç–∞–∂: {'–¢—Ä–µ–±—É–µ—Ç—Å—è' if order.installation_required else '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.customer_phone}\n"
                f"üöö –ê–¥—Ä–µ—Å: {order.delivery_address}\n"
                f"-----\n"
                f"‚úÖ –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞ #{order.id} –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n/confirm_{order.id}\n\n"
            )
        
        await message.answer(
            response,
            reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_ORDERS)
        )
    finally:
        db.close()

@router.message(F.text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def handle_orders(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ú–æ–∏ –∑–∞–∫–∞–∑—ã'"""
    if not await check_warehouse_access(message):
        return
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    await display_active_orders(message)

@router.message(F.text == "üì¶ –û—Å—Ç–∞—Ç–∫–∏")
async def handle_stock(message: Message, state: FSMContext):
    await state.set_state(MenuState.WAREHOUSE_STOCK)
    await cmd_stock(message, state)

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    if not await check_warehouse_access(message):
        return
    
    await state.set_state(MenuState.WAREHOUSE_MAIN)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_MAIN)
    )

@router.message(F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def handle_back(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'"""
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
            return
        
        next_menu, keyboard = await go_back(state, user.role)
        await state.set_state(next_menu)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
    finally:
        db.close()

@router.message(lambda message: message.text and message.text.startswith("/confirm_"))
async def confirm_specific_order(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    if not await check_warehouse_access(message):
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã /confirm_123
        order_id = int(message.text.split("_")[1])
        await process_order_shipment(message, order_id)
    except (IndexError, ValueError):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /confirm_ID, –≥–¥–µ ID - –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.",
            reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_ORDERS)
        )

async def process_order_shipment(message: Message, order_id: int):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≥—Ä—É–∑–∫—É –∑–∞–∫–∞–∑–∞"""
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –ø–æ ID
        order = db.query(Order).filter(Order.id == order_id).first()
        if not order:
            await message.answer(
                f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_MAIN)
            )
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        if order.status == OrderStatus.COMPLETED:
            await message.answer(
                f"‚ùå –ó–∞–∫–∞–∑ #{order_id} —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.",
                reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_MAIN)
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–∫–ª–∞–¥–∞
        warehouse_user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not warehouse_user:
            await message.answer(
                "‚ùå –í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_MAIN)
            )
            return
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è CompletedOrder —Å —É—á–µ—Ç–æ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            completed_order_data = {
                'order_id': order.id,
                'manager_id': order.manager_id,
                'warehouse_user_id': warehouse_user.id,
                'installation_required': getattr(order, 'installation_required', False),
                'customer_phone': getattr(order, 'customer_phone', "") or "–ù–µ —É–∫–∞–∑–∞–Ω",
                'delivery_address': getattr(order, 'delivery_address', "") or "–ù–µ —É–∫–∞–∑–∞–Ω"
            }
            
            # –û–±—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ–ª—è CompletedOrder –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            valid_fields = {}
            for column in CompletedOrder.__table__.columns:
                valid_fields[column.name] = True
            
            # –£–¥–∞–ª—è–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ –æ—à–∏–±–∫–µ
            for field in list(completed_order_data.keys()):
                if field not in valid_fields:
                    logging.warning(f"–£–¥–∞–ª—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –ø–æ–ª–µ {field} –∏–∑ –¥–∞–Ω–Ω—ã—Ö CompletedOrder")
                    del completed_order_data[field]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤–∫–ª—é—á–µ–Ω—ã
            for column in CompletedOrder.__table__.columns:
                if not column.nullable and column.name not in ['id', 'completed_at'] and column.name not in completed_order_data and not column.default:
                    if column.name == 'customer_phone':
                        completed_order_data[column.name] = "–ù–µ —É–∫–∞–∑–∞–Ω"
                    elif column.name == 'delivery_address':
                        completed_order_data[column.name] = "–ù–µ —É–∫–∞–∑–∞–Ω"
                    else:
                        logging.warning(f"–î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è {column.name}")
                        completed_order_data[column.name] = None
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ
            logging.info(f"–°–æ–∑–¥–∞–µ–º CompletedOrder —Å –¥–∞–Ω–Ω—ã–º–∏: {completed_order_data}")
            completed_order = CompletedOrder(**completed_order_data)
            db.add(completed_order)
            db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
            if hasattr(order, 'products') and order.products:
                for product in order.products:
                    try:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è CompletedOrderItem
                        item_data = {
                            'completed_order_id': completed_order.id,
                            'quantity': getattr(product, 'quantity', 0),
                            'color': getattr(product, 'color', "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                            'thickness': getattr(product, 'thickness', 0.5)
                        }
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ film_id –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                        film_id = getattr(product, 'film_id', None)
                        if film_id is not None and hasattr(CompletedOrderItem, 'film_id'):
                            item_data['film_id'] = film_id
                        
                        if item_data['quantity'] > 0:
                            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ
                            completed_item = CompletedOrderItem(**item_data)
                            db.add(completed_item)
                            
                            # –°–ø–∏—Å—ã–≤–∞–µ–º —Å–æ —Å–∫–ª–∞–¥–∞
                            if film_id is not None:
                                finished_product = db.query(FinishedProduct).filter(
                                    FinishedProduct.film_id == film_id,
                                    FinishedProduct.thickness == item_data['thickness']
                                ).first()
                                
                                if finished_product:
                                    finished_product.quantity -= item_data['quantity']
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑: {str(e)}")
            else:
                # –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                try:
                    if hasattr(order, 'film_code') and order.film_code:
                        # –ù–∞—Ö–æ–¥–∏–º –ø–ª–µ–Ω–∫—É –ø–æ –∫–æ–¥—É
                        film = db.query(Film).filter(Film.code == order.film_code).first()
                        
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ
                        item_data = {
                            'completed_order_id': completed_order.id,
                            'color': order.film_code,
                            'thickness': getattr(order, 'panel_thickness', 0.5),
                            'quantity': getattr(order, 'panel_quantity', 0)
                        }
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º film_id, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                        if film and hasattr(CompletedOrderItem, 'film_id'):
                            item_data['film_id'] = film.id
                            
                        completed_item = CompletedOrderItem(**item_data)
                        db.add(completed_item)
                        
                        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å–æ —Å–∫–ª–∞–¥–∞
                        if film:
                            finished_product = db.query(FinishedProduct).filter(
                                FinishedProduct.film_id == film.id,
                                FinishedProduct.thickness == item_data['thickness']
                            ).first()
                            
                            if finished_product:
                                finished_product.quantity -= item_data['quantity']
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {str(e)}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—ã–∫–∞—Ö –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
            joint_type = None
            joint_color = None
            joint_quantity = 0
            
            if hasattr(order, 'joints') and order.joints:
                for joint_item in order.joints:
                    try:
                        joint_type = getattr(joint_item, 'joint_type', None)
                        joint_color = getattr(joint_item, 'joint_color', None)
                        thickness = getattr(joint_item, 'joint_thickness', 0.5)
                        quantity = getattr(joint_item, 'quantity', getattr(joint_item, 'joint_quantity', 0))
                        
                        if joint_type and joint_color and quantity > 0:
                            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–º —Å—Ç—ã–∫–µ
                            completed_joint = CompletedOrderJoint(
                                completed_order_id=completed_order.id,
                                joint_type=joint_type,
                                joint_color=joint_color,
                                quantity=quantity,
                                thickness=thickness
                            )
                            db.add(completed_joint)
                            
                            # –°–ø–∏—Å—ã–≤–∞–µ–º —Å–æ —Å–∫–ª–∞–¥–∞
                            joint_db = db.query(Joint).filter(
                                Joint.type == joint_type,
                                Joint.color == joint_color,
                                Joint.thickness == thickness
                            ).first()
                            
                            if joint_db:
                                joint_db.quantity -= quantity
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—ã–∫–∞ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑: {str(e)}")
            else:
                # –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—ã–∫–µ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                    joint_type = getattr(order, 'joint_type', None)
                    joint_color = getattr(order, 'joint_color', None)
                    joint_quantity = getattr(order, 'joint_quantity', 0)
                    
                    if joint_type and joint_color and joint_quantity > 0:
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–º —Å—Ç—ã–∫–µ
                        completed_joint = CompletedOrderJoint(
                            completed_order_id=completed_order.id,
                            joint_type=joint_type,
                            joint_color=joint_color,
                            quantity=joint_quantity,
                            thickness=getattr(order, 'panel_thickness', 0.5)
                        )
                        db.add(completed_joint)
                        
                        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å–æ —Å–∫–ª–∞–¥–∞
                        joint_db = db.query(Joint).filter(
                            Joint.type == joint_type,
                            Joint.color == joint_color,
                            Joint.thickness == getattr(order, 'panel_thickness', 0.5)
                        ).first()
                        
                        if joint_db:
                            joint_db.quantity -= joint_quantity
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—ã–∫–∞ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {str(e)}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–µ–µ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
            glue_quantity = 0
            if hasattr(order, 'glues') and order.glues:
                try:
                    glue_quantity = sum(getattr(glue, 'quantity', 0) for glue in order.glues)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–µ–µ: {str(e)}")
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç glues, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∑–∞–∫–∞–∑–∞ (—Å—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
                glue_quantity = getattr(order, 'glue_quantity', 0)
                
            if glue_quantity > 0:
                try:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–º –∫–ª–µ–µ
                    completed_glue = CompletedOrderGlue(
                        completed_order_id=completed_order.id,
                        quantity=glue_quantity
                    )
                    db.add(completed_glue)
                    
                    # –°–ø–∏—Å—ã–≤–∞–µ–º –∫–ª–µ–π —Å–æ —Å–∫–ª–∞–¥–∞
                    glue = db.query(Glue).first()
                    if glue:
                        glue.quantity -= glue_quantity
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª–µ—è –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑: {str(e)}")
            
            # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π
            order.status = OrderStatus.COMPLETED
            order.completed_at = datetime.utcnow()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db.commit()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
            manager = db.query(User).filter(User.id == order.manager_id).first()
            if manager and manager.telegram_id:
                try:
                    await message.bot.send_message(
                        manager.telegram_id,
                        f"‚úÖ –ó–∞–∫–∞–∑ #{order.id} –≤—ã–ø–æ–ª–Ω–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É."
                    )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É: {str(e)}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–∫–ª–∞–¥—É
            await message.answer(
                f"‚úÖ –ó–∞–∫–∞–∑ #{order.id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π.",
                reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_MAIN)
            )
        
        except Exception as e:
            db.rollback()
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ CompletedOrder: {str(e)}")
            await message.answer(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {str(e)}",
                reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_MAIN)
            )
            return
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ—Ç–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞ #{order_id}: {str(e)}")
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {str(e)}",
            reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_MAIN)
        )
    finally:
        db.close()

@router.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É")
async def handle_back_to_admin(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞"""
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user or user.role != UserRole.SUPER_ADMIN:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–¥–º–∏–Ω–∞
        await state.update_data(is_admin_context=False)
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
        await state.set_state(MenuState.SUPER_ADMIN_MAIN)
        await message.answer(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=get_menu_keyboard(MenuState.SUPER_ADMIN_MAIN)
        )
    finally:
        db.close()

async def check_warehouse_access(message: Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∞ –¥–ª—è —Ä–æ–ª–∏ —Å–∫–ª–∞–¥–∞"""
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        
        if not user or user.role not in [UserRole.WAREHOUSE, UserRole.SUPER_ADMIN]:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return False
        return True
    finally:
        db.close() 