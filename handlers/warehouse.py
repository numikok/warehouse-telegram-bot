from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from models import User, UserRole, Film, Panel, Joint, Glue, Operation, FinishedProduct, Order, CompletedOrder, OrderStatus, JointType
from database import get_db
import json
import logging
from navigation import MenuState, get_menu_keyboard, go_back

router = Router()

def get_main_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–∫–ª–∞–¥–æ–≤—â–∏–∫–∞"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ")],
            [KeyboardButton(text="üì• –û–ø—Ä–∏—Ö–æ–¥–æ–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã")],
            [KeyboardButton(text="üì¶ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–≥—Ä—É–∑–∫—É")],
            [KeyboardButton(text="üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã")]
        ],
        resize_keyboard=True
    )

class WarehouseStates(StatesGroup):
    waiting_for_order_id = State()
    waiting_for_confirmation = State()

@router.message(Command("stock"))
async def cmd_stock(message: Message, state: FSMContext):
    # –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
    
    db = next(get_db())
    try:
        state_data = await state.get_data()
        is_admin_context = state_data.get("is_admin_context", False)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        user_role = user.role if user else UserRole.NONE
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º
        films = db.query(Film).all()
        joints = db.query(Joint).all()
        glue = db.query(Glue).first()
        panels = db.query(Panel).all()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞–Ω–µ–ª–∏ –≤–º–µ—Å—Ç–æ –æ–¥–Ω–æ–π
        finished_products = db.query(FinishedProduct).join(Film).all()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ –ø–ª–µ–Ω–∫–∞–º
        response = "üìä –û—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ:\n\n"
        
        response += "üéû –ü–ª–µ–Ω–∫–∏:\n"
        for film in films:
            meters_per_roll = film.meters_per_roll or 50.0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 50 –º–µ—Ç—Ä–æ–≤ –≤ —Ä—É–ª–æ–Ω–µ
            rolls = film.total_remaining / meters_per_roll if meters_per_roll > 0 else 0
            response += (
                f"- {film.code}:\n"
                f"  ‚Ä¢ –†—É–ª–æ–Ω–æ–≤: {rolls:.1f}\n"
                f"  ‚Ä¢ –û–±—â–∞—è –¥–ª–∏–Ω–∞: {film.total_remaining:.2f} –º\n"
                f"  ‚Ä¢ –ú–æ–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–∞–Ω–µ–ª–µ–π: {film.calculate_possible_panels()}\n\n"
            )
        
        response += "üîÑ –°—Ç—ã–∫–∏:\n"
        for joint in joints:
            response += (
                f"- {joint.color} ({joint.type.value}, {joint.thickness} –º–º):\n"
                f"  ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {joint.quantity}\n"
            )
        
        response += "\nüì¶ –ü—É—Å—Ç—ã–µ –ø–∞–Ω–µ–ª–∏:\n"
        if panels:
            for panel in panels:
                response += f"- –¢–æ–ª—â–∏–Ω–∞ {panel.thickness} –º–º: {panel.quantity} —à—Ç.\n"
        else:
            response += "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏\n"
            
        response += "\nüß™ –ö–ª–µ–π:\n"
        if glue:
            response += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {glue.quantity}\n"
        else:
            response += "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏\n"
            
        response += "\n‚úÖ –ì–æ—Ç–æ–≤—ã–µ –ø–∞–Ω–µ–ª–∏:\n"
        if finished_products:
            for product in finished_products:
                response += f"- {product.film.code} (—Ç–æ–ª—â–∏–Ω–∞ {product.thickness} –º–º): {product.quantity} —à—Ç.\n"
        else:
            response += "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏\n"
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_role == UserRole.WAREHOUSE:
            keyboard = get_menu_keyboard(MenuState.WAREHOUSE_MAIN, is_admin_context)
        elif user_role == UserRole.PRODUCTION:
            keyboard = get_menu_keyboard(MenuState.PRODUCTION_MAIN)
        else:
            # –î–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ –∏ –¥—Ä—É–≥–∏—Ö —Ä–æ–ª–µ–π
            keyboard = get_menu_keyboard(MenuState.SUPER_ADMIN_MAIN) if user_role == UserRole.SUPER_ADMIN else None
        
        await message.answer(response, reply_markup=keyboard)
    finally:
        db.close()

@router.message(Command("income_materials"))
async def cmd_income_materials(message: Message, state: FSMContext):
    if not await check_warehouse_access(message):
        return
    
    await state.set_state(MenuState.WAREHOUSE_MATERIALS)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è –æ–ø—Ä–∏—Ö–æ–¥–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_MATERIALS)
    )
    await state.set_state(WarehouseStates.waiting_for_order_id)

@router.message(WarehouseStates.waiting_for_order_id)
async def process_order_id(message: Message, state: FSMContext):
    order_id = message.text
    
    if not order_id.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.")
        return
        
    await state.update_data(order_id=int(order_id))
    
    await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–≥—Ä—É–∑–∫—É –∑–∞–∫–∞–∑–∞:")
    await state.set_state(WarehouseStates.waiting_for_confirmation)

@router.message(WarehouseStates.waiting_for_confirmation)
async def process_confirmation(message: Message, state: FSMContext):
    confirmation = message.text.lower()
    
    if confirmation not in ["–¥–∞", "–Ω–µ—Ç"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –¥–∞ –∏–ª–∏ –Ω–µ—Ç.")
        return
        
    data = await state.get_data()
    order_id = data["order_id"]
    
    await process_order_shipment(message, order_id)

@router.message(Command("confirm_order"))
async def cmd_confirm_order(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
    if not await check_warehouse_access(message):
        return
        
    await display_active_orders(message)

async def display_active_orders(message: Message):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–≥—Ä—É–∑–∫–∏"""
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º NEW
        orders = db.query(Order).filter(Order.status == OrderStatus.NEW).all()
        
        if not orders:
            await message.answer(
                "üì¶ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç–≥—Ä—É–∑–∫–∏.",
                reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_MAIN)
            )
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤
        response = "üì¶ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –æ—Ç–≥—Ä—É–∑–∫–∏:\n\n"
        
        for order in orders:
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            manager = db.query(User).filter(User.id == order.manager_id).first()
            manager_name = manager.username if manager else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
            products_info = ""
            if order.products:
                products_info = "üé® –ü—Ä–æ–¥—É–∫—Ü–∏—è:\n"
                for product in order.products:
                    film = db.query(Film).filter(Film.id == product.film_id).first()
                    film_code = film.code if film else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                    products_info += f"  ‚Ä¢ {film_code}, —Ç–æ–ª—â–∏–Ω–∞ {product.thickness} –º–º: {product.quantity} —à—Ç.\n"
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                products_info = f"üé® –ü–ª–µ–Ω–∫–∞: {order.film_code}, {order.panel_quantity} —à—Ç.\n"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—ã–∫–∞—Ö
            joints_info = ""
            if order.joints:
                joints_info = "üîó –°—Ç—ã–∫–∏:\n"
                for joint in order.joints:
                    joint_type_text = ""
                    if joint.joint_type == JointType.BUTTERFLY:
                        joint_type_text = "–ë–∞–±–æ—á–∫–∞"
                    elif joint.joint_type == JointType.SIMPLE:
                        joint_type_text = "–ü—Ä–æ—Å—Ç—ã–µ"
                    elif joint.joint_type == JointType.CLOSING:
                        joint_type_text = "–ó–∞–º—ã–∫–∞—é—â–∏–µ"
                    joints_info += f"  ‚Ä¢ {joint_type_text}, {joint.joint_color}: {joint.quantity} —à—Ç.\n"
            elif order.joint_quantity > 0:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                joint_type_text = ""
                if order.joint_type == JointType.BUTTERFLY:
                    joint_type_text = "–ë–∞–±–æ—á–∫–∞"
                elif order.joint_type == JointType.SIMPLE:
                    joint_type_text = "–ü—Ä–æ—Å—Ç—ã–µ"
                elif order.joint_type == JointType.CLOSING:
                    joint_type_text = "–ó–∞–º—ã–∫–∞—é—â–∏–µ"
                joints_info = f"üîó –°—Ç—ã–∫–∏: {joint_type_text}, {order.joint_color}: {order.joint_quantity} —à—Ç.\n"
            else:
                joints_info = "üîó –°—Ç—ã–∫–∏: –ù–µ—Ç\n"
            
            response += (
                f"üìù –ó–∞–∫–∞–∑ #{order.id}\n"
                f"üìÜ –î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: {manager_name}\n"
                f"{products_info}"
                f"{joints_info}"
                f"üß¥ –ö–ª–µ–π: {order.glue_quantity} —à—Ç.\n"
                f"üîß –ú–æ–Ω—Ç–∞–∂: {'–¢—Ä–µ–±—É–µ—Ç—Å—è' if order.installation_required else '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.customer_phone}\n"
                f"üöö –ê–¥—Ä–µ—Å: {order.delivery_address}\n"
                f"-----\n"
                f"‚úÖ –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞ #{order.id} –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n/confirm_{order.id}\n\n"
            )
        
        await message.answer(
            response,
            reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_ORDERS)
        )
    finally:
        db.close()

@router.message(F.text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def handle_orders(message: Message, state: FSMContext):
    if not await check_warehouse_access(message):
        return
        
    db = next(get_db())
    try:
        state_data = await state.get_data()
        is_admin_context = state_data.get("is_admin_context", False)
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "pending" –∏–ª–∏ "in_progress"
        orders = db.query(Order).filter(
            Order.status.in_([OrderStatus.NEW, OrderStatus.IN_PROGRESS])
        ).order_by(Order.created_at.desc()).all()
        
        if not orders:
            await message.answer(
                "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.",
                reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_ORDERS, is_admin_context)
            )
            return
            
        response = "üì¶ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n\n"
        
        for order in orders:
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞, —Å–æ–∑–¥–∞–≤—à–µ–≥–æ –∑–∞–∫–∞–∑
            manager = db.query(User).filter(User.id == order.manager_id).first()
            manager_name = manager.username if manager else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
            products_info = ""
            if order.products:
                products_info = "- –ü—Ä–æ–¥—É–∫—Ü–∏—è:\n"
                for product in order.products:
                    film = db.query(Film).filter(Film.id == product.film_id).first()
                    film_code = film.code if film else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                    products_info += f"  ‚Ä¢ {film_code}, —Ç–æ–ª—â–∏–Ω–∞ {product.thickness} –º–º: {product.quantity} —à—Ç.\n"
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                products_info = f"- –ö–æ–¥ –ø–ª–µ–Ω–∫–∏: {order.film_code}\n- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π: {order.panel_quantity} —à—Ç.\n"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—ã–∫–∞—Ö
            joints_info = ""
            if order.joints:
                joints_info = "- –°—Ç—ã–∫–∏:\n"
                for joint in order.joints:
                    joint_type_text = ""
                    if joint.joint_type == JointType.BUTTERFLY:
                        joint_type_text = "–ë–∞–±–æ—á–∫–∞"
                    elif joint.joint_type == JointType.SIMPLE:
                        joint_type_text = "–ü—Ä–æ—Å—Ç—ã–µ"
                    elif joint.joint_type == JointType.CLOSING:
                        joint_type_text = "–ó–∞–º—ã–∫–∞—é—â–∏–µ"
                    joints_info += f"  ‚Ä¢ {joint_type_text}, {joint.joint_color}: {joint.quantity} —à—Ç.\n"
            elif order.joint_quantity > 0:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                joint_type_text = ""
                if order.joint_type == JointType.BUTTERFLY:
                    joint_type_text = "–ë–∞–±–æ—á–∫–∞"
                elif order.joint_type == JointType.SIMPLE:
                    joint_type_text = "–ü—Ä–æ—Å—Ç—ã–µ"
                elif order.joint_type == JointType.CLOSING:
                    joint_type_text = "–ó–∞–º—ã–∫–∞—é—â–∏–µ"
                joints_info = f"- –°—Ç—ã–∫–∏: {joint_type_text}, {order.joint_color}: {order.joint_quantity} —à—Ç.\n"
            else:
                joints_info = "- –°—Ç—ã–∫–∏: –ù–µ—Ç\n"
            
            response += (
                f"üìù –ó–∞–∫–∞–∑ #{order.id}\n"
                f"{products_info}"
                f"{joints_info}"
                f"- –ö–ª–µ–π: {order.glue_quantity} —à—Ç.\n"
                f"- –ú–æ–Ω—Ç–∞–∂: {'–¢—Ä–µ–±—É–µ—Ç—Å—è' if order.installation_required else '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}\n"
                f"- –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞: {order.customer_phone}\n"
                f"- –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order.delivery_address}\n"
                f"- –°—Ç–∞—Ç—É—Å: {order.status.value}\n"
                f"- –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"- –ú–µ–Ω–µ–¥–∂–µ—Ä: {manager_name}\n\n"
            )
        
        await message.answer(
            response,
            reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_ORDERS, is_admin_context)
        )
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–≥—Ä—É–∑–∫–∏
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é:",
            reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_ORDERS, is_admin_context)
        )
        await state.set_state(WarehouseStates.waiting_for_order_id)
    finally:
        db.close()

@router.message(F.text == "üì¶ –û—Å—Ç–∞—Ç–∫–∏")
async def handle_stock(message: Message, state: FSMContext):
    await state.set_state(MenuState.WAREHOUSE_STOCK)
    await cmd_stock(message, state)

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    if not await check_warehouse_access(message):
        return
    
    await state.set_state(MenuState.WAREHOUSE_MAIN)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_MAIN)
    )

@router.message(F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def handle_back(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥'"""
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
            return
        
        next_menu, keyboard = await go_back(state, user.role)
        await state.set_state(next_menu)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
    finally:
        db.close()

@router.message(lambda message: message.text and message.text.startswith("/confirm_"))
async def confirm_specific_order(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    if not await check_warehouse_access(message):
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã /confirm_123
        order_id = int(message.text.split("_")[1])
        await process_order_shipment(message, order_id)
    except (IndexError, ValueError):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /confirm_ID, –≥–¥–µ ID - –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.",
            reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_ORDERS)
        )

async def process_order_shipment(message: Message, order_id: int):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞"""
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        order = db.query(Order).filter(
            Order.id == order_id,
            Order.status == OrderStatus.NEW
        ).first()
        
        if not order:
            await message.answer(
                f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.",
                reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_ORDERS)
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        missing_materials = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã (–Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ –æ—Ç–Ω–æ—à–µ–Ω–∏—è)
        if order.products:
            for product in order.products:
                if product.is_finished:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏
                    finished_product = db.query(FinishedProduct).filter(
                        FinishedProduct.film_id == product.film_id,
                        FinishedProduct.thickness == product.thickness
                    ).first()
                    
                    film = db.query(Film).filter(Film.id == product.film_id).first()
                    film_code = film.code if film else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                    
                    if not finished_product or finished_product.quantity < product.quantity:
                        available = finished_product.quantity if finished_product else 0
                        missing_materials.append(f"–ü—Ä–æ–¥—É–∫—Ü–∏—è {film_code} (—Ç–æ–ª—â–∏–Ω–∞ {product.thickness} –º–º): —Ç—Ä–µ–±—É–µ—Ç—Å—è {product.quantity} —à—Ç., –¥–æ—Å—Ç—É–ø–Ω–æ {available} —à—Ç.")
        else:
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Å–ø–æ—Å–æ–±–∞
            finished_product = db.query(FinishedProduct).join(Film).filter(
                Film.code == order.film_code,
                FinishedProduct.thickness == order.panel_thickness
            ).first()
            
            if not finished_product or finished_product.quantity < order.panel_quantity:
                available = finished_product.quantity if finished_product else 0
                missing_materials.append(f"–ü–ª–µ–Ω–∫–∞ {order.film_code}: —Ç—Ä–µ–±—É–µ—Ç—Å—è {order.panel_quantity} —à—Ç., –¥–æ—Å—Ç—É–ø–Ω–æ {available} —à—Ç.")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—ã–∫–∏ (–Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ –æ—Ç–Ω–æ—à–µ–Ω–∏—è)
        if order.joints:
            for order_joint in order.joints:
                joint = db.query(Joint).filter(
                    Joint.type == order_joint.joint_type,
                    Joint.color == order_joint.joint_color,
                    Joint.thickness == order.panel_thickness  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—â–∏–Ω—É –∏–∑ –∑–∞–∫–∞–∑–∞
                ).first()
                
                if not joint or joint.quantity < order_joint.quantity:
                    available = joint.quantity if joint else 0
                    joint_type_text = ""
                    if order_joint.joint_type == JointType.BUTTERFLY:
                        joint_type_text = "–ë–∞–±–æ—á–∫–∞"
                    elif order_joint.joint_type == JointType.SIMPLE:
                        joint_type_text = "–ü—Ä–æ—Å—Ç—ã–µ"
                    elif order_joint.joint_type == JointType.CLOSING:
                        joint_type_text = "–ó–∞–º—ã–∫–∞—é—â–∏–µ"
                    missing_materials.append(f"–°—Ç—ã–∫–∏ {joint_type_text}, {order_joint.joint_color}: —Ç—Ä–µ–±—É–µ—Ç—Å—è {order_joint.quantity} —à—Ç., –¥–æ—Å—Ç—É–ø–Ω–æ {available} —à—Ç.")
        elif order.joint_quantity > 0:
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Å–ø–æ—Å–æ–±–∞
            joint = db.query(Joint).filter(
                Joint.type == order.joint_type,
                Joint.color == order.joint_color,
                Joint.thickness == order.panel_thickness
            ).first()
            
            if not joint or joint.quantity < order.joint_quantity:
                available = joint.quantity if joint else 0
                missing_materials.append(f"–°—Ç—ã–∫–∏ {order.joint_color}: —Ç—Ä–µ–±—É–µ—Ç—Å—è {order.joint_quantity} —à—Ç., –¥–æ—Å—Ç—É–ø–Ω–æ {available} —à—Ç.")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–µ–π
        if order.glue_quantity > 0:
            glue = db.query(Glue).first()
            
            if not glue or glue.quantity < order.glue_quantity:
                available = glue.quantity if glue else 0
                missing_materials.append(f"–ö–ª–µ–π: —Ç—Ä–µ–±—É–µ—Ç—Å—è {order.glue_quantity} —à—Ç., –¥–æ—Å—Ç—É–ø–Ω–æ {available} —à—Ç.")
        
        # –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        if missing_materials:
            await message.answer(
                f"‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ #{order_id}:\n\n" + "\n".join(missing_materials),
                reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_ORDERS)
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-—Å–∫–ª–∞–¥–æ–≤—â–∏–∫–∞
        warehouse_user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        if order.products:
            for product in order.products:
                if product.is_finished:
                    finished_product = db.query(FinishedProduct).filter(
                        FinishedProduct.film_id == product.film_id,
                        FinishedProduct.thickness == product.thickness
                    ).first()
                    
                    if finished_product:
                        finished_product.quantity -= product.quantity
        else:
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            finished_product = db.query(FinishedProduct).join(Film).filter(
                Film.code == order.film_code,
                FinishedProduct.thickness == order.panel_thickness
            ).first()
            
            if finished_product:
                finished_product.quantity -= order.panel_quantity
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç—ã–∫–∏
        if order.joints:
            for order_joint in order.joints:
                joint = db.query(Joint).filter(
                    Joint.type == order_joint.joint_type,
                    Joint.color == order_joint.joint_color,
                    Joint.thickness == order.panel_thickness
                ).first()
                
                if joint:
                    joint.quantity -= order_joint.quantity
        elif order.joint_quantity > 0:
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            joint = db.query(Joint).filter(
                Joint.type == order.joint_type,
                Joint.color == order.joint_color,
                Joint.thickness == order.panel_thickness
            ).first()
            
            if joint:
                joint.quantity -= order.joint_quantity
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º –∫–ª–µ–π
        if order.glue_quantity > 0:
            glue = db.query(Glue).first()
            if glue:
                glue.quantity -= order.glue_quantity
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ
        completed_order = CompletedOrder(
            order_id=order.id,
            manager_id=order.manager_id,
            warehouse_user_id=warehouse_user.id,
            film_code=order.film_code,
            panel_quantity=order.panel_quantity,
            panel_thickness=order.panel_thickness,
            joint_type=order.joint_type,
            joint_color=order.joint_color,
            joint_quantity=order.joint_quantity,
            glue_quantity=order.glue_quantity,
            installation_required=order.installation_required,
            customer_phone=order.customer_phone,
            delivery_address=order.delivery_address
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –∑–∞–∫–∞–∑–∞ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
        if order.products:
            for product in order.products:
                film = db.query(Film).filter(Film.id == product.film_id).first()
                if film:
                    completed_order_film = CompletedOrderFilm(
                        order_id=completed_order.id,
                        film_code=film.code,
                        quantity=product.quantity
                    )
                    db.add(completed_order_film)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å—Ç—ã–∫–∏ –∏–∑ –∑–∞–∫–∞–∑–∞ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
        if order.joints:
            for order_joint in order.joints:
                completed_order_joint = CompletedOrderJoint(
                    order_id=completed_order.id,
                    joint_type=order_joint.joint_type,
                    joint_color=order_joint.joint_color,
                    quantity=order_joint.quantity
                )
                db.add(completed_order_joint)
        
        # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ COMPLETED
        order.status = OrderStatus.COMPLETED
        order.completed_at = completed_order.completed_at  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.add(completed_order)
        db.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        manager = db.query(User).filter(User.id == order.manager_id).first()
        if manager:
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
                products_info = ""
                if order.products:
                    for product in order.products:
                        film = db.query(Film).filter(Film.id == product.film_id).first()
                        film_code = film.code if film else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                        products_info += f"- {film_code}, —Ç–æ–ª—â–∏–Ω–∞ {product.thickness} –º–º: {product.quantity} —à—Ç.\n"
                else:
                    products_info = f"- {order.film_code}: {order.panel_quantity} —à—Ç.\n"
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—ã–∫–∞—Ö
                joints_info = ""
                if order.joints:
                    for joint in order.joints:
                        joint_type_text = ""
                        if joint.joint_type == JointType.BUTTERFLY:
                            joint_type_text = "–ë–∞–±–æ—á–∫–∞"
                        elif joint.joint_type == JointType.SIMPLE:
                            joint_type_text = "–ü—Ä–æ—Å—Ç—ã–µ"
                        elif joint.joint_type == JointType.CLOSING:
                            joint_type_text = "–ó–∞–º—ã–∫–∞—é—â–∏–µ"
                        joints_info += f"- {joint_type_text}, {joint.joint_color}: {joint.quantity} —à—Ç.\n"
                elif order.joint_quantity > 0:
                    joint_type_text = ""
                    if order.joint_type == JointType.BUTTERFLY:
                        joint_type_text = "–ë–∞–±–æ—á–∫–∞"
                    elif order.joint_type == JointType.SIMPLE:
                        joint_type_text = "–ü—Ä–æ—Å—Ç—ã–µ"
                    elif order.joint_type == JointType.CLOSING:
                        joint_type_text = "–ó–∞–º—ã–∫–∞—é—â–∏–µ"
                    joints_info = f"- {joint_type_text}, {order.joint_color}: {order.joint_quantity} —à—Ç.\n"
                
                await message.bot.send_message(
                    chat_id=manager.telegram_id,
                    text=(
                        f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–≥—Ä—É–∂–µ–Ω!\n\n"
                        f"–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:\n"
                        f"üé® –ü—Ä–æ–¥—É–∫—Ü–∏—è:\n{products_info}"
                        f"üîó –°—Ç—ã–∫–∏:\n{joints_info if joints_info else '–ù–µ—Ç'}\n"
                        f"üß¥ –ö–ª–µ–π: {order.glue_quantity} —à—Ç.\n"
                        f"üîß –ú–æ–Ω—Ç–∞–∂: {'–¢—Ä–µ–±—É–µ—Ç—Å—è' if order.installation_required else '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}\n"
                        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞: {order.customer_phone}\n"
                        f"üöö –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order.delivery_address}"
                    )
                )
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É {manager.telegram_id}: {str(e)}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤—â–∏–∫—É
        await message.answer(
            f"‚úÖ –ó–∞–∫–∞–∑ ‚Ññ{order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–≥—Ä—É–∂–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.",
            reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_MAIN)
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ—Ç–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞ #{order_id}: {str(e)}")
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {str(e)}",
            reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_MAIN)
        )
    finally:
        db.close()

@router.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É")
async def handle_back_to_admin(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞"""
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user or user.role != UserRole.SUPER_ADMIN:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–¥–º–∏–Ω–∞
        await state.update_data(is_admin_context=False)
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
        await state.set_state(MenuState.SUPER_ADMIN_MAIN)
        await message.answer(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=get_menu_keyboard(MenuState.SUPER_ADMIN_MAIN)
        )
    finally:
        db.close()

async def check_warehouse_access(message: Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∞ –¥–ª—è —Ä–æ–ª–∏ —Å–∫–ª–∞–¥–∞"""
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        
        if not user or user.role not in [UserRole.WAREHOUSE, UserRole.SUPER_ADMIN]:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return False
        return True
    finally:
        db.close() 