from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import get_db
from models import User, Film, Joint, JointType, Order, OrderStatus, UserRole, Operation
from sqlalchemy import select
import json

router = Router()

class OrderStates(StatesGroup):
    waiting_for_film_code = State()
    waiting_for_panel_quantity = State()
    waiting_for_joint_type = State()
    waiting_for_joint_color = State()
    waiting_for_joint_quantity = State()
    waiting_for_glue_quantity = State()
    waiting_for_installation = State()
    waiting_for_phone = State()
    waiting_for_address = State()

@router.message(F.text == "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")
async def start_order(message: Message, state: FSMContext):
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–µ–Ω–æ–∫
        films = db.query(Film).all()
        film_codes = [film.code for film in films]
        
        if not film_codes:
            await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–µ–Ω–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–¥–∞–º–∏ –ø–ª–µ–Ω–æ–∫
        keyboard = []
        for code in film_codes:
            keyboard.append([KeyboardButton(text=code)])
        keyboard.append([KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")])
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–¥ –ø–ª–µ–Ω–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
        )
        await state.set_state(OrderStates.waiting_for_film_code)
    finally:
        db.close()

@router.message(OrderStates.waiting_for_film_code)
async def process_film_code(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()  # –ù—É–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
        )
        await state.clear()
        return
        
    db = next(get_db())
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–ª–µ–Ω–∫–∏
        film = db.query(Film).filter(Film.code == message.text).first()
        if not film:
            await message.answer("‚ùå –ü–ª–µ–Ω–∫–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return
            
        await state.update_data(film_code=message.text)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
        await state.set_state(OrderStates.waiting_for_panel_quantity)
    finally:
        db.close()

@router.message(OrderStates.waiting_for_panel_quantity)
async def process_panel_quantity(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await start_order(message, state)
        return
        
    try:
        quantity = int(message.text)
        if quantity <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
            
        await state.update_data(panel_quantity=quantity)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ —Å—Ç—ã–∫–æ–≤
        keyboard = []
        for joint_type in JointType:
            keyboard.append([KeyboardButton(text=f"{joint_type.value.capitalize()}")])
        keyboard.append([KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")])
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç—ã–∫–∞:",
            reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
        )
        await state.set_state(OrderStates.waiting_for_joint_type)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")

@router.message(OrderStates.waiting_for_joint_type)
async def process_joint_type(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        data = await state.get_data()
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π:")
        await state.set_state(OrderStates.waiting_for_panel_quantity)
        return
        
    joint_type = message.text.lower()
    if joint_type not in [jt.value for jt in JointType]:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç—ã–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
        
    await state.update_data(joint_type=joint_type)
    
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ —Å—Ç—ã–∫–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        joints = db.query(Joint).filter(Joint.type == JointType(joint_type)).all()
        joint_colors = [joint.color for joint in joints]
        
        if not joint_colors:
            await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—ã–∫–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞.")
            return
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ü–≤–µ—Ç–∞–º–∏ —Å—Ç—ã–∫–æ–≤
        keyboard = []
        for color in joint_colors:
            keyboard.append([KeyboardButton(text=f"{color} ({joint_type})")])
        keyboard.append([KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")])
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —Å—Ç—ã–∫–∞:",
            reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
        )
        await state.set_state(OrderStates.waiting_for_joint_color)
    finally:
        db.close()

@router.message(OrderStates.waiting_for_joint_color)
async def process_joint_color(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Å—Ç—ã–∫–∞
        keyboard = []
        for joint_type in JointType:
            keyboard.append([KeyboardButton(text=f"{joint_type.value.capitalize()}")])
        keyboard.append([KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")])
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç—ã–∫–∞:",
            reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
        )
        await state.set_state(OrderStates.waiting_for_joint_type)
        return
        
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–≤–µ—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (—É–±–∏—Ä–∞–µ–º —Ç–∏–ø —Å—Ç—ã–∫–∞ –≤ —Å–∫–æ–±–∫–∞—Ö)
    color = message.text.split(" (")[0]
    
    data = await state.get_data()
    joint_type = data.get("joint_type")
    
    db = next(get_db())
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç—ã–∫–∞
        joint = db.query(Joint).filter(
            Joint.type == JointType(joint_type),
            Joint.color == color
        ).first()
        
        if not joint:
            await message.answer("‚ùå –°—Ç—ã–∫ —Å —Ç–∞–∫–∏–º —Ü–≤–µ—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return
            
        await state.update_data(joint_color=color)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—ã–∫–æ–≤:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
        await state.set_state(OrderStates.waiting_for_joint_quantity)
    finally:
        db.close()

@router.message(OrderStates.waiting_for_joint_quantity)
async def process_joint_quantity(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        data = await state.get_data()
        joint_type = data.get("joint_type")
        
        db = next(get_db())
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ —Å—Ç—ã–∫–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
            joints = db.query(Joint).filter(Joint.type == JointType(joint_type)).all()
            joint_colors = [joint.color for joint in joints]
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ü–≤–µ—Ç–∞–º–∏ —Å—Ç—ã–∫–æ–≤
            keyboard = []
            for color in joint_colors:
                keyboard.append([KeyboardButton(text=f"{color} ({joint_type})")])
            keyboard.append([KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")])
            
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —Å—Ç—ã–∫–∞:",
                reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
            )
            await state.set_state(OrderStates.waiting_for_joint_color)
        finally:
            db.close()
        return
        
    try:
        quantity = int(message.text)
        if quantity <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—ã–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
            
        await state.update_data(joint_quantity=quantity)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—è (–≤ —Ç—é–±–∏–∫–∞—Ö):",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
        await state.set_state(OrderStates.waiting_for_glue_quantity)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")

@router.message(OrderStates.waiting_for_glue_quantity)
async def process_glue_quantity(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—ã–∫–æ–≤:")
        await state.set_state(OrderStates.waiting_for_joint_quantity)
        return
        
    try:
        quantity = int(message.text)
        if quantity <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
            
        await state.update_data(glue_quantity=quantity)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–Ω—Ç–∞–∂–∞
        keyboard = [
            [KeyboardButton(text="–î–∞")],
            [KeyboardButton(text="–ù–µ—Ç")],
            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
        ]
        
        await message.answer(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –º–æ–Ω—Ç–∞–∂?",
            reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
        )
        await state.set_state(OrderStates.waiting_for_installation)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")

@router.message(OrderStates.waiting_for_installation)
async def process_installation(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—è (–≤ —Ç—é–±–∏–∫–∞—Ö):")
        await state.set_state(OrderStates.waiting_for_glue_quantity)
        return
        
    if message.text not in ["–î–∞", "–ù–µ—Ç"]:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")
        return
        
    await state.update_data(installation_required=(message.text == "–î–∞"))
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
    )
    await state.set_state(OrderStates.waiting_for_phone)

@router.message(OrderStates.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        keyboard = [
            [KeyboardButton(text="–î–∞")],
            [KeyboardButton(text="–ù–µ—Ç")],
            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
        ]
        await message.answer(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –º–æ–Ω—Ç–∞–∂?",
            reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
        )
        await state.set_state(OrderStates.waiting_for_installation)
        return
        
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.update_data(customer_phone=message.text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
    )
    await state.set_state(OrderStates.waiting_for_address)

@router.message(OrderStates.waiting_for_address)
async def process_address(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:")
        await state.set_state(OrderStates.waiting_for_phone)
        return
        
    await state.update_data(delivery_address=message.text)
    data = await state.get_data()
    
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏
        film = db.query(Film).filter(Film.code == data["film_code"]).first()
        if not film:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ü–ª–µ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
            
        possible_panels = film.calculate_possible_panels()
        if possible_panels < data["panel_quantity"]:
            await message.answer(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ.\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ –ø–∞–Ω–µ–ª–µ–π: {possible_panels}\n"
                f"–¢—Ä–µ–±—É–µ—Ç—Å—è: {data['panel_quantity']}"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
        order = Order(
            manager_id=user.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            film_code=data["film_code"],
            panel_quantity=data["panel_quantity"],
            joint_type=JointType(data["joint_type"]),
            joint_color=data["joint_color"],
            joint_quantity=data["joint_quantity"],
            glue_quantity=data["glue_quantity"],
            installation_required=data["installation_required"],
            customer_phone=data["customer_phone"],
            delivery_address=data["delivery_address"],
            status=OrderStatus.NEW
        )
        
        db.add(order)
        db.commit()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏
        operation = Operation(
            user_id=user.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            operation_type="order",
            quantity=data["panel_quantity"],
            details=json.dumps({
                "order_id": order.id,  # –î–æ–±–∞–≤–ª—è–µ–º ID –∑–∞–∫–∞–∑–∞ –≤ –¥–µ—Ç–∞–ª–∏
                "film_code": data["film_code"],
                "panel_quantity": data["panel_quantity"],
                "joint_color": data["joint_color"],
                "joint_quantity": data["joint_quantity"],
                "glue_quantity": data["glue_quantity"],
                "installation": data["installation_required"],
                "phone": data["customer_phone"],
                "address": data["delivery_address"],
                "status": "new"
            }, ensure_ascii=False)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ensure_ascii=False –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Ä—É—Å—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
        )
        db.add(operation)
        db.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        await message.answer(
            f"‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
            f"üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:\n"
            f"–ö–æ–¥ –ø–ª–µ–Ω–∫–∏: {data['film_code']}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π: {data['panel_quantity']}\n"
            f"–¢–∏–ø —Å—Ç—ã–∫–∞: {data['joint_type'].capitalize()}\n"
            f"–¶–≤–µ—Ç —Å—Ç—ã–∫–∞: {data['joint_color']}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—ã–∫–æ–≤: {data['joint_quantity']}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—è: {data['glue_quantity']}\n"
            f"–ú–æ–Ω—Ç–∞–∂: {'–î–∞' if data['installation_required'] else '–ù–µ—Ç'}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞: {data['customer_phone']}\n"
            f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {data['delivery_address']}\n\n"
            f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order.id}",
            reply_markup=get_main_keyboard()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥—É
        await notify_warehouse_about_order(message.bot, order.id, data)
        
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}")
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"Error creating order: {str(e)}")
    finally:
        db.close()
        
    await state.clear()

async def notify_warehouse_about_order(bot, order_id: int, order_details: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥—É –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ."""
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é —Å–∫–ª–∞–¥–∞
        warehouse_users = db.query(User).filter(User.role == UserRole.WAREHOUSE).all()
        
        notification_text = (
            f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}\n\n"
            f"–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:\n"
            f"–ö–æ–¥ –ø–ª–µ–Ω–∫–∏: {order_details['film_code']}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π: {order_details['panel_quantity']}\n"
            f"–¢–∏–ø —Å—Ç—ã–∫–∞: {order_details['joint_type'].capitalize()}\n"
            f"–¶–≤–µ—Ç —Å—Ç—ã–∫–∞: {order_details['joint_color']}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—ã–∫–æ–≤: {order_details['joint_quantity']}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—è: {order_details['glue_quantity']}\n"
            f"–ú–æ–Ω—Ç–∞–∂: {'–î–∞' if order_details['installation_required'] else '–ù–µ—Ç'}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞: {order_details['customer_phone']}\n"
            f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {order_details['delivery_address']}\n\n"
            f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–ú–æ–∏ –∑–∞–∫–∞–∑—ã'"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É —Å–∫–ª–∞–¥–æ–≤—â–∏–∫—É
        for user in warehouse_users:
            try:
                await bot.send_message(
                    chat_id=user.telegram_id,
                    text=notification_text
                )
            except Exception as e:
                print(f"Failed to send notification to warehouse user {user.telegram_id}: {e}")
    finally:
        db.close() 