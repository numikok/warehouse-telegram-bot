import json
import logging
from typing import List, Dict, Any, Optional, Union, Tuple
from datetime import datetime

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import func

from models import User, UserRole, Film, Panel, Joint, Glue, FinishedProduct, Operation, JointType, Order, OrderStatus, ProductionOrder
from database import get_db
from navigation import MenuState, get_menu_keyboard, go_back, get_back_keyboard, get_cancel_keyboard
from states import ProductionStates
from utils import check_production_access, get_role_menu_keyboard
from handlers.sales import handle_warehouse_order, handle_stock

logging.basicConfig(level=logging.INFO)

router = Router()

async def check_production_access(message: Message) -> bool:
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user or (user.role != UserRole.PRODUCTION and user.role != UserRole.SUPER_ADMIN):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return False
        return True
    finally:
        db.close()

def get_joint_type_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ë–∞–±–æ—á–∫–∞")],
            [KeyboardButton(text="–ü—Ä–æ—Å—Ç–æ–π")],
            [KeyboardButton(text="–ó–∞–º—ã–∫–∞—é—â–∏–π")],
            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

def get_joint_thickness_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="0.5")],
            [KeyboardButton(text="0.8")],
            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

def get_roll_length_keyboard():

    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="200")],
            [KeyboardButton(text="150")],
            [KeyboardButton(text="350")],
            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    if not await check_production_access(message):
        return
    
    await state.set_state(MenuState.PRODUCTION_MAIN)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_menu_keyboard(MenuState.PRODUCTION_MAIN)
    )

@router.message(F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def handle_back(message: Message, state: FSMContext):
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
            return
        
        next_menu, keyboard = await go_back(state, user.role)
        await state.set_state(next_menu)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
    finally:
        db.close()

@router.message(F.text == "üì• –ü—Ä–∏—Ö–æ–¥ —Å—ã—Ä—å—è")
async def handle_materials_income(message: Message, state: FSMContext):
    if not await check_production_access(message):
        return
    
    await state.set_state(MenuState.PRODUCTION_MATERIALS)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞:",
        reply_markup=get_menu_keyboard(MenuState.PRODUCTION_MATERIALS)
    )

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±—Ä–∞–∫–∞ –ø–∞–Ω–µ–ª–µ–π
@router.message(ProductionStates.waiting_for_defect_type, F.text == "ü™µ –ü–∞–Ω–µ–ª—å")
async def handle_panel_defect(message: Message, state: FSMContext):
    logging.info("–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±—Ä–∞–∫–∞ –ø–∞–Ω–µ–ª–µ–π –≤—ã–∑–≤–∞–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–∏–ø–∞ –±—Ä–∞–∫–∞
    current_state = await state.get_state()
    logging.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    
    if current_state != "production_states:waiting_for_defect_type":
        logging.warning(f"–í—ã–∑–æ–≤ handle_panel_defect –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {current_state}")
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—â–∏–Ω—É –±—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="0.5")],
            [KeyboardButton(text="0.8")],
            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—â–∏–Ω—É –±—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π (–º–º):",
        reply_markup=keyboard
    )
    
    # –ß–µ—Ç–∫–æ —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ –ø–∞–Ω–µ–ª—å –¥–ª—è –¥–µ—Ñ–µ–∫—Ç–∞
    await state.update_data(defect_type="panel_defect")
    logging.info("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∏–ø –¥–µ—Ñ–µ–∫—Ç–∞: panel_defect")
    
    await state.set_state(ProductionStates.waiting_for_defect_panel_thickness)
    logging.info("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: waiting_for_defect_panel_thickness")

@router.message(ProductionStates.waiting_for_defect_panel_thickness)
async def process_defect_panel_thickness(message: Message, state: FSMContext):
    logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–ª—â–∏–Ω—ã –±—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π: '{message.text}'")
    
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –ù–∞–∑–∞–¥")
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±—Ä–∞–∫–∞:",
            reply_markup=get_menu_keyboard(MenuState.PRODUCTION_DEFECT)
        )
        await state.set_state(ProductionStates.waiting_for_defect_type)
        return
    
    try:
        thickness = float(message.text.strip())
        if thickness not in [0.5, 0.8]:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—â–∏–Ω—É 0.5 –∏–ª–∏ 0.8 –º–º.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—â–∏–Ω—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(panel_thickness=thickness)
        
        db = next(get_db())
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –ø–∞–Ω–µ–ª–µ–π —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–æ–ª—â–∏–Ω–æ–π
            panel = db.query(Panel).filter(Panel.thickness == thickness).first()
            
            if not panel or panel.quantity <= 0:
                logging.warning(f"–í –±–∞–∑–µ –Ω–µ—Ç –ø–∞–Ω–µ–ª–µ–π —Ç–æ–ª—â–∏–Ω–æ–π {thickness} –º–º")
                await message.answer(
                    f"–í –±–∞–∑–µ –Ω–µ—Ç –ø–∞–Ω–µ–ª–µ–π —Ç–æ–ª—â–∏–Ω–æ–π {thickness} –º–º.",
                    reply_markup=get_menu_keyboard(MenuState.PRODUCTION_MAIN)
                )
                return
            
            logging.info(f"–ù–∞–π–¥–µ–Ω—ã –ø–∞–Ω–µ–ª–∏ —Ç–æ–ª—â–∏–Ω–æ–π {thickness} –º–º, –æ—Å—Ç–∞—Ç–æ–∫: {panel.quantity} —à—Ç.")
            
            await message.answer(
                f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π —Ç–æ–ª—â–∏–Ω–æ–π {thickness} –º–º:\n\n–î–æ—Å—Ç—É–ø–Ω–æ: {panel.quantity} —à—Ç.",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
                    resize_keyboard=True
                )
            )
            
            logging.info("–ó–∞–ø—Ä–æ—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π")
        finally:
            db.close()
            
        await state.set_state(ProductionStates.waiting_for_defect_panel_quantity)
        logging.info("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: waiting_for_defect_panel_quantity")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (0.5 –∏–ª–∏ 0.8).")

@router.message(ProductionStates.waiting_for_defect_panel_quantity)
async def process_defect_panel_quantity(message: Message, state: FSMContext):
    logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π: '{message.text}'")
    
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –ù–∞–∑–∞–¥")
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—â–∏–Ω—É –±—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π (–º–º):",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="0.5")],
                    [KeyboardButton(text="0.8")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(ProductionStates.waiting_for_defect_panel_thickness)
        return

    try:
        quantity = int(message.text)
        if quantity <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—Ä–∞–∫–∞
        data = await state.get_data()
        logging.info(f"–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {data}")
        
        defect_type = data.get("defect_type", "")
        panel_thickness = data.get("panel_thickness", 0.5)
        
        if defect_type != "panel_defect":
            logging.warning(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –¥–µ—Ñ–µ–∫—Ç–∞: {defect_type}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
            await state.set_state(MenuState.PRODUCTION_MAIN)
            return
            
        db = next(get_db())
        try:
            # –ò—â–µ–º –ø–∞–Ω–µ–ª—å –ø–æ —Ç–æ–ª—â–∏–Ω–µ
            panel = db.query(Panel).filter(Panel.thickness == panel_thickness).first()
            
            if not panel:
                logging.warning(f"–í –±–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–∞–Ω–µ–ª–∏ —Ç–æ–ª—â–∏–Ω–æ–π {panel_thickness} –º–º")
                await message.answer(f"–í –±–∞–∑–µ –Ω–µ—Ç –ø–∞–Ω–µ–ª–µ–π —Ç–æ–ª—â–∏–Ω–æ–π {panel_thickness} –º–º.")
                return
            
            if panel.quantity < quantity:
                logging.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–Ω–µ–ª–µ–π: –∑–∞–ø—Ä–æ—à–µ–Ω–æ {quantity}, –¥–æ—Å—Ç—É–ø–Ω–æ {panel.quantity}")
                await message.answer(
                    f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–ø–∏—Å–∞—Ç—å {quantity} –ø–∞–Ω–µ–ª–µ–π, –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ {panel.quantity}."
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
            
            # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π
            previous_quantity = panel.quantity
            panel.quantity -= quantity
            logging.info(f"–°–ø–∏—Å—ã–≤–∞–µ–º {quantity} –ø–∞–Ω–µ–ª–µ–π. –ë—ã–ª–æ: {previous_quantity}, —Å—Ç–∞–ª–æ: {panel.quantity}")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–ø–µ—Ä–∞—Ü–∏–∏
            operation = Operation(
                user_id=user.id,
                operation_type="panel_defect_subtract",  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ –≤—ã—á–∏—Ç–∞–Ω–∏–µ –¥–ª—è –±—Ä–∞–∫–∞
                quantity=quantity,
                details=json.dumps({
                    "panel_thickness": panel_thickness,
                    "previous_quantity": previous_quantity,
                    "new_quantity": panel.quantity,
                    "is_defect": True  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –±—Ä–∞–∫–∞
                })
            )
            logging.info(f"–°–æ–∑–¥–∞—é –∑–∞–ø–∏—Å—å –æ–ø–µ—Ä–∞—Ü–∏–∏: {operation.operation_type}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {operation.quantity}")
            
            db.add(operation)
            db.commit()
            logging.info("–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ë–î")
            
            await message.answer(
                f"‚úÖ –°–ø–∏—Å–∞–Ω–æ {quantity} –±—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π —Ç–æ–ª—â–∏–Ω–æ–π {panel_thickness} –º–º\n"
                f"–û—Å—Ç–∞—Ç–æ–∫: {panel.quantity} —à—Ç.",
                reply_markup=get_menu_keyboard(MenuState.PRODUCTION_MAIN)
            )
            logging.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–ø–∏—Å–∞–Ω–∏–∏")
            
        finally:
            db.close()
            
    except ValueError:
        logging.warning(f"–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: '{message.text}'")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return
    
    logging.info("–°–±—Ä–∞—Å—ã–≤–∞—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
    await state.clear()

@router.message(ProductionStates.waiting_for_defect_film_color)
async def process_defect_film_color(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await handle_defect(message, state)
        return
    
    film_color = message.text.strip()
    logging.info(f"–ü–æ–ª—É—á–µ–Ω —Ü–≤–µ—Ç –ø–ª–µ–Ω–∫–∏ –¥–ª—è –±—Ä–∞–∫–∞: '{film_color}'")
    
    db = next(get_db())
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–ª–µ–Ω–∫–∏
        film = db.query(Film).filter(Film.code == film_color).first()
        
        # –ï—Å–ª–∏ –ø–ª–µ–Ω–∫–∏ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ—Ç, —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
        if not film:
            logging.warning(f"–ü–ª–µ–Ω–∫–∞ —Å —Ü–≤–µ—Ç–æ–º '{film_color}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ")
            await message.answer(
                f"–ü–ª–µ–Ω–∫–∞ —Å —Ü–≤–µ—Ç–æ–º '{film_color}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. "
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –∏–ª–∏ —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ "
                f"—ç—Ç–æ—Ç —Ü–≤–µ—Ç –ø–ª–µ–Ω–∫–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ü—Ä–∏—Ö–æ–¥ —Å—ã—Ä—å—è'.",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
                    resize_keyboard=True
                )
            )
            return
        
        logging.info(f"–ù–∞–π–¥–µ–Ω–∞ –ø–ª–µ–Ω–∫–∞: {film.code}, –æ—Å—Ç–∞—Ç–æ–∫: {film.total_remaining} –º")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–≤–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(defect_film_color=film_color)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ—Ç—Ä–∞–∂ –±—Ä–∞–∫–æ–≤–∞–Ω–Ω–æ–π –ø–ª–µ–Ω–∫–∏
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
        
        await message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –º–µ—Ç—Ä–∞–∂ –±—Ä–∞–∫–æ–≤–∞–Ω–Ω–æ–π –ø–ª–µ–Ω–∫–∏ —Ü–≤–µ—Ç–∞ {film_color}:",
            reply_markup=keyboard
        )
        
        await state.set_state(ProductionStates.waiting_for_defect_film_meters)
    finally:
        db.close()

@router.message(ProductionStates.waiting_for_defect_film_meters)
async def process_defect_film_meters(message: Message, state: FSMContext):
    logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Ç—Ä–∞–∂–∞ –±—Ä–∞–∫–æ–≤–∞–Ω–Ω–æ–π –ø–ª–µ–Ω–∫–∏: '{message.text}'")
    
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –ù–∞–∑–∞–¥")
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        film_color = data.get('defect_film_color', '')
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–∑–∞–¥
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
        
        await message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç/–∫–æ–¥ –±—Ä–∞–∫–æ–≤–∞–Ω–Ω–æ–π –ø–ª–µ–Ω–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=keyboard
        )
        await state.set_state(ProductionStates.waiting_for_defect_film_color)
        return
    
    try:
        meters = float(message.text.strip())
        if meters <= 0:
            await message.answer("–ú–µ—Ç—Ä–∞–∂ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        film_color = data.get('defect_film_color', '')
        
        db = next(get_db())
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–ª–µ–Ω–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            film = db.query(Film).filter(Film.code == film_color).first()
            if not film:
                logging.warning(f"–ü–ª–µ–Ω–∫–∞ —Å —Ü–≤–µ—Ç–æ–º '{film_color}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ")
                await message.answer("–ü–ª–µ–Ω–∫–∞ —Å —Ç–∞–∫–∏–º —Ü–≤–µ—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –ø–ª–µ–Ω–∫–∏
            if film.total_remaining < meters:
                logging.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–ª–µ–Ω–∫–∏: –∑–∞–ø—Ä–æ—à–µ–Ω–æ {meters}–º, –¥–æ—Å—Ç—É–ø–Ω–æ {film.total_remaining}–º")
                await message.answer(
                    f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–ø–∏—Å–∞—Ç—å {meters}–º –ø–ª–µ–Ω–∫–∏, –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ {film.total_remaining}–º."
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
            
            # –£–º–µ–Ω—å—à–∞–µ–º –º–µ—Ç—Ä–∞–∂ –ø–ª–µ–Ω–∫–∏
            previous_remaining = film.total_remaining
            film.total_remaining -= meters
            logging.info(f"–°–ø–∏—Å—ã–≤–∞–µ–º {meters}–º –ø–ª–µ–Ω–∫–∏. –ë—ã–ª–æ: {previous_remaining}–º, —Å—Ç–∞–ª–æ: {film.total_remaining}–º")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–ø–µ—Ä–∞—Ü–∏–∏
            operation = Operation(
                user_id=user.id,
                operation_type="film_defect",
                quantity=meters,
                details=json.dumps({
                    "film_color": film_color,
                    "previous_remaining": previous_remaining,
                    "new_remaining": film.total_remaining,
                    "is_defect": True
                })
            )
            logging.info(f"–°–æ–∑–¥–∞—é –∑–∞–ø–∏—Å—å –æ–ø–µ—Ä–∞—Ü–∏–∏: {operation.operation_type}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {operation.quantity}")
            
            db.add(operation)
            db.commit()
            logging.info("–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ë–î")
            
            await message.answer(
                f"‚úÖ –°–ø–∏—Å–∞–Ω–æ {meters}–º –±—Ä–∞–∫–æ–≤–∞–Ω–Ω–æ–π –ø–ª–µ–Ω–∫–∏\n"
                f"–¶–≤–µ—Ç: {film_color}\n"
                f"–û—Å—Ç–∞—Ç–æ–∫: {film.total_remaining}–º",
                reply_markup=get_menu_keyboard(MenuState.PRODUCTION_MAIN)
            )
            logging.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–ø–∏—Å–∞–Ω–∏–∏")
            
        finally:
            db.close()
            
    except ValueError:
        logging.warning(f"–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: '{message.text}'")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    
    logging.info("–°–±—Ä–∞—Å—ã–≤–∞—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
    await state.clear()

@router.message(ProductionStates.waiting_for_film_quantity)
async def process_film_quantity(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await handle_film(message, state)
        return
    
    try:
        quantity = float(message.text.strip())
        if quantity <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–ª–æ–Ω–æ–≤
        await state.update_data(film_quantity=quantity)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–µ—Ç—Ä–∞–∂ –æ–¥–Ω–æ–≥–æ —Ä—É–ª–æ–Ω–∞
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
        
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –º–µ—Ç—Ä–∞–∂ –æ–¥–Ω–æ–≥–æ —Ä—É–ª–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 50):",
            reply_markup=keyboard
        )
        
        await state.set_state(ProductionStates.waiting_for_film_meters)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

@router.message(ProductionStates.waiting_for_film_meters)
async def process_film_meters(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä—É–ª–æ–Ω–æ–≤
        data = await state.get_data()
        film_code = data.get('film_code')
        
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
        
        await message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–ª–æ–Ω–æ–≤ –ø–ª–µ–Ω–∫–∏ {film_code}:",
            reply_markup=keyboard
        )
        
        await state.set_state(ProductionStates.waiting_for_film_quantity)
        return
    
    try:
        meters = float(message.text.strip())
        if meters <= 0:
            await message.answer("–ú–µ—Ç—Ä–∞–∂ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∞–∂ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(film_meters=meters)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞—Å—Ö–æ–¥ –Ω–∞ –æ–¥–Ω—É –ø–∞–Ω–µ–ª—å
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="2.5")],
                [KeyboardButton(text="3.0")],
                [KeyboardButton(text="3.5")],
                [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        
        await message.answer(
            "–£–∫–∞–∂–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ –ø–ª–µ–Ω–∫–∏ –Ω–∞ –æ–¥–Ω—É –ø–∞–Ω–µ–ª—å (–≤ –º–µ—Ç—Ä–∞—Ö):",
            reply_markup=keyboard
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞ –Ω–∞ –ø–∞–Ω–µ–ª—å
        await state.set_state(ProductionStates.waiting_for_panel_consumption)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

@router.message(ProductionStates.waiting_for_panel_consumption)
async def process_panel_consumption(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É –º–µ—Ç—Ä–∞–∂–∞
        data = await state.get_data()
        
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
        
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –º–µ—Ç—Ä–∞–∂ –æ–¥–Ω–æ–≥–æ —Ä—É–ª–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 50):",
            reply_markup=keyboard
        )
        
        await state.set_state(ProductionStates.waiting_for_film_meters)
        return
    
    try:
        panel_consumption = float(message.text.strip())
        if panel_consumption <= 0:
            await message.answer("–†–∞—Å—Ö–æ–¥ –Ω–∞ –ø–∞–Ω–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        film_code = data.get('film_code')
        film_thickness = data.get('film_thickness', 0.5)  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—â–∏–Ω—É –ø–ª–µ–Ω–∫–∏, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.5
        film_quantity = data.get('film_quantity')
        meters = data.get('film_meters')
        
        # –†–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –º–µ—Ç—Ä–∞–∂
        total_meters = film_quantity * meters
        
        db = next(get_db())
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–ª–µ–Ω–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            film = db.query(Film).filter(Film.code == film_code).first()
            
            if not film:
                # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –æ –ø–ª–µ–Ω–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –µ–µ
                film = Film(
                    code=film_code,
                    panel_consumption=panel_consumption,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞
                    meters_per_roll=meters,               # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∞–∂–∞ –≤ —Ä—É–ª–æ–Ω–µ
                    thickness=film_thickness,             # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–ª—â–∏–Ω—ã
                    total_remaining=total_meters
                )
                db.add(film)
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∞–∂ –ø–ª–µ–Ω–∫–∏
                film.total_remaining += total_meters
                
                # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –º–µ—Ç—Ä–∞–∂–∞ –≤ —Ä—É–ª–æ–Ω–µ
                film.meters_per_roll = meters
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥ –Ω–∞ –ø–∞–Ω–µ–ª—å, –ø—Ä–∏–Ω–∏–º–∞—è –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                film.panel_consumption = panel_consumption
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—â–∏–Ω—É –ø–ª–µ–Ω–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
                film.thickness = film_thickness
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏
            operation = Operation(
                user_id=user.id,
                operation_type="film_income",
                quantity=film_quantity,
                details=json.dumps({
                    "film_code": film_code,
                    "film_thickness": film_thickness,
                    "rolls": film_quantity,
                    "meters_per_roll": meters,
                    "panel_consumption": panel_consumption,
                    "total_meters": total_meters
                })
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db.add(operation)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            db.commit()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
            await state.set_state(MenuState.PRODUCTION_MATERIALS)
            keyboard = await get_role_menu_keyboard(MenuState.PRODUCTION_MATERIALS, message, state)
            
            await message.answer(
                f"‚úÖ –ü—Ä–∏—Ö–æ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n"
                f"–ü–ª–µ–Ω–∫–∞: {film_code}\n"
                f"–¢–æ–ª—â–∏–Ω–∞: {film_thickness} –º–º\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–ª–æ–Ω–æ–≤: {film_quantity}\n"
                f"–ú–µ—Ç—Ä–∞–∂ –æ–¥–Ω–æ–≥–æ —Ä—É–ª–æ–Ω–∞: {meters}–º\n"
                f"–†–∞—Å—Ö–æ–¥ –Ω–∞ –ø–∞–Ω–µ–ª—å: {panel_consumption}–º\n"
                f"–û–±—â–∏–π –º–µ—Ç—Ä–∞–∂: {total_meters}–º\n\n"
                f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {film.total_remaining}–º –ø–ª–µ–Ω–∫–∏ {film_code}"
                f" (—Ç–æ–ª—â–∏–Ω–∞: {film_thickness} –º–º)",
                reply_markup=keyboard
            )
        finally:
            db.close()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Ö–æ–¥–∞ —Å—Ç—ã–∫–æ–≤
@router.message(F.text == "‚öôÔ∏è –°—Ç—ã–∫")
async def handle_joint_income(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–∏–µ–º–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    current_state = await state.get_state()
    logging.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–°—Ç—ã–∫', —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ –º—ã –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∫—Ä–æ–º–µ –º–µ–Ω—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    if current_state != MenuState.PRODUCTION_MATERIALS:
        logging.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
        return
        
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç—ã–∫–∞:",
        reply_markup=get_joint_type_keyboard()
    )
    await state.set_state(ProductionStates.waiting_for_joint_type)

@router.message(ProductionStates.waiting_for_joint_type)
async def process_joint_type(message: Message, state: FSMContext):
    # –ú–∞–ø–ø–∏–Ω–≥ —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è enum
    joint_type_mapping = {
        "–ë–∞–±–æ—á–∫–∞": JointType.BUTTERFLY,
        "–ü—Ä–æ—Å—Ç–æ–π": JointType.SIMPLE,
        "–ó–∞–º—ã–∫–∞—é—â–∏–π": JointType.CLOSING
    }
    
    if message.text not in ["–ë–∞–±–æ—á–∫–∞", "–ü—Ä–æ—Å—Ç–æ–π", "–ó–∞–º—ã–∫–∞—é—â–∏–π"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç—ã–∫–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
        
    await state.update_data(joint_type=joint_type_mapping[message.text])
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç —Å—Ç—ã–∫–∞:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
    )
    await state.set_state(ProductionStates.waiting_for_joint_color)

@router.message(ProductionStates.waiting_for_joint_color)
async def process_joint_color(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç—ã–∫–∞:",
            reply_markup=get_joint_type_keyboard()
        )
        await state.set_state(ProductionStates.waiting_for_joint_type)
        return
    
    await state.update_data(joint_color=message.text)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—â–∏–Ω—É —Å—Ç—ã–∫–∞:",
        reply_markup=get_joint_thickness_keyboard()
    )
    await state.set_state(ProductionStates.waiting_for_joint_thickness)

@router.message(ProductionStates.waiting_for_joint_thickness)
async def process_joint_thickness(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç —Å—Ç—ã–∫–∞:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
        await state.set_state(ProductionStates.waiting_for_joint_color)
        return
    
    if message.text not in ["0.5", "0.8"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—â–∏–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    
    await state.update_data(joint_thickness=float(message.text))
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—ã–∫–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
    )
    await state.set_state(ProductionStates.waiting_for_joint_quantity)

@router.message(ProductionStates.waiting_for_joint_quantity)
async def process_joint_quantity(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—â–∏–Ω—É —Å—Ç—ã–∫–∞:",
            reply_markup=get_joint_thickness_keyboard()
        )
        await state.set_state(ProductionStates.waiting_for_joint_thickness)
        return

    try:
        quantity = int(message.text)
        if quantity <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
        
        data = await state.get_data()
        db = next(get_db())
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —Å—Ç—ã–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            joint_type_names = {
                "butterfly": "–ë–∞–±–æ—á–∫–∞",
                "simple": "–ü—Ä–æ—Å—Ç–æ–π",
                "closing": "–ó–∞–º—ã–∫–∞—é—â–∏–π"
            }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç—ã–∫ —Å —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            joint = db.query(Joint).filter(
                Joint.type == data["joint_type"],
                Joint.color == data["joint_color"],
                Joint.thickness == data["joint_thickness"]
            ).first()
            
            if joint:
                # –ï—Å–ª–∏ —Ç–∞–∫–æ–π —Å—Ç—ã–∫ —É–∂–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                previous_quantity = joint.quantity
                joint.quantity += quantity
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–ø–µ—Ä–∞—Ü–∏–∏
                operation = Operation(
                    user_id=user.id,
                    operation_type="joint_income",
                    quantity=quantity,
                    details=json.dumps({
                        "joint_type": data["joint_type"].value,
                        "joint_color": data["joint_color"],
                        "joint_thickness": data["joint_thickness"],
                        "previous_quantity": previous_quantity,
                        "new_quantity": joint.quantity
                    })
                )
            else:
                # –ï—Å–ª–∏ —Å—Ç—ã–∫–∞ –µ—â–µ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                joint = Joint(
                    type=data["joint_type"],
                    color=data["joint_color"],
                    thickness=data["joint_thickness"],
                    quantity=quantity
                )
                db.add(joint)
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–ø–µ—Ä–∞—Ü–∏–∏
                operation = Operation(
                    user_id=user.id,
                    operation_type="joint_income",
                    quantity=quantity,
                    details=json.dumps({
                        "joint_type": data["joint_type"].value,
                        "joint_color": data["joint_color"],
                        "joint_thickness": data["joint_thickness"],
                        "previous_quantity": 0,
                        "new_quantity": quantity
                    })
                )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db.add(operation)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            db.commit()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
            await state.set_state(MenuState.PRODUCTION_MATERIALS)
            keyboard = await get_role_menu_keyboard(MenuState.PRODUCTION_MATERIALS, message, state)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —Å—Ç—ã–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            joint_type_name = joint_type_names.get(data["joint_type"].value, data["joint_type"].value)
            
            await message.answer(
                f"‚úÖ –ü—Ä–∏—Ö–æ–¥ —Å—Ç—ã–∫–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n"
                f"–¢–∏–ø: {joint_type_name}\n"
                f"–¶–≤–µ—Ç: {data['joint_color']}\n"
                f"–¢–æ–ª—â–∏–Ω–∞: {data['joint_thickness']} –º–º\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç.\n"
                f"–û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {joint.quantity} —à—Ç.",
                reply_markup=keyboard
            )
            
        finally:
            db.close()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Ö–æ–¥–∞ –∫–ª–µ—è
@router.message(F.text == "üß¥ –ö–ª–µ–π")
async def handle_glue_income(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–∏–µ–º–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    current_state = await state.get_state()
    logging.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ö–ª–µ–π', —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ –º—ã –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∫—Ä–æ–º–µ –º–µ–Ω—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    if current_state != MenuState.PRODUCTION_MATERIALS:
        logging.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
        return
        
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—è (–≤ —à—Ç—É–∫–∞—Ö):",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
    )
    await state.set_state(ProductionStates.waiting_for_glue_quantity)

@router.message(ProductionStates.waiting_for_glue_quantity)
async def process_glue_quantity(message: Message, state: FSMContext):
    try:
        quantity = int(message.text)
        if quantity <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
            
        db = next(get_db())
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫
            glue = db.query(Glue).first()
            if not glue:
                glue = Glue(quantity=0)
                db.add(glue)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–ª–µ–π
            previous_quantity = glue.quantity
            glue.quantity += quantity
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–ø–µ—Ä–∞—Ü–∏–∏
            operation = Operation(
                user_id=user.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                operation_type="glue_income",
                quantity=quantity,
                details=json.dumps({"previous_quantity": previous_quantity})
            )
            db.add(operation)
            
            db.commit()
            
            await message.answer(
                f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {quantity} —à—Ç. –∫–ª–µ—è\n"
                f"–û–±—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {glue.quantity} —à—Ç.",
                reply_markup=get_menu_keyboard(MenuState.PRODUCTION_MATERIALS)
            )
        finally:
            db.close()
            
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return
        
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
@router.message(F.text == "üõ† –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ")
async def handle_production(message: Message, state: FSMContext):
    if not await check_production_access(message):
        return
    
    await state.set_state(MenuState.PRODUCTION_PROCESS)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—â–∏–Ω—É –ø–∞–Ω–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="0.5")],
            [KeyboardButton(text="0.8")],
            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—â–∏–Ω—É –ø–∞–Ω–µ–ª–µ–π (–º–º):",
        reply_markup=keyboard
    )
    
    await state.update_data(operation_type="panel_income") # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ —è–≤–Ω–æ
    await state.set_state(ProductionStates.waiting_for_panel_thickness)

@router.message(ProductionStates.waiting_for_panel_thickness)
async def process_panel_thickness(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.set_state(MenuState.PRODUCTION_MATERIALS)
        keyboard = await get_role_menu_keyboard(MenuState.PRODUCTION_MATERIALS, message, state)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞:", reply_markup=keyboard)
        return
    
    try:
        thickness = float(message.text.strip())
        if thickness not in [0.5, 0.8]:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—â–∏–Ω—É 0.5 –∏–ª–∏ 0.8 –º–º.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—â–∏–Ω—É –ø–∞–Ω–µ–ª–µ–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(panel_thickness=thickness)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—Å—Ç—ã—Ö –ø–∞–Ω–µ–ª–µ–π
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
        
        await message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—Å—Ç—ã—Ö –ø–∞–Ω–µ–ª–µ–π (—Ç–æ–ª—â–∏–Ω–∞: {thickness} –º–º):",
            reply_markup=keyboard
        )
        
        await state.set_state(ProductionStates.waiting_for_panel_quantity)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (0.5 –∏–ª–∏ 0.8).")

@router.message(ProductionStates.waiting_for_panel_quantity)
async def process_panel_quantity(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—â–∏–Ω—É –ø–∞–Ω–µ–ª–µ–π (–º–º):",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="0.5")],
                    [KeyboardButton(text="0.8")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(ProductionStates.waiting_for_panel_thickness)
        return
    
    try:
        quantity = int(message.text.strip())
        if quantity <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏—Ö–æ–¥–∞
        data = await state.get_data()
        operation_type = data.get("operation_type", "")
        panel_thickness = data.get("panel_thickness", 0.5)
        if operation_type != "panel_income":
            logging.warning(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: {operation_type}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
            await state.set_state(MenuState.PRODUCTION_MAIN)
            return
            
        db = next(get_db())
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø–∞—Å –ø–∞–Ω–µ–ª–µ–π —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–æ–ª—â–∏–Ω–æ–π
            panel = db.query(Panel).filter(Panel.thickness == panel_thickness).first()
            
            if not panel:
                # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –æ –ø–∞–Ω–µ–ª—è—Ö —Å —Ç–∞–∫–æ–π —Ç–æ–ª—â–∏–Ω–æ–π –µ—â–µ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–µ
                panel = Panel(
                    quantity=quantity, 
                    thickness=panel_thickness
                )
                db.add(panel)
                previous_quantity = 0
            else:
                # –ò–Ω–∞—á–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                previous_quantity = panel.quantity
                panel.quantity += quantity
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏
            operation = Operation(
                user_id=user.id,
                operation_type="panel_income",
                quantity=quantity,
                details=json.dumps({
                    "previous_quantity": previous_quantity,
                    "new_quantity": panel.quantity,
                    "panel_thickness": panel_thickness,
                    "is_income": True  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–∏—Ö–æ–¥–∞
                })
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db.add(operation)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            db.commit()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∞–¥–º–∏–Ω–∞
            await state.set_state(MenuState.PRODUCTION_MATERIALS)
            keyboard = await get_role_menu_keyboard(MenuState.PRODUCTION_MATERIALS, message, state)
            
            await message.answer(
                f"‚úÖ –ü—Ä–∏—Ö–æ–¥ –ø–∞–Ω–µ–ª–µ–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n"
                f"–¢–æ–ª—â–∏–Ω–∞: {panel_thickness} –º–º\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç.\n"
                f"–ü—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {previous_quantity} —à—Ç.\n"
                f"–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {panel.quantity} —à—Ç.",
                reply_markup=keyboard
            )
        finally:
            db.close()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Ö–æ–¥–∞ –ø–ª–µ–Ω–∫–∏
@router.message(F.text == "üé® –ü–ª–µ–Ω–∫–∞")
async def handle_film(message: Message, state: FSMContext):
    if not await check_production_access(message):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    current_state = await state.get_state()
    logging.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ü–ª–µ–Ω–∫–∞', —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    
    # –ï—Å–ª–∏ –º—ã –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±—Ä–∞–∫–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –æ–±—Ä–∞–±–æ—Ç–∫—É
    if current_state == ProductionStates.waiting_for_defect_type:
        logging.info("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ handle_film, —Ç–∞–∫ –∫–∞–∫ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –º–µ–Ω—é –±—Ä–∞–∫–∞. –ë—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω handle_film_defect.")
        return
    
    # –ï—Å–ª–∏ –º—ã –Ω–µ –≤ –º–µ–Ω—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    if current_state != MenuState.PRODUCTION_MATERIALS:
        logging.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
        return
        
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥ –ø–ª–µ–Ω–∫–∏
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–ª–µ–Ω–æ–∫
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–µ–Ω–æ–∫
        films = db.query(Film).all()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–ª–µ–Ω–æ–∫, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        film_info_text = ""
        if films:
            film_info = []
            for film in films:
                panel_count = film.calculate_possible_panels()
                film_info.append(
                    f"- {film.code}: {film.total_remaining:.2f}–º (—Ö–≤–∞—Ç–∏—Ç –Ω–∞ ~{panel_count} –ø–∞–Ω–µ–ª–µ–π)"
                )
            film_info_text = "\n\n–ò–º–µ—é—â–∏–µ—Å—è –ø–ª–µ–Ω–∫–∏:\n" + "\n".join(film_info)
        
        await message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–ª–µ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:{film_info_text}",
            reply_markup=keyboard
        )
        
        await state.set_state(ProductionStates.waiting_for_film_code)
    finally:
        db.close()

@router.message(ProductionStates.waiting_for_film_code)
async def process_film_code(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.set_state(MenuState.PRODUCTION_MATERIALS)
        keyboard = await get_role_menu_keyboard(MenuState.PRODUCTION_MATERIALS, message, state)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞:", reply_markup=keyboard)
        return
    
    film_code = message.text.strip()
    
    db = next(get_db())
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–ª–µ–Ω–∫–∏
        film = db.query(Film).filter(Film.code == film_code).first()
        
        # –ï—Å–ª–∏ –ø–ª–µ–Ω–∫–∏ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        if not film:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –ø–ª–µ–Ω–∫–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–¥–æ–º –∏ –Ω—É–ª–µ–≤—ã–º –æ—Å—Ç–∞—Ç–∫–æ–º
            # –ù–ï —É–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –æ–Ω–∏ –±—É–¥—É—Ç –∑–∞–¥–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            film = Film(
                code=film_code,
                total_remaining=0.0     # –¢–æ–ª—å–∫–æ –Ω—É–ª–µ–≤–æ–π –æ—Å—Ç–∞—Ç–æ–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞
            )
            db.add(film)
            db.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º, —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ü–≤–µ—Ç
            await message.answer(
                f"üëç –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ü–≤–µ—Ç –ø–ª–µ–Ω–∫–∏: {film_code}"
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –ø–ª–µ–Ω–∫–∏
        await state.update_data(film_code=film_code)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–ª–æ–Ω–æ–≤
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
        
        await message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–ª–æ–Ω–æ–≤ –ø–ª–µ–Ω–∫–∏ {film_code}:",
            reply_markup=keyboard
        )
        
        await state.set_state(ProductionStates.waiting_for_film_quantity)
    finally:
        db.close()

@router.message(ProductionStates.waiting_for_defect_type, F.text == "üé® –ü–ª–µ–Ω–∫–∞")
async def handle_film_defect(message: Message, state: FSMContext):
    logging.info("–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±—Ä–∞–∫–∞ –ø–ª–µ–Ω–∫–∏ –≤—ã–∑–≤–∞–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–∏–ø–∞ –±—Ä–∞–∫–∞
    current_state = await state.get_state()
    logging.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±—Ä–∞–∫–∞ –ø–ª–µ–Ω–∫–∏: {current_state}")
    
    if current_state != ProductionStates.waiting_for_defect_type:
        logging.warning(f"–í—ã–∑–æ–≤ handle_film_defect –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {current_state}")
        return
    
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ü–≤–µ—Ç–æ–≤ –ø–ª–µ–Ω–∫–∏
        films = db.query(Film).all()
        films_list = [f"- {film.code} (–æ—Å—Ç–∞—Ç–æ–∫: {film.total_remaining} –º)" for film in films]
        logging.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–µ–Ω–∫–∏: {films_list}")
        
        await state.update_data(defect_type="film")
        await state.set_state(ProductionStates.waiting_for_defect_film_color)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–≤–µ—Ç –ø–ª–µ–Ω–∫–∏
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–ª–µ–Ω–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ, —Å–æ–æ–±—â–∞–µ–º —á—Ç–æ –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –±—Ä–∞–∫
        if not films:
            await message.answer(
                "–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –ø–ª–µ–Ω–∫–∏. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–ª–µ–Ω–∫—É —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ü—Ä–∏—Ö–æ–¥ —Å—ã—Ä—å—è'.",
                reply_markup=keyboard
            )
            return
        
        films_text = "\n".join(films_list)
        await message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç/–∫–æ–¥ –±—Ä–∞–∫–æ–≤–∞–Ω–Ω–æ–π –ø–ª–µ–Ω–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞:\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n{films_text}",
            reply_markup=keyboard
        )
    finally:
        db.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–∞–∫–∞
@router.message(F.text == "üö´ –ë—Ä–∞–∫")
async def handle_defect(message: Message, state: FSMContext):
    logging.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ë—Ä–∞–∫'")
    
    if not await check_production_access(message):
        logging.warning("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±—Ä–∞–∫–∞")
        return
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª—é–±—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –æ—Å—Ç–∞—Ç—å—Å—è
    await state.clear()
    
    logging.info("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–∏–ø–∞ –±—Ä–∞–∫–∞")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±—Ä–∞–∫–∞
    await state.set_state(ProductionStates.waiting_for_defect_type)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±—Ä–∞–∫–∞
    keyboard = get_menu_keyboard(MenuState.PRODUCTION_DEFECT)
    logging.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {keyboard}")
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±—Ä–∞–∫–∞:",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–∞–Ω–µ–ª–µ–π –≤ –º–µ–Ω—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
@router.message(F.text == "ü™µ –ü–∞–Ω–µ–ª—å")
async def handle_panel(message: Message, state: FSMContext):
    logging.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ü–∞–Ω–µ–ª—å'")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state.get_state()
    logging.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '–ü–∞–Ω–µ–ª—å': {current_state}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    if current_state != MenuState.PRODUCTION_MATERIALS:
        logging.info("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±—ã—á–Ω–æ–π –ø–∞–Ω–µ–ª–∏, —Ç–∞–∫ –∫–∞–∫ –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–µ –≤ –º–µ–Ω—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (–ø—Ä–∏—Ö–æ–¥ –ø–∞–Ω–µ–ª–µ–π)
    await state.update_data(operation_type="panel_income")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—â–∏–Ω—É –ø–∞–Ω–µ–ª–µ–π
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="0.5")],
            [KeyboardButton(text="0.8")],
            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—â–∏–Ω—É –ø–∞–Ω–µ–ª–µ–π (–º–º):",
        reply_markup=keyboard
    )
    
    await state.set_state(ProductionStates.waiting_for_panel_thickness)
    logging.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_panel_thickness")
