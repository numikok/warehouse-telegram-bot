import json
import logging
from typing import List, Dict, Any, Optional, Union, Tuple
from datetime import datetime

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import func

from models import User, UserRole, Film, Panel, Joint, Glue, FinishedProduct, Operation, JointType, Order, OrderStatus, ProductionOrder
from database import get_db
from navigation import MenuState, get_menu_keyboard, go_back, get_back_keyboard, get_cancel_keyboard
from states import ProductionStates
from utils import check_production_access, get_role_menu_keyboard
from handlers.sales import handle_warehouse_order, handle_stock

logging.basicConfig(level=logging.INFO)

router = Router()

class ProductionStates(StatesGroup):
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–∏—Ö–æ–¥–∞ –ø—É—Å—Ç—ã—Ö –ø–∞–Ω–µ–ª–µ–π
    waiting_for_panel_quantity = State()
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–∏—Ö–æ–¥–∞ –ø–ª–µ–Ω–∫–∏
    waiting_for_film_color = State()
    waiting_for_film_code = State()
    waiting_for_film_quantity = State()
    waiting_for_film_meters = State()
    waiting_for_film_thickness = State()
    waiting_for_roll_count = State()
    waiting_for_roll_length = State()
    waiting_for_panel_consumption = State()
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–∏—Ö–æ–¥–∞ —Å—Ç—ã–∫–æ–≤
    waiting_for_joint_type = State()
    waiting_for_joint_color = State()
    waiting_for_joint_thickness = State()
    waiting_for_joint_quantity = State()
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–∏—Ö–æ–¥–∞ –∫–ª–µ—è
    waiting_for_glue_quantity = State()
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
    waiting_for_production_film_color = State()
    waiting_for_production_quantity = State()

    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏
    waiting_for_order_id_to_complete = State()

    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É—á–µ—Ç–∞ –±—Ä–∞–∫–∞
    waiting_for_defect_type = State()  # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –±—Ä–∞–∫–∞ (–ø–∞–Ω–µ–ª—å/–ø–ª–µ–Ω–∫–∞/—Å—Ç—ã–∫/–∫–ª–µ–π)
    waiting_for_defect_joint_type = State()  # –¢–∏–ø —Å—Ç—ã–∫–∞ –¥–ª—è –±—Ä–∞–∫–∞
    waiting_for_defect_joint_color = State()  # –¶–≤–µ—Ç —Å—Ç—ã–∫–∞ –¥–ª—è –±—Ä–∞–∫–∞
    waiting_for_defect_joint_thickness = State()  # –¢–æ–ª—â–∏–Ω–∞ —Å—Ç—ã–∫–∞ –¥–ª—è –±—Ä–∞–∫–∞
    waiting_for_defect_joint_quantity = State()  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—ã–∫–æ–≤
    waiting_for_defect_panel_quantity = State()  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π
    waiting_for_defect_film_color = State()  # –¶–≤–µ—Ç –±—Ä–∞–∫–æ–≤–∞–Ω–Ω–æ–π –ø–ª–µ–Ω–∫–∏
    waiting_for_defect_film_meters = State()  # –ú–µ—Ç—Ä–∞–∂ –±—Ä–∞–∫–æ–≤–∞–Ω–Ω–æ–π –ø–ª–µ–Ω–∫–∏
    waiting_for_defect_glue_quantity = State()  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–∞–∫–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–µ—è

    # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –Ω–∞–ª–∏—á–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤
    waiting_for_extra_meters_choice = State()
    waiting_for_loose_meters = State()

async def check_production_access(message: Message) -> bool:
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user or (user.role != UserRole.PRODUCTION and user.role != UserRole.SUPER_ADMIN):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return False
        return True
    finally:
        db.close()

def get_joint_type_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ë–∞–±–æ—á–∫–∞")],
            [KeyboardButton(text="–ü—Ä–æ—Å—Ç–æ–π")],
            [KeyboardButton(text="–ó–∞–º—ã–∫–∞—é—â–∏–π")],
            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

def get_joint_thickness_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="0.5")],
            [KeyboardButton(text="0.8")],
            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

def get_roll_length_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="200")],
            [KeyboardButton(text="150")],
            [KeyboardButton(text="350")],
            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    if not await check_production_access(message):
        return
    
    await state.set_state(MenuState.PRODUCTION_MAIN)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_menu_keyboard(MenuState.PRODUCTION_MAIN)
    )

@router.message(F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def handle_back(message: Message, state: FSMContext):
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
            return
        
        next_menu, keyboard = await go_back(state, user.role)
        await state.set_state(next_menu)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
    finally:
        db.close()

@router.message(F.text == "üì• –ü—Ä–∏—Ö–æ–¥ —Å—ã—Ä—å—è")
async def handle_materials_income(message: Message, state: FSMContext):
    if not await check_production_access(message):
        return
    
    await state.set_state(MenuState.PRODUCTION_MATERIALS)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞:",
        reply_markup=get_menu_keyboard(MenuState.PRODUCTION_MATERIALS)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–∞–∫–∞
@router.message(F.text == "üö´ –ë—Ä–∞–∫")
async def handle_defect(message: Message, state: FSMContext):
    logging.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ë—Ä–∞–∫'")
    
    if not await check_production_access(message):
        logging.warning("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±—Ä–∞–∫–∞")
        return
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª—é–±—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –æ—Å—Ç–∞—Ç—å—Å—è
    await state.clear()
    
    logging.info("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_defect_type")
    await state.set_state(ProductionStates.waiting_for_defect_type)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±—Ä–∞–∫–∞
    keyboard = get_menu_keyboard(MenuState.PRODUCTION_DEFECT)
    logging.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—Ä–∞–∫–∞: {keyboard}")
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±—Ä–∞–∫–∞:",
        reply_markup=keyboard
    )

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±—Ä–∞–∫–∞ –ø–∞–Ω–µ–ª–µ–π - –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤—ã—à–µ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
@router.message(ProductionStates.waiting_for_defect_type, F.text == "ü™µ –ü–∞–Ω–µ–ª—å")
async def handle_panel_defect(message: Message, state: FSMContext):
    logging.info("–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±—Ä–∞–∫–∞ –ø–∞–Ω–µ–ª–µ–π –≤—ã–∑–≤–∞–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–∏–ø–∞ –±—Ä–∞–∫–∞
    current_state = await state.get_state()
    logging.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ handle_panel_defect: {current_state}")
    
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –ø–∞–Ω–µ–ª–µ–π
        panel = db.query(Panel).first()
        if not panel or panel.quantity <= 0:
            logging.warning("–í –±–∞–∑–µ –Ω–µ—Ç –ø–∞–Ω–µ–ª–µ–π")
            await message.answer(
                "–í –±–∞–∑–µ –Ω–µ—Ç –ø–∞–Ω–µ–ª–µ–π.",
                reply_markup=get_menu_keyboard(MenuState.PRODUCTION_MAIN)
            )
            return
        
        logging.info(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ waiting_for_defect_panel_quantity, –¥–æ—Å—Ç—É–ø–Ω–æ –ø–∞–Ω–µ–ª–µ–π: {panel.quantity}")
        await message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π:\n\n–î–æ—Å—Ç—É–ø–Ω–æ: {panel.quantity} —à—Ç.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
    finally:
        db.close()
    
    # –ß–µ—Ç–∫–æ —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ –ø–∞–Ω–µ–ª—å –¥–ª—è –¥–µ—Ñ–µ–∫—Ç–∞
    await state.update_data(defect_type="panel_defect")
    await state.set_state(ProductionStates.waiting_for_defect_panel_quantity)
    logging.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ waiting_for_defect_panel_quantity")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Ö–æ–¥–∞ –ø—É—Å—Ç—ã—Ö –ø–∞–Ω–µ–ª–µ–π
@router.message(F.text == "ü™µ –ü–∞–Ω–µ–ª—å")
async def handle_panel(message: Message, state: FSMContext):
    if not await check_production_access(message):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    current_state = await state.get_state()
    logging.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ü–∞–Ω–µ–ª—å' –≤ handle_panel, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    
    # –ï—Å–ª–∏ –º—ã –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±—Ä–∞–∫–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –æ–±—Ä–∞–±–æ—Ç–∫—É
    if current_state == ProductionStates.waiting_for_defect_type:
        logging.info("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ handle_panel, —Ç–∞–∫ –∫–∞–∫ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –º–µ–Ω—é –±—Ä–∞–∫–∞")
        return
    
    # –ï—Å–ª–∏ –º—ã –Ω–µ –≤ –º–µ–Ω—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    if current_state != MenuState.PRODUCTION_MATERIALS:
        logging.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—Å—Ç—ã—Ö –ø–∞–Ω–µ–ª–µ–π
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—Å—Ç—ã—Ö –ø–∞–Ω–µ–ª–µ–π:",
        reply_markup=keyboard
    )
    
    await state.update_data(operation_type="panel_income") # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ —è–≤–Ω–æ
    await state.set_state(ProductionStates.waiting_for_panel_quantity)

@router.message(ProductionStates.waiting_for_panel_quantity)
async def process_panel_quantity(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.set_state(MenuState.PRODUCTION_MATERIALS)
        keyboard = await get_role_menu_keyboard(MenuState.PRODUCTION_MATERIALS, message, state)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞:", reply_markup=keyboard)
        return
    
    try:
        quantity = int(message.text.strip())
        if quantity <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏—Ö–æ–¥–∞
        data = await state.get_data()
        operation_type = data.get("operation_type", "")
        if operation_type != "panel_income":
            logging.warning(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: {operation_type}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
            await state.set_state(MenuState.PRODUCTION_MAIN)
            return
            
        db = next(get_db())
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø–∞—Å –ø–∞–Ω–µ–ª–µ–π
            panel = db.query(Panel).first()
            
            if not panel:
                # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –æ –ø–∞–Ω–µ–ª—è—Ö –µ—â–µ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–µ
                panel = Panel(quantity=quantity)
                db.add(panel)
                previous_quantity = 0
            else:
                # –ò–Ω–∞—á–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                previous_quantity = panel.quantity
                panel.quantity += quantity
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏
            operation = Operation(
                user_id=user.id,
                operation_type="panel_income",
                quantity=quantity,
                details=json.dumps({
                    "previous_quantity": previous_quantity,
                    "new_quantity": panel.quantity,
                    "is_income": True  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–∏—Ö–æ–¥–∞
                })
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db.add(operation)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            db.commit()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∞–¥–º–∏–Ω–∞
            await state.set_state(MenuState.PRODUCTION_MATERIALS)
            keyboard = await get_role_menu_keyboard(MenuState.PRODUCTION_MATERIALS, message, state)
            
            await message.answer(
                f"‚úÖ –ü—Ä–∏—Ö–æ–¥ –ø–∞–Ω–µ–ª–µ–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç.\n"
                f"–ü—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {previous_quantity} —à—Ç.\n"
                f"–¢–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫: {panel.quantity} —à—Ç.",
                reply_markup=keyboard
            )
        finally:
            db.close()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±—Ä–∞–∫–∞ —Å—Ç—ã–∫–æ–≤
@router.message(ProductionStates.waiting_for_defect_type, F.text == "‚öôÔ∏è –°—Ç—ã–∫")
async def handle_joint_defect(message: Message, state: FSMContext):
    logging.info("–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±—Ä–∞–∫–∞ —Å—Ç—ã–∫–æ–≤ –≤—ã–∑–≤–∞–Ω")
    
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—ã–∫–∏
        joints = db.query(Joint).all()
        if not joints:
            logging.warning("–í –±–∞–∑–µ –Ω–µ—Ç —Å—Ç—ã–∫–æ–≤")
            await message.answer(
                "–í –±–∞–∑–µ –Ω–µ—Ç —Å—Ç—ã–∫–æ–≤.",
                reply_markup=get_menu_keyboard(MenuState.PRODUCTION_MAIN)
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å—Ç—ã–∫–æ–≤ –ø–æ —Ç–∏–ø—É, —Ü–≤–µ—Ç—É –∏ —Ç–æ–ª—â–∏–Ω–µ
        joint_info = {}
        for joint in joints:
            joint_type_name = {
                JointType.BUTTERFLY: "–ë–∞–±–æ—á–∫–∞",
                JointType.SIMPLE: "–ü—Ä–æ—Å—Ç–æ–π", 
                JointType.CLOSING: "–ó–∞–º—ã–∫–∞—é—â–∏–π"
            }[joint.type]
            
            key = f"{joint_type_name} - {joint.color} - {joint.thickness} –º–º"
            joint_info[key] = joint.quantity
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—ã–∫–æ–≤
        joints_info = [f"- {key} (–æ—Å—Ç–∞—Ç–æ–∫: {qty} —à—Ç.)" for key, qty in joint_info.items()]
        
        if joints_info:
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±—Ä–∞–∫–æ–≤–∞–Ω–Ω–æ–≥–æ —Å—Ç—ã–∫–∞:\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n" + "\n".join(joints_info),
                reply_markup=get_joint_type_keyboard()
            )
        else:
            await message.answer(
                "–í –±–∞–∑–µ –Ω–µ—Ç —Å—Ç—ã–∫–æ–≤ —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –æ—Å—Ç–∞—Ç–∫–æ–º.",
                reply_markup=get_menu_keyboard(MenuState.PRODUCTION_MAIN)
            )
            return
    finally:
        db.close()
    
    await state.update_data(defect_type="joint")
    await state.set_state(ProductionStates.waiting_for_defect_joint_type)


# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±—Ä–∞–∫–∞ –∫–ª–µ—è
@router.message(ProductionStates.waiting_for_defect_type, F.text == "üß¥ –ö–ª–µ–π")
async def handle_glue_defect(message: Message, state: FSMContext):
    logging.info("–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±—Ä–∞–∫–∞ –∫–ª–µ—è –≤—ã–∑–≤–∞–Ω")
    
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ—Å—Ç–∞—Ç–æ–∫ –∫–ª–µ—è
        glue = db.query(Glue).first()
        if not glue or glue.quantity <= 0:
            logging.warning("–í –±–∞–∑–µ –Ω–µ—Ç –∫–ª–µ—è")
            await message.answer(
                "–í –±–∞–∑–µ –Ω–µ—Ç –∫–ª–µ—è.",
                reply_markup=get_menu_keyboard(MenuState.PRODUCTION_MAIN)
            )
            return
        
        await message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–∞–∫–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–µ—è (–≤ —à—Ç—É–∫–∞—Ö):\n\n–î–æ—Å—Ç—É–ø–Ω–æ: {glue.quantity} —à—Ç.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
    finally:
        db.close()
    
    await state.update_data(defect_type="glue")
    await state.set_state(ProductionStates.waiting_for_defect_glue_quantity)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Ö–æ–¥–∞ –ø–ª–µ–Ω–∫–∏
@router.message(F.text == "üé® –ü–ª–µ–Ω–∫–∞")
async def handle_film(message: Message, state: FSMContext):
    if not await check_production_access(message):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    current_state = await state.get_state()
    logging.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ü–ª–µ–Ω–∫–∞', —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    
    # –ï—Å–ª–∏ –º—ã –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±—Ä–∞–∫–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –æ–±—Ä–∞–±–æ—Ç–∫—É
    if current_state == ProductionStates.waiting_for_defect_type:
        logging.info("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ handle_film, —Ç–∞–∫ –∫–∞–∫ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –º–µ–Ω—é –±—Ä–∞–∫–∞. –ë—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω handle_film_defect.")
        return
    
    # –ï—Å–ª–∏ –º—ã –Ω–µ –≤ –º–µ–Ω—é –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    if current_state != MenuState.PRODUCTION_MATERIALS:
        logging.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
        return
        
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥ –ø–ª–µ–Ω–∫–∏
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
        resize_keyboard=True
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–ª–µ–Ω–æ–∫
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–µ–Ω–æ–∫
        films = db.query(Film).all()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–ª–µ–Ω–æ–∫, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        film_info_text = ""
        if films:
            film_info = []
            for film in films:
                panel_count = film.calculate_possible_panels()
                film_info.append(
                    f"- {film.code}: {film.total_remaining:.2f}–º (—Ö–≤–∞—Ç–∏—Ç –Ω–∞ ~{panel_count} –ø–∞–Ω–µ–ª–µ–π)"
                )
            film_info_text = "\n\n–ò–º–µ—é—â–∏–µ—Å—è –ø–ª–µ–Ω–∫–∏:\n" + "\n".join(film_info)
        
        await message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–ª–µ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:{film_info_text}",
            reply_markup=keyboard
        )
        
        await state.set_state(ProductionStates.waiting_for_film_code)
    finally:
        db.close()

@router.message(ProductionStates.waiting_for_film_code)
async def process_film_code(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.set_state(MenuState.PRODUCTION_MATERIALS)
        keyboard = await get_role_menu_keyboard(MenuState.PRODUCTION_MATERIALS, message, state)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞:", reply_markup=keyboard)
        return
    
    film_code = message.text.strip()
    
    db = next(get_db())
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–ª–µ–Ω–∫–∏
        film = db.query(Film).filter(Film.code == film_code).first()
        
        # –ï—Å–ª–∏ –ø–ª–µ–Ω–∫–∏ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        if not film:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –ø–ª–µ–Ω–∫–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–¥–æ–º –∏ –Ω—É–ª–µ–≤—ã–º –æ—Å—Ç–∞—Ç–∫–æ–º
            # –ù–ï —É–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –æ–Ω–∏ –±—É–¥—É—Ç –∑–∞–¥–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            film = Film(
                code=film_code,
                total_remaining=0.0     # –¢–æ–ª—å–∫–æ –Ω—É–ª–µ–≤–æ–π –æ—Å—Ç–∞—Ç–æ–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞
            )
            db.add(film)
            db.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º, —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ü–≤–µ—Ç
            await message.answer(
                f"üëç –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ü–≤–µ—Ç –ø–ª–µ–Ω–∫–∏: {film_code}"
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –ø–ª–µ–Ω–∫–∏
        await state.update_data(film_code=film_code)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–ª–æ–Ω–æ–≤
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
        
        await message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–ª–æ–Ω–æ–≤ –ø–ª–µ–Ω–∫–∏ {film_code}:",
            reply_markup=keyboard
        )
        
        await state.set_state(ProductionStates.waiting_for_film_quantity)
    finally:
        db.close()

@router.message(ProductionStates.waiting_for_film_quantity)
async def process_film_quantity(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await handle_film(message, state)
        return
    
    try:
        quantity = float(message.text.strip())
        if quantity <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–ª–æ–Ω–æ–≤
        await state.update_data(film_quantity=quantity)
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä—ã
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–î–∞")],
                [KeyboardButton(text="–ù–µ—Ç")],
                [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        
        await message.answer(
            f"–í—ã —É–∫–∞–∑–∞–ª–∏ {quantity} —Ä—É–ª–æ–Ω–æ–≤ –ø–ª–µ–Ω–∫–∏. –ï—Å—Ç—å –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä—ã (–Ω–µ —Ü–µ–ª—ã–µ —Ä—É–ª–æ–Ω—ã)?",
            reply_markup=keyboard
        )
        
        # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–ª–∏—á–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤
        await state.set_state(ProductionStates.waiting_for_extra_meters_choice)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

# –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –Ω–∞–ª–∏—á–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤
@router.message(ProductionStates.waiting_for_extra_meters_choice)
async def process_extra_meters_choice(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä—É–ª–æ–Ω–æ–≤
        data = await state.get_data()
        film_code = data.get('film_code')
        
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
        
        await message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–ª–æ–Ω–æ–≤ –ø–ª–µ–Ω–∫–∏ {film_code}:",
            reply_markup=keyboard
        )
        
        await state.set_state(ProductionStates.waiting_for_film_quantity)
        return
    
    if message.text == "–î–∞":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
        
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤ –ø–ª–µ–Ω–∫–∏:",
            reply_markup=keyboard
        )
        
        await state.set_state(ProductionStates.waiting_for_loose_meters)
    elif message.text == "–ù–µ—Ç":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –º–µ—Ç—Ä–∞–∂–∞ –≤ —Ä—É–ª–æ–Ω–µ
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
        
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –º–µ—Ç—Ä–∞–∂ –æ–¥–Ω–æ–≥–æ —Ä—É–ª–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 50):",
            reply_markup=keyboard
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º 0 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤
        await state.update_data(loose_meters=0)
        await state.set_state(ProductionStates.waiting_for_film_meters)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'")

# –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤
@router.message(ProductionStates.waiting_for_loose_meters)
async def process_loose_meters(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –Ω–∞–ª–∏—á–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–î–∞")],
                [KeyboardButton(text="–ù–µ—Ç")],
                [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        
        data = await state.get_data()
        quantity = data.get('film_quantity')
        
        await message.answer(
            f"–í—ã —É–∫–∞–∑–∞–ª–∏ {quantity} —Ä—É–ª–æ–Ω–æ–≤ –ø–ª–µ–Ω–∫–∏. –ï—Å—Ç—å –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä—ã (–Ω–µ —Ü–µ–ª—ã–µ —Ä—É–ª–æ–Ω—ã)?",
            reply_markup=keyboard
        )
        
        await state.set_state(ProductionStates.waiting_for_extra_meters_choice)
        return
    
    try:
        loose_meters = float(message.text.strip())
        if loose_meters < 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç—Ä–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤
        await state.update_data(loose_meters=loose_meters)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –º–µ—Ç—Ä–∞–∂–∞ –≤ —Ä—É–ª–æ–Ω–µ
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
        
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –º–µ—Ç—Ä–∞–∂ –æ–¥–Ω–æ–≥–æ —Ä—É–ª–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 50):",
            reply_markup=keyboard
        )
        
        await state.set_state(ProductionStates.waiting_for_film_meters)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

@router.message(ProductionStates.waiting_for_film_meters)
async def process_film_meters(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –º—ã –ø—Ä–∏—à–ª–∏ - —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–µ—Ç—Ä–∞–º–∏ –∏–ª–∏ –±–µ–∑
        data = await state.get_data()
        if "loose_meters" in data:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä loose_meters, –∑–Ω–∞—á–∏—Ç –ø—Ä–∏—à–ª–∏ –ø–æ—Å–ª–µ –µ–≥–æ –≤–≤–æ–¥–∞
            keyboard = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
            
            await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤ –ø–ª–µ–Ω–∫–∏:",
                reply_markup=keyboard
            )
            
            await state.set_state(ProductionStates.waiting_for_loose_meters)
        else:
            # –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–æ–ø—Ä–æ—Å—É –æ –Ω–∞–ª–∏—á–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="–î–∞")],
                    [KeyboardButton(text="–ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
            
            film_quantity = data.get('film_quantity')
            
            await message.answer(
                f"–í—ã —É–∫–∞–∑–∞–ª–∏ {film_quantity} —Ä—É–ª–æ–Ω–æ–≤ –ø–ª–µ–Ω–∫–∏. –ï—Å—Ç—å –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä—ã (–Ω–µ —Ü–µ–ª—ã–µ —Ä—É–ª–æ–Ω—ã)?",
                reply_markup=keyboard
            )
            
            await state.set_state(ProductionStates.waiting_for_extra_meters_choice)
        
        return
    
    try:
        meters = float(message.text.strip())
        if meters <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç—Ä–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
        
        data = await state.get_data()
        film_color = data.get('defect_film_color')
        
        db = next(get_db())
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–ª–µ–Ω–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            film = db.query(Film).filter(Film.code == film_color).first()
            
            if not film:
                await message.answer(f"–û—à–∏–±–∫–∞: –ø–ª–µ–Ω–∫–∞ —Å —Ü–≤–µ—Ç–æ–º {film_color} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return
            
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –±–æ–ª—å—à–µ –º–µ—Ç—Ä–æ–≤, —á–µ–º –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
            if meters > film.total_remaining:
                await message.answer(
                    f"‚ùó –í–Ω–∏–º–∞–Ω–∏–µ: –≤—ã —É–∫–∞–∑–∞–ª–∏ {meters} –º –±—Ä–∞–∫–∞, –Ω–æ –≤ –Ω–∞–ª–∏—á–∏–∏ –≤—Å–µ–≥–æ {film.total_remaining:.1f} –º –ø–ª–µ–Ω–∫–∏."
                )
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º –±—Ä–∞–∫
            previous_remaining = film.total_remaining
            film.total_remaining = max(0, film.total_remaining - meters)
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏
            operation = Operation(
                user_id=user.id,
                operation_type="film_defect",
                quantity=meters,
                details=json.dumps({
                    "film_color": film_color,
                    "previous_remaining": previous_remaining,
                    "new_remaining": film.total_remaining
                })
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db.add(operation)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            db.commit()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –±—Ä–∞–∫–∞
            keyboard = await get_role_menu_keyboard(MenuState.PRODUCTION_MAIN, message, state)
            
            await message.answer(
                f"‚úÖ –ë—Ä–∞–∫ —É—á—Ç–µ–Ω!\n"
                f"–ü–ª–µ–Ω–∫–∞: {film_color}\n"
                f"–°–ø–∏—Å–∞–Ω–æ: {meters} –º\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å: {film.total_remaining:.1f} –º",
                reply_markup=keyboard
            )
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.set_state(MenuState.PRODUCTION_MAIN)
        finally:
            db.close()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

@router.message(ProductionStates.waiting_for_defect_glue_quantity)
async def process_defect_glue_quantity(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±—Ä–∞–∫–∞:",
            reply_markup=get_menu_keyboard(MenuState.PRODUCTION_DEFECT)
        )
        await state.set_state(ProductionStates.waiting_for_defect_type)
        return

    try:
        quantity = int(message.text)
        if quantity <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
        
        db = next(get_db())
        try:
            glue = db.query(Glue).first()
            if not glue:
                await message.answer("–í –±–∞–∑–µ –Ω–µ—Ç –∫–ª–µ—è.")
                return
            
            if glue.quantity < quantity:
                await message.answer(
                    f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–ø–∏—Å–∞—Ç—å {quantity} —à—Ç. –∫–ª–µ—è, –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ {glue.quantity}."
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–ø–µ—Ä–∞—Ü–∏–∏
            operation = Operation(
                user_id=user.id,
                operation_type="glue_defect",
                quantity=quantity,
                details=json.dumps({
                    "previous_quantity": glue.quantity
                })
            )
            db.add(operation)
            
            # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—è
            glue.quantity -= quantity
            db.commit()
            
            await message.answer(
                f"‚úÖ –°–ø–∏—Å–∞–Ω–æ {quantity} —à—Ç. –±—Ä–∞–∫–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–µ—è\n"
                f"–û—Å—Ç–∞—Ç–æ–∫: {glue.quantity} —à—Ç.",
                reply_markup=get_menu_keyboard(MenuState.PRODUCTION_MAIN)
            )
            
        finally:
            db.close()
            
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return
    
    await state.clear()

@router.message(F.text == "üìù –ó–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ")
async def button_order_production(message: Message, state: FSMContext):
    await handle_stock(message, state)

@router.message(F.text == "üì¶ –ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞ —Å–∫–ª–∞–¥")
async def button_order_warehouse(message: Message, state: FSMContext):
    await handle_warehouse_order(message, state)

@router.message(F.text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def handle_my_production_orders(message: Message, state: FSMContext):
    if not await check_production_access(message):
        return
    
    await state.set_state(MenuState.PRODUCTION_ORDERS)
    
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —Å—Ç–∞—Ç—É—Å—É –∏ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
        orders = (
            db.query(ProductionOrder)
            .order_by(
                ProductionOrder.status.asc(),  # –°–Ω–∞—á–∞–ª–∞ new, –ø–æ—Ç–æ–º completed
                ProductionOrder.created_at.desc()
            )
            .all()
        )
        
        if not orders:
            await message.answer(
                "–ù–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ.",
                reply_markup=get_menu_keyboard(MenuState.PRODUCTION)
            )
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É
        new_orders = []
        completed_orders = []
        
        for order in orders:
            if order.status == "new":
                new_orders.append(order)
            elif order.status == "completed":
                completed_orders.append(order)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤
        response = "üìã –ó–∞–∫–∞–∑—ã –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ:\n\n"
        
        # –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
        if new_orders:
            response += "üÜï –ù–û–í–´–ï –ó–ê–ö–ê–ó–´:\n"
            for order in new_orders:
                response += (
                    f"–ó–∞–∫–∞–∑ #{order.id}\n"
                    f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                    f"–ú–µ–Ω–µ–¥–∂–µ—Ä: {order.manager.username}\n"
                    f"–î–µ—Ç–∞–ª–∏:\n"
                    f"- –ö–æ–¥ –ø–ª–µ–Ω–∫–∏: {order.film_color}\n"
                    f"- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π: {order.panel_quantity}\n\n"
                )
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5)
        if completed_orders:
            response += "‚úÖ –í–´–ü–û–õ–ù–ï–ù–ù–´–ï –ó–ê–ö–ê–ó–´ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5):\n"
            for order in completed_orders[:5]:
                completion_date = order.completed_at.strftime('%d.%m.%Y %H:%M') if order.completed_at else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                response += (
                    f"–ó–∞–∫–∞–∑ #{order.id}\n"
                    f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                    f"–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {completion_date}\n"
                    f"–ú–µ–Ω–µ–¥–∂–µ—Ä: {order.manager.username}\n"
                    f"–î–µ—Ç–∞–ª–∏:\n"
                    f"- –ö–æ–¥ –ø–ª–µ–Ω–∫–∏: {order.film_color}\n"
                    f"- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π: {order.panel_quantity}\n\n"
                )
        
        await message.answer(
            response,
            reply_markup=get_menu_keyboard(MenuState.PRODUCTION)
        )
    finally:
        db.close()

@router.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É")
async def handle_back_to_admin(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞"""
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user or user.role != UserRole.SUPER_ADMIN:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–¥–º–∏–Ω–∞
        await state.update_data(is_admin_context=False)
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
        await state.set_state(MenuState.SUPER_ADMIN_MAIN)
        await message.answer(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=get_menu_keyboard(MenuState.SUPER_ADMIN_MAIN)
        )
    finally:
        db.close() 

@router.message(ProductionStates.waiting_for_panel_consumption)
async def process_panel_consumption(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.set_state(ProductionStates.waiting_for_film_color)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ (—Ü–≤–µ—Ç) –ø–ª–µ–Ω–∫–∏:")
        return
    
    try:
        # Parse the panel quantity
        quantity = float(message.text.strip())
        if quantity <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
        
        # Get data from state
        data = await state.get_data()
        film_color = data.get("film_color")
        
        # Ask for loose meters
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø–æ–ª–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞, –±–µ–∑ —Ç–µ–∫—Å—Ç–∞):",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
        await state.update_data(panel_quantity=quantity)
        await state.set_state(ProductionStates.waiting_for_loose_meters)
        
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ø–∞–Ω–µ–ª–µ–π.")

@router.message(ProductionStates.waiting_for_loose_meters)
async def process_loose_meters(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.set_state(ProductionStates.waiting_for_panel_consumption)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π:")
        return
    
    try:
        # Parse the loose meters
        loose_meters = float(message.text.strip())
        if loose_meters < 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø–æ–ª–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
            return
        
        # Get data from state
        data = await state.get_data()
        film_color = data.get("film_color")
        panel_quantity = data.get("panel_quantity")
        
        # Calculate total meters: panel_quantity * 6 + loose_meters
        total_meters = panel_quantity * 6 + loose_meters
        
        db = next(get_db())
        try:
            # Get film from database
            film = db.query(Film).filter(Film.code == film_color).first()
            
            if not film:
                await message.answer(f"–ü–ª–µ–Ω–∫–∞ —Å —Ü–≤–µ—Ç–æ–º '{film_color}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            if film.total_remaining < total_meters:
                await message.answer(
                    f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–ø–∏—Å–∞—Ç—å {total_meters:.1f} –º–µ—Ç—Ä–æ–≤ –ø–ª–µ–Ω–∫–∏, –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ {film.total_remaining:.1f}."
                )
                return
            
            # Get user from database
            user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
            
            # Create operation record
            operation = Operation(
                user_id=user.id,
                operation_type="film_consumption",
                quantity=total_meters,
                details=json.dumps({
                    "film_code": film_color,
                    "panel_quantity": panel_quantity,
                    "loose_meters": loose_meters,
                    "total_meters": total_meters,
                    "previous_remaining": film.total_remaining
                })
            )
            db.add(operation)
            
            # Update film remaining quantity
            film.total_remaining -= total_meters
            db.commit()
            
            await message.answer(
                f"‚úÖ –°–ø–∏—Å–∞–Ω–æ {total_meters:.1f} –º–µ—Ç—Ä–æ–≤ –ø–ª–µ–Ω–∫–∏ —Ü–≤–µ—Ç–∞ {film_color}\n"
                f"–ü–∞–Ω–µ–ª–µ–π: {panel_quantity}\n"
                f"–ù–µ–ø–æ–ª–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤: {loose_meters}\n"
                f"–û—Å—Ç–∞—Ç–æ–∫: {film.total_remaining:.1f} –º",
                reply_markup=get_menu_keyboard(MenuState.PRODUCTION_MAIN)
            )
            
            # Reset state
            await state.clear()
            
        finally:
            db.close()
            
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –Ω–µ–ø–æ–ª–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤.")

@router.message(ProductionStates.waiting_for_defect_film_meters)
async def process_defect_film_meters(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É —Ü–≤–µ—Ç–∞ –ø–ª–µ–Ω–∫–∏
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±—Ä–∞–∫–∞:",
            reply_markup=get_menu_keyboard(MenuState.PRODUCTION_DEFECT)
        )
        await state.set_state(ProductionStates.waiting_for_defect_type)
        return
    
    try:
        meters = float(message.text.strip())
        if meters <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç—Ä–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
        
        # –î–æ—Å—Ç–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        film_color = data.get("defect_film_color")
        
        db = next(get_db())
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–ª–µ–Ω–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            film = db.query(Film).filter(Film.code == film_color).first()
            
            if not film:
                await message.answer(f"–ü–ª–µ–Ω–∫–∞ —Å —Ü–≤–µ—Ç–æ–º '{film_color}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            if film.total_remaining < meters:
                await message.answer(
                    f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–ø–∏—Å–∞—Ç—å {meters} –º–µ—Ç—Ä–æ–≤ –ø–ª–µ–Ω–∫–∏, –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ {film.total_remaining:.1f}."
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–ø–µ—Ä–∞—Ü–∏–∏
            operation = Operation(
                user_id=user.id,
                operation_type="film_defect",
                quantity=meters,
                details=json.dumps({
                    "film_code": film_color,
                    "previous_remaining": film.total_remaining
                })
            )
            db.add(operation)
            
            # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–µ–Ω–∫–∏
            film.total_remaining -= meters
            db.commit()
            
            await message.answer(
                f"‚úÖ –°–ø–∏—Å–∞–Ω–æ {meters} –º–µ—Ç—Ä–æ–≤ –±—Ä–∞–∫–æ–≤–∞–Ω–Ω–æ–π –ø–ª–µ–Ω–∫–∏ —Ü–≤–µ—Ç–∞ {film_color}\n"
                f"–û—Å—Ç–∞—Ç–æ–∫: {film.total_remaining:.1f} –º",
                reply_markup=get_menu_keyboard(MenuState.PRODUCTION_MAIN)
            )
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            
        finally:
            db.close()
            
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return 