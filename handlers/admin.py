from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from models import User, UserRole, Film, Panel, Operation, FinishedProduct, Joint, Glue
from database import get_db
import pandas as pd
from datetime import datetime, timedelta
import json

router = Router()

class AdminStates(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_role = State()
    waiting_for_report_type = State()

@router.message(Command("users"))
async def cmd_users(message: Message, state: FSMContext = None):
    if not await check_super_admin(message):
        return
        
    db = next(get_db())
    try:
        users = db.query(User).all()
        
        response = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for user in users:
            response += f"ID: {user.telegram_id}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username}\n–†–æ–ª—å: {user.role.value}\n\n"
        
        await message.answer(response)
        await message.answer(
            "–î–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /assign_role"
        )
    finally:
        db.close()

@router.message(Command("assign_role"))
async def cmd_assign_role(message: Message, state: FSMContext):
    if not await check_super_admin(message):
        return
        
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å:"
    )
    await state.set_state(AdminStates.waiting_for_user_id)

@router.message(AdminStates.waiting_for_user_id)
async def process_user_id(message: Message, state: FSMContext):
    try:
        user_id = int(message.text)
        await state.update_data(user_id=user_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üëë –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")],
                [KeyboardButton(text="üíº –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º")],
                [KeyboardButton(text="üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ")],
                [KeyboardButton(text="üì¶ –†–æ–ª—å: –°–∫–ª–∞–¥")]
            ],
            resize_keyboard=True
        )
        
        roles_text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
        await message.answer(roles_text, reply_markup=keyboard)
        await state.set_state(AdminStates.waiting_for_role)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.")

@router.message(AdminStates.waiting_for_role)
async def process_role(message: Message, state: FSMContext):
    # –ú–∞–ø–ø–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π
    role_mapping = {
        "üëë –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä": UserRole.SUPER_ADMIN,
        "üíº –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º": UserRole.SALES_MANAGER,
        "üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ": UserRole.PRODUCTION,
        "üì¶ –†–æ–ª—å: –°–∫–ª–∞–¥": UserRole.WAREHOUSE
    }
    
    selected_role = role_mapping.get(message.text)
    
    if not selected_role:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üëë –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")],
                    [KeyboardButton(text="üíº –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º")],
                    [KeyboardButton(text="üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ")],
                    [KeyboardButton(text="üì¶ –†–æ–ª—å: –°–∫–ª–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        return
    
    try:
        data = await state.get_data()
        user_id = data['user_id']
        
        db = next(get_db())
        try:
            user = db.query(User).filter(User.telegram_id == user_id).first()
            
            if user:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                old_role = user.role.value
                user.role = selected_role
                db.commit()
                
                await message.answer(
                    f"‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username} –∏–∑–º–µ–Ω–µ–Ω–∞ —Å {old_role} –Ω–∞ {selected_role.value}\n"
                    f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.telegram_id}",
                    reply_markup=ReplyKeyboardRemove()
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Å–º–µ–Ω–µ —Ä–æ–ª–∏
                try:
                    keyboard = get_role_keyboard(selected_role)
                    await message.bot.send_message(
                        user_id,
                        f"üîÑ –í–∞—à–∞ —Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {selected_role.value}\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:",
                        reply_markup=keyboard
                    )
                except Exception as e:
                    await message.answer(
                        "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n"
                        "–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞."
                    )
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª—å—é
                new_user = User(
                    telegram_id=user_id,
                    username="pending",  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—à–µ—Ç –±–æ—Ç—É
                    role=selected_role
                )
                db.add(new_user)
                db.commit()
                
                await message.answer(
                    f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –∏ —Ä–æ–ª—å—é {selected_role.value}\n"
                    "Username –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –±–æ—Ç—É.",
                    reply_markup=ReplyKeyboardRemove()
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                try:
                    keyboard = get_role_keyboard(selected_role)
                    await message.bot.send_message(
                        user_id,
                        f"üëã –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å: {selected_role.value}\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:",
                        reply_markup=keyboard
                    )
                except Exception as e:
                    await message.answer(
                        "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
                        "–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º."
                    )
        finally:
            db.close()
    except Exception as e:
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏: {str(e)}",
            reply_markup=ReplyKeyboardRemove()
        )
    finally:
        await state.clear()

def get_role_keyboard(role: UserRole) -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    buttons = []
    
    if role == UserRole.SUPER_ADMIN:
        buttons = [
            [KeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"), KeyboardButton(text="üìä –û—Ç—á–µ—Ç—ã")],
            [KeyboardButton(text="üì¶ –°–∫–ª–∞–¥"), KeyboardButton(text="üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ")],
            [KeyboardButton(text="üíº –ü—Ä–æ–¥–∞–∂–∏")]
        ]
    elif role == UserRole.SALES_MANAGER:
        buttons = [
            [KeyboardButton(text="üìù –°–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏")]
        ]
    elif role == UserRole.PRODUCTION:
        buttons = [
            [KeyboardButton(text="üì• –ü—Ä–∏—Ö–æ–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")],
            [KeyboardButton(text="üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ")]
        ]
    elif role == UserRole.WAREHOUSE:
        buttons = [
            [KeyboardButton(text="üì¶ –°–∫–ª–∞–¥")],
            [KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–≥—Ä—É–∑–∫—É")]
        ]
    
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

@router.message(Command("report"))
async def cmd_report(message: Message, state: FSMContext = None):
    if not await check_super_admin(message):
        return
        
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏
        finished_products = db.query(FinishedProduct).join(Film).all()
        inventory = "–¢–µ–∫—É—â–∏–µ –∑–∞–ø–∞—Å—ã –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏:\n\n"
        for product in finished_products:
            inventory += f"–ö–æ–¥ –ø–∞–Ω–µ–ª–∏: {product.film.code}\n"
            inventory += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product.quantity}\n\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø–ª–µ–Ω–∫–∏
        films = db.query(Film).all()
        films_inventory = "–ó–∞–ø–∞—Å—ã –ø–ª–µ–Ω–∫–∏:\n\n"
        for film in films:
            films_inventory += f"–ö–æ–¥: {film.code}\n"
            films_inventory += f"–í –Ω–∞–ª–∏—á–∏–∏ —Ä—É–ª–æ–Ω–æ–≤: {film.in_stock}\n"
            films_inventory += f"–¢–æ–ª—â–∏–Ω–∞ —Ä—É–ª–æ–Ω–∞: {film.roll_thickness} –º–º\n"
            films_inventory += f"–û—Å—Ç–∞—Ç–æ–∫ –≤ —Ä—É–ª–æ–Ω–µ: {film.remaining_in_roll}\n"
            films_inventory += f"–†–∞—Å—Ö–æ–¥ –Ω–∞ –ø–∞–Ω–µ–ª—å: {film.panel_consumption} –º\n"
            films_inventory += f"–ú–æ–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–∞–Ω–µ–ª–µ–π: {film.calculate_possible_panels()}\n\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ —Å—Ç—ã–∫–æ–≤
        joints = db.query(Joint).all()
        joints_inventory = "–ó–∞–ø–∞—Å—ã —Å—Ç—ã–∫–æ–≤:\n\n"
        for joint in joints:
            joints_inventory += f"–¶–≤–µ—Ç: {joint.color}\n"
            joints_inventory += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {joint.quantity}\n\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –∫–ª–µ—è
        glue = db.query(Glue).first()
        glue_inventory = "–ó–∞–ø–∞—Å—ã –∫–ª–µ—è:\n\n"
        if glue:
            glue_inventory += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {glue.quantity}\n\n"
        else:
            glue_inventory += "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏\n\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        operations = db.query(Operation).order_by(Operation.timestamp.desc()).limit(10).all()
        recent_ops = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n\n"
        for op in operations:
            user = db.query(User).filter(User.id == op.user_id).first()
            recent_ops += f"–¢–∏–ø: {op.operation_type}\n"
            recent_ops += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {op.quantity}\n"
            recent_ops += f"–î–∞—Ç–∞: {op.timestamp.strftime('%d.%m.%Y %H:%M')}\n"
            recent_ops += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}\n"
            if op.details:
                details = json.loads(op.details)
                if op.operation_type == "order":
                    recent_ops += f"–ó–∞–∫–∞–∑:\n"
                    recent_ops += f"- –ü–∞–Ω–µ–ª–∏ {details['film_code']}: {details['panel_quantity']} —à—Ç.\n"
                    recent_ops += f"- –°—Ç—ã–∫–∏ {details['joint_color']}: {details['joint_quantity']} —à—Ç.\n"
                    recent_ops += f"- –ö–ª–µ–π: {details['glue_quantity']} —à—Ç.\n"
                    recent_ops += f"- –ú–æ–Ω—Ç–∞–∂: {'–î–∞' if details['installation'] else '–ù–µ—Ç'}\n"
                elif op.operation_type == "income":
                    recent_ops += f"–ü—Ä–∏—Ö–æ–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:\n"
                    recent_ops += f"- –¢–∏–ø: {details.get('material_type', '–ù/–î')}\n"
                    recent_ops += f"- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {details.get('quantity', '–ù/–î')}\n"
            recent_ops += "\n"
        
        await message.answer(inventory)
        await message.answer(films_inventory)
        await message.answer(joints_inventory)
        await message.answer(glue_inventory)
        await message.answer(recent_ops)
    finally:
        db.close()

async def check_super_admin(message: Message) -> bool:
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        
        if not user or user.role != UserRole.SUPER_ADMIN:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return False
        return True
    finally:
        db.close()

@router.message(Command("report"))
async def cmd_report(message: Message, state: FSMContext):
    db = next(get_db())
    user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
    
    if not user or user.role != UserRole.SUPER_ADMIN:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    report_text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:\n\n"
    report_text += "1. –û—Å—Ç–∞—Ç–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n"
    report_text += "2. –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∑–∞ –ø–µ—Ä–∏–æ–¥\n"
    report_text += "3. –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π\n"
    
    await state.set_state(AdminStates.waiting_for_report_type)
    await message.answer(report_text)

@router.message(AdminStates.waiting_for_report_type)
async def process_report_type(message: Message, state: FSMContext):
    db = next(get_db())
    report_type = message.text
    
    if report_type == "1":
        # –û—Å—Ç–∞—Ç–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        colors = db.query(Color).all()
        panels = db.query(Panel).all()
        films = db.query(Film).all()
        finished = db.query(FinishedProduct).all()
        
        report = "üìä –û—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º:\n\n"
        report += "üé® –¶–≤–µ—Ç–∞:\n"
        for color in colors:
            report += f"- {color.marking}: {color.length}–º (—Ç–æ–ª—â–∏–Ω–∞ {color.thickness}–º–º)\n"
        
        report += "\nüì¶ –ü–∞–Ω–µ–ª–∏:\n"
        for panel in panels:
            report += f"- {panel.quantity} —à—Ç.\n"
        
        report += "\nüéû –ü–ª–µ–Ω–∫–∞:\n"
        for film in films:
            report += f"- {film.remaining_length}–º –∏–∑ {film.total_length}–º\n"
        
        report += "\n‚úÖ –ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è:\n"
        for product in finished:
            color = db.query(Color).filter(Color.id == product.color_id).first()
            report += f"- {color.marking}: {product.quantity} —à—Ç.\n"
        
        await message.answer(report)
        
    elif report_type == "2":
        # –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∑–∞ –ø–µ—Ä–∏–æ–¥
        today = datetime.now()
        week_ago = today - timedelta(days=7)
        
        production = db.query(Operation).filter(
            Operation.type == "production",
            Operation.created_at >= week_ago
        ).all()
        
        report = "üìä –û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É –∑–∞ –Ω–µ–¥–µ–ª—é:\n\n"
        for op in production:
            color = db.query(Color).filter(Color.id == op.color_id).first()
            report += f"- {op.created_at.strftime('%d.%m.%Y')}: {color.marking} - {op.quantity} —à—Ç.\n"
        
        await message.answer(report)
        
    elif report_type == "3":
        # –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
        operations = db.query(Operation).order_by(Operation.created_at.desc()).limit(20).all()
        
        report = "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:\n\n"
        for op in operations:
            user = db.query(User).filter(User.id == op.user_id).first()
            report += f"- {op.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            report += f"  –¢–∏–ø: {op.type}\n"
            report += f"  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}\n"
            report += f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {op.quantity}\n\n"
        
        await message.answer(report)
    
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ—Ç—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1, 2 –∏–ª–∏ 3.")
        return
    
    await state.clear() 