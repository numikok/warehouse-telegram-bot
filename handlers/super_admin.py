from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from models import User, UserRole, Operation, Order, CompletedOrder, Film, Joint, Glue, ProductionOrder, OrderStatus, UserSource, Role, Panel, FinishedProduct, OperationType, JointType
from database import get_db
import json
from datetime import datetime, timedelta
from navigation import MenuState, get_menu_keyboard, go_back
import logging
import re
from handlers.warehouse import handle_stock

router = Router()

class SuperAdminStates(StatesGroup):
    waiting_for_report_type = State()
    waiting_for_backup = State()
    waiting_for_notification_settings = State()
    waiting_for_new_user_id = State()
    waiting_for_target_user_id = State()
    waiting_for_role = State()
    waiting_for_film_code = State()
    waiting_for_film_quantity = State()
    waiting_for_joint_type = State()
    waiting_for_joint_color = State()
    waiting_for_joint_quantity = State()
    waiting_for_glue_quantity = State()
    waiting_for_user_to_reset = State()
    waiting_for_user_to_delete = State()

def get_main_keyboard() -> ReplyKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")],
            [KeyboardButton(text="üìä –û—Ç—á–µ—Ç—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")],
            [KeyboardButton(text="üíº –†–æ–ª—å –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞")],
            [KeyboardButton(text="üì¶ –†–æ–ª—å —Å–∫–ª–∞–¥–æ–≤—â–∏–∫–∞")],
            [KeyboardButton(text="üè≠ –†–æ–ª—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞")]
        ],
        resize_keyboard=True
    )

@router.message(F.text == "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
async def handle_user_management(message: Message, state: FSMContext):
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user or user.role != UserRole.SUPER_ADMIN:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        await state.set_state(MenuState.SUPER_ADMIN_USERS)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_menu_keyboard(MenuState.SUPER_ADMIN_USERS)
        )
    finally:
        db.close()

@router.message(F.text == "üìä –û—Ç—á–µ—Ç—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def handle_reports(message: Message, state: FSMContext):
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user or user.role != UserRole.SUPER_ADMIN:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        await state.set_state(MenuState.SUPER_ADMIN_REPORTS)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
            reply_markup=get_menu_keyboard(MenuState.SUPER_ADMIN_REPORTS)
        )
    finally:
        db.close()

@router.message(F.text == "üì¶ –†–æ–ª—å —Å–∫–ª–∞–¥–∞")
async def handle_warehouse_role(message: Message, state: FSMContext):
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user or user.role != UserRole.SUPER_ADMIN:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —á—Ç–æ —ç—Ç–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥—Ä—É–≥–æ–π —Ä–æ–ª–∏
        await state.update_data(is_admin_context=True)
        await state.set_state(MenuState.WAREHOUSE_MAIN)
        await message.answer(
            "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Ä–æ–ª—å —Å–∫–ª–∞–¥–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:",
            reply_markup=get_menu_keyboard(MenuState.WAREHOUSE_MAIN, is_admin_context=True)
        )
    finally:
        db.close()

@router.message(F.text == "üè≠ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–º")
async def handle_production_management(message: Message, state: FSMContext):
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user or user.role != UserRole.SUPER_ADMIN:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        await state.set_state(MenuState.SUPER_ADMIN_PRODUCTION)
        await message.answer(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–º:",
            reply_markup=get_menu_keyboard(MenuState.SUPER_ADMIN_PRODUCTION)
        )
    finally:
        db.close()

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
async def handle_system_settings(message: Message, state: FSMContext):
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user or user.role != UserRole.SUPER_ADMIN:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        await state.set_state(MenuState.SUPER_ADMIN_SETTINGS)
        await message.answer(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã:",
            reply_markup=get_menu_keyboard(MenuState.SUPER_ADMIN_SETTINGS)
        )
    finally:
        db.close()

@router.message(F.text == "üíº –†–æ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º")
async def handle_sales_role(message: Message, state: FSMContext):
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user or user.role != UserRole.SUPER_ADMIN:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —á—Ç–æ —ç—Ç–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥—Ä—É–≥–æ–π —Ä–æ–ª–∏
        await state.update_data(is_admin_context=True)
        await state.set_state(MenuState.SALES_MAIN)
        await message.answer(
            "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Ä–æ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:",
            reply_markup=get_menu_keyboard(MenuState.SALES_MAIN, is_admin_context=True)
        )
    finally:
        db.close()

@router.message(F.text == "üè≠ –†–æ–ª—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞")
async def handle_production_role(message: Message, state: FSMContext):
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user or user.role != UserRole.SUPER_ADMIN:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —á—Ç–æ —ç—Ç–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥—Ä—É–≥–æ–π —Ä–æ–ª–∏
        await state.update_data(is_admin_context=True)
        await state.set_state(MenuState.PRODUCTION_MAIN)
        await message.answer(
            "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Ä–æ–ª—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:",
            reply_markup=get_menu_keyboard(MenuState.PRODUCTION_MAIN, is_admin_context=True)
        )
    finally:
        db.close()

@router.message(F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def handle_back(message: Message, state: FSMContext):
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
            return
        
        next_menu, keyboard = await go_back(state, user.role)
        await state.set_state(next_menu)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
    finally:
        db.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
@router.message(F.text == "üì¶ –û—Å—Ç–∞—Ç–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
async def handle_materials_report(message: Message, state: FSMContext):
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    await handle_stock(message, state)

@router.message(F.text == "üí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂")
async def handle_sales_report(message: Message, state: FSMContext):
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user or user.role != UserRole.SUPER_ADMIN:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        thirty_days_ago = datetime.now() - timedelta(days=30)
        completed_orders = db.query(CompletedOrder).filter(
            CompletedOrder.completed_at >= thirty_days_ago
        ).all()
        
        report = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –∑–∞ 30 –¥–Ω–µ–π:\n\n"
        
        total_panels = sum(order.panel_quantity for order in completed_orders)
        total_joints = sum(order.joint_quantity for order in completed_orders)
        total_glue = sum(order.glue_quantity for order in completed_orders)
        
        report += f"–í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(completed_orders)}\n"
        report += f"–û—Ç–≥—Ä—É–∂–µ–Ω–æ –ø–∞–Ω–µ–ª–µ–π: {total_panels} —à—Ç.\n"
        report += f"–û—Ç–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—ã–∫–æ–≤: {total_joints} —à—Ç.\n"
        report += f"–û—Ç–≥—Ä—É–∂–µ–Ω–æ –∫–ª–µ—è: {total_glue} —à—Ç.\n"
        
        await message.answer(report, reply_markup=get_menu_keyboard(MenuState.SUPER_ADMIN_REPORTS))
    finally:
        db.close()

@router.message(F.text == "üè≠ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞")
async def handle_production_report(message: Message, state: FSMContext):
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user or user.role != UserRole.SUPER_ADMIN:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        thirty_days_ago = datetime.now() - timedelta(days=30)
        production_orders = db.query(ProductionOrder).filter(
            ProductionOrder.created_at >= thirty_days_ago
        ).all()
        
        report = "üè≠ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∑–∞ 30 –¥–Ω–µ–π:\n\n"
        
        total_panels = sum(order.panel_quantity for order in production_orders)
        completed_orders = [order for order in production_orders if order.status == "completed"]
        completed_panels = sum(order.panel_quantity for order in completed_orders)
        
        report += f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: {len(production_orders)}\n"
        report += f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(completed_orders)}\n"
        report += f"–ó–∞–∫–∞–∑–∞–Ω–æ –ø–∞–Ω–µ–ª–µ–π: {total_panels} —à—Ç.\n"
        report += f"–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ –ø–∞–Ω–µ–ª–µ–π: {completed_panels} —à—Ç.\n"
        
        await message.answer(report, reply_markup=get_menu_keyboard(MenuState.SUPER_ADMIN_REPORTS))
    finally:
        db.close()

@router.message(F.text == "üìù –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π")
async def handle_operations_history(message: Message, state: FSMContext):
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user or user.role != UserRole.SUPER_ADMIN:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –æ–ø–µ—Ä–∞—Ü–∏–π
        operations = db.query(Operation).order_by(
            Operation.timestamp.desc()
        ).limit(20).all()
        
        report = "üìù –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:\n\n"
        
        for op in operations:
            performer = db.query(User).filter(User.id == op.user_id).first()
            
            report += (
                f"–û–ø–µ—Ä–∞—Ü–∏—è #{op.id}\n"
                f"üìÖ {op.timestamp.strftime('%d.%m.%Y %H:%M')}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {performer.username if performer else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}\n"
                f"üîÑ –¢–∏–ø: {op.operation_type}\n"
                f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {op.quantity}\n"
                "-------------------\n"
            )
        
        await message.answer(report, reply_markup=get_menu_keyboard(MenuState.SUPER_ADMIN_REPORTS))
    finally:
        db.close()

@router.message(F.text == "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã")
async def handle_completed_orders(message: Message, state: FSMContext):
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user or user.role != UserRole.SUPER_ADMIN:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        completed_orders = db.query(CompletedOrder).order_by(
            CompletedOrder.completed_at.desc()
        ).limit(10).all()
        
        report = "‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n\n"
        
        for order in completed_orders:
            manager = db.query(User).filter(User.id == order.manager_id).first()
            warehouse = db.query(User).filter(User.id == order.warehouse_user_id).first()
            
            installation_status = "‚úÖ –î–∞" if order.installation_required else "‚ùå –ù–µ—Ç"
            
            report += (
                f"–ó–∞–∫–∞–∑ #{order.order_id}\n"
                f"üìÖ {order.completed_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: {manager.username if manager else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}\n"
                f"üì¶ –°–∫–ª–∞–¥: {warehouse.username if warehouse else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}\n"
                f"üé® –ü–ª–µ–Ω–∫–∞: {order.film_code}\n"
                f"üìä –ü–∞–Ω–µ–ª–∏: {order.panel_quantity} —à—Ç.\n"
                f"‚öôÔ∏è –°—Ç—ã–∫–∏: {order.joint_color} - {order.joint_quantity} —à—Ç.\n"
                f"üß™ –ö–ª–µ–π: {order.glue_quantity} —à—Ç.\n"
                f"üîß –ú–æ–Ω—Ç–∞–∂: {installation_status}\n"
                "-------------------\n"
            )
        
        await message.answer(report, reply_markup=get_menu_keyboard(MenuState.SUPER_ADMIN_REPORTS))
    finally:
        db.close()

@router.message(F.text == "üìã –ó–∞–∫–∞–∑—ã –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ")
async def handle_production_orders(message: Message, state: FSMContext):
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user or user.role != UserRole.SUPER_ADMIN:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
        production_orders = db.query(ProductionOrder).order_by(
            ProductionOrder.created_at.desc()
        ).limit(10).all()
        
        report = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ:\n\n"
        
        for order in production_orders:
            manager = db.query(User).filter(User.id == order.manager_id).first()
            
            report += (
                f"–ó–∞–∫–∞–∑ #{order.id}\n"
                f"üìÖ {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: {manager.username if manager else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}\n"
                f"üé® –ü–ª–µ–Ω–∫–∞: {order.film_color}\n"
                f"üìä –ü–∞–Ω–µ–ª–∏: {order.panel_quantity} —à—Ç.\n"
                f"üì¶ –°—Ç–∞—Ç—É—Å: {order.status}\n"
                "-------------------\n"
            )
        
        await message.answer(report, reply_markup=get_menu_keyboard(MenuState.SUPER_ADMIN_REPORTS))
    finally:
        db.close()

@router.message(F.text == "üì§ –ó–∞–∫–∞–∑—ã –Ω–∞ –æ—Ç–≥—Ä—É–∑–∫—É")
async def handle_shipping_orders(message: Message, state: FSMContext):
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user or user.role != UserRole.SUPER_ADMIN:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –Ω–∞ –æ—Ç–≥—Ä—É–∑–∫—É
        orders = db.query(Order).filter(Order.status == OrderStatus.NEW).all()
        
        report = "üì§ –ó–∞–∫–∞–∑—ã –Ω–∞ –æ—Ç–≥—Ä—É–∑–∫—É:\n\n"
        
        for order in orders:
            manager = db.query(User).filter(User.id == order.manager_id).first()
            
            installation_status = "‚úÖ –î–∞" if order.installation_required else "‚ùå –ù–µ—Ç"
            
            report += (
                f"–ó–∞–∫–∞–∑ #{order.id}\n"
                f"üìÖ {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: {manager.username if manager else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}\n"
                f"üé® –ü–ª–µ–Ω–∫–∞: {order.film_code}\n"
                f"üìä –ü–∞–Ω–µ–ª–∏: {order.panel_quantity} —à—Ç.\n"
                f"‚öôÔ∏è –°—Ç—ã–∫–∏: {order.joint_color} - {order.joint_quantity} —à—Ç.\n"
                f"üß™ –ö–ª–µ–π: {order.glue_quantity} —à—Ç.\n"
                f"üîß –ú–æ–Ω—Ç–∞–∂: {installation_status}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {order.customer_phone}\n"
                f"üìç –ê–¥—Ä–µ—Å: {order.delivery_address}\n"
                "-------------------\n"
            )
        
        await message.answer(report, reply_markup=get_menu_keyboard(MenuState.SUPER_ADMIN_REPORTS))
    finally:
        db.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
@router.message(F.text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def handle_reset_role(message: Message, state: FSMContext):
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if user and user.role == UserRole.SUPER_ADMIN:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = db.query(User).all()
            
            if not users:
                await message.answer("–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
                return
                
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            keyboard = []
            for u in users:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ä–æ–ª–∏
                if u.role != UserRole.SUPER_ADMIN and u.role != UserRole.NONE:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ä–æ–ª—å –∏ ID –Ω–∞ –∫–Ω–æ–ø–∫—É
                    keyboard.append([KeyboardButton(text=f"{u.username} - {u.role.value} (ID: {u.telegram_id})")])
                
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard.append([KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")])
                
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ä–æ–ª—å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å:",
                reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
            )
            await state.set_state(SuperAdminStates.waiting_for_user_to_reset)
    finally:
        db.close()

@router.message(SuperAdminStates.waiting_for_user_to_reset)
async def process_reset_role(message: Message, state: FSMContext):
    db = next(get_db())
    try:
        admin = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if admin and admin.role == UserRole.SUPER_ADMIN:
            if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
                await state.clear()
                await message.answer(
                    "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                    reply_markup=get_menu_keyboard(MenuState.SUPER_ADMIN_USERS)
                )
                return
                
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ (—Ñ–æ—Ä–º–∞—Ç: "–∏–º—è - —Ä–æ–ª—å (ID: —á–∏—Å–ª–æ–≤–æ–π_id)")
            try:
                # –ù–∞—Ö–æ–¥–∏–º ID –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
                match = re.search(r'ID: (\d+)', message.text)
                if match:
                    target_user_id = int(match.group(1))
                else:
                    await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    return
            except Exception:
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            target_user = db.query(User).filter(User.telegram_id == target_user_id).first()
            if not target_user:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
                await state.clear()
                return
            
            # –ó–∞–ø—Ä–µ—â–∞–µ–º —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å —Ä–æ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
            if target_user.role == UserRole.SUPER_ADMIN:
                await message.answer("‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å —Ä–æ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                await state.clear()
                return

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ NONE
            target_user.role = UserRole.NONE
            db.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Å–±—Ä–æ—Å–µ —Ä–æ–ª–∏
            try:
                await message.bot.send_message(
                    chat_id=target_user.telegram_id,
                    text="–í–∞—à–∞ —Ä–æ–ª—å –±—ã–ª–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ä–æ–ª–∏.",
                    reply_markup=ReplyKeyboardRemove()
                )
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user.telegram_id}: {str(e)}")

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            await message.answer(
                f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user.username} —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞.",
                reply_markup=get_menu_keyboard(MenuState.SUPER_ADMIN_USERS)
            )
            await state.clear()
    finally:
        db.close()

@router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def handle_list_users(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if user and user.role == UserRole.SUPER_ADMIN:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = db.query(User).all()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(user_list_page=1, users_per_page=10, total_users=len(users))
            
            await display_user_page(message, state, users, 1)
    finally:
        db.close()

async def display_user_page(message: Message, state: FSMContext, users, page: int):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    users_per_page = data.get('users_per_page', 10)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * users_per_page
    end_idx = min(start_idx + users_per_page, len(users))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    response = f"üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}):\n\n"
    
    for i in range(start_idx, end_idx):
        user = users[i]
        response += f"ID: {user.telegram_id}\n"
        response += f"–ò–º—è: {user.username}\n"
        response += f"–†–æ–ª—å: {user.role.value}\n"
        response += f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        response += "---------------------\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    keyboard = []
    
    if page > 1:
        keyboard.append([KeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")])
    
    if end_idx < len(users):
        keyboard.append([KeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")])
    
    keyboard.append([KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")])
    
    await message.answer(
        response,
        reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    )

@router.message(F.text == "‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
async def handle_prev_page(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if user and user.role == UserRole.SUPER_ADMIN:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            current_page = data.get('user_list_page', 1)
            
            if current_page > 1:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                users = db.query(User).all()
                await state.update_data(user_list_page=current_page - 1)
                await display_user_page(message, state, users, current_page - 1)
    finally:
        db.close()

@router.message(F.text == "‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
async def handle_next_page(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if user and user.role == UserRole.SUPER_ADMIN:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            current_page = data.get('user_list_page', 1)
            users_per_page = data.get('users_per_page', 10)
            total_users = data.get('total_users', 0)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            if (current_page * users_per_page) < total_users:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                users = db.query(User).all()
                await state.update_data(user_list_page=current_page + 1)
                await display_user_page(message, state, users, current_page + 1)
    finally:
        db.close()

@router.message(F.text == "üë§ –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å")
async def handle_assign_role(message: Message, state: FSMContext):
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if user and user.role == UserRole.SUPER_ADMIN:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = db.query(User).all()
            
            if not users:
                await message.answer("–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
                return
                
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            keyboard = []
            for u in users:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ ID –Ω–∞ –∫–Ω–æ–ø–∫—É
                keyboard.append([KeyboardButton(text=f"{u.username} (ID: {u.telegram_id})")])
                
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard.append([KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")])
                
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å:",
                reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
            )
            await state.set_state(SuperAdminStates.waiting_for_target_user_id)
    finally:
        db.close()

@router.message(SuperAdminStates.waiting_for_target_user_id)
async def process_role_assignment(message: Message, state: FSMContext):
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if user and user.role == UserRole.SUPER_ADMIN:
            if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
                await state.clear()
                await message.answer(
                    "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                    reply_markup=get_menu_keyboard(MenuState.SUPER_ADMIN_USERS)
                )
                return
                
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ (—Ñ–æ—Ä–º–∞—Ç: "–∏–º—è (ID: —á–∏—Å–ª–æ–≤–æ–π_id)")
            try:
                # –ù–∞—Ö–æ–¥–∏–º ID –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
                match = re.search(r'ID: (\d+)', message.text)
                if match:
                    target_user_id = int(match.group(1))
                else:
                    await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    return
            except Exception:
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            target_user = db.query(User).filter(User.telegram_id == target_user_id).first()
            if not target_user:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
                await state.clear()
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(target_user_id=target_user_id)

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–æ–ª—è–º–∏ (–∫—Ä–æ–º–µ NONE)
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text=role.value) for role in UserRole if role != UserRole.NONE],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )

            await state.set_state(SuperAdminStates.waiting_for_role)
            await message.answer(
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user.username}:",
                reply_markup=keyboard
            )
    finally:
        db.close()

@router.message(SuperAdminStates.waiting_for_role)
async def process_role_selection(message: Message, state: FSMContext):
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if user and user.role == UserRole.SUPER_ADMIN:
            if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
                await state.clear()
                await message.answer(
                    "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                    reply_markup=get_menu_keyboard(MenuState.SUPER_ADMIN_USERS)
                )
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            data = await state.get_data()
            target_user_id = data.get("target_user_id")

            # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ä–æ–ª—å
            selected_role = None
            for role in UserRole:
                if role.value == message.text:
                    selected_role = role
                    break

            if not selected_role:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞.")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            target_user = db.query(User).filter(User.telegram_id == target_user_id).first()
            if target_user:
                target_user.role = selected_role
                db.commit()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏
                try:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
                    user_keyboard = get_menu_keyboard(MenuState.SUPER_ADMIN_MAIN if selected_role == UserRole.SUPER_ADMIN else
                                                     MenuState.SALES_MAIN if selected_role == UserRole.SALES_MANAGER else
                                                     MenuState.WAREHOUSE_MAIN if selected_role == UserRole.WAREHOUSE else
                                                     MenuState.PRODUCTION_MAIN)
                    
                    await message.bot.send_message(
                        chat_id=target_user.telegram_id,
                        text=f"–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å: {selected_role.value}.\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.",
                        reply_markup=user_keyboard
                    )
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user.telegram_id}: {str(e)}")

                keyboard = ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="üë§ –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å")],
                        [KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")],
                        [KeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")],
                        [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                    ],
                    resize_keyboard=True
                )
                await message.answer(
                    f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user.username} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {selected_role.value}",
                    reply_markup=keyboard
                )
            else:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")

            await state.clear()
    finally:
        db.close() 