from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from models import User, UserRole, ProductionOrder, Film, Panel, FinishedProduct, Operation, OrderStatus
from database import get_db
import logging
from datetime import datetime
from navigation import MenuState, get_menu_keyboard
import json

router = Router()

class ProductionOrderStates(StatesGroup):
    waiting_for_panel_thickness = State()
    waiting_for_panel_quantity = State()
    waiting_for_film_color = State()

async def notify_production_users(bot, order_id: int, panel_quantity: int, panel_thickness: float, film_color: str, manager_id: int):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é PRODUCTION –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ."""
    db = next(get_db())
    try:
        production_users = db.query(User).filter(User.role == UserRole.PRODUCTION).all()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
        manager = db.query(User).filter(User.id == manager_id).first()
        manager_name = manager.username if manager else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä"
        
        for user in production_users:
            await bot.send_message(
                user.telegram_id,
                f"üì¢ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ #{order_id}!\n"
                f"–ú–µ–Ω–µ–¥–∂–µ—Ä: {manager_name}\n"
                f"–¢–æ–ª—â–∏–Ω–∞ –ø–∞–Ω–µ–ª–µ–π: {panel_thickness} –º–º\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π: {panel_quantity}\n"
                f"–¶–≤–µ—Ç –ø–ª–µ–Ω–∫–∏: {film_color}",
                parse_mode="Markdown"
            )
    finally:
        db.close()

@router.message(F.text == "üìù –ó–∞–∫–∞–∑–∞—Ç—å")
async def handle_production_order(message: Message, state: FSMContext):
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user or user.role != UserRole.SALES_MANAGER:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ.", parse_mode="Markdown")
            return
            
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—â–∏–Ω—É –ø–∞–Ω–µ–ª–µ–π –¥–ª—è –∑–∞–∫–∞–∑–∞
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="0.5")],
                [KeyboardButton(text="0.8")],
                [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        
        await message.answer(
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—â–∏–Ω—É –ø–∞–Ω–µ–ª–µ–π –¥–ª—è –∑–∞–∫–∞–∑–∞ (–º–º).\n"
            "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–∞–º –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Ü–≤–µ—Ç–∞ –ø–ª–µ–Ω–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ–ª—â–∏–Ω—ã:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await state.set_state(ProductionOrderStates.waiting_for_panel_thickness)
    finally:
        db.close()

@router.message(ProductionOrderStates.waiting_for_panel_thickness)
async def process_panel_thickness(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
        await state.clear()
        return
    
    try:
        thickness = float(message.text)
        if thickness not in [0.5, 0.8]:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—â–∏–Ω—É 0.5 –∏–ª–∏ 0.8 –º–º.", parse_mode="Markdown")
            return
            
        await state.update_data(panel_thickness=thickness)
        
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            ),
            parse_mode="Markdown"
        )
        await state.set_state(ProductionOrderStates.waiting_for_panel_quantity)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (0.5 –∏–ª–∏ 0.8).", parse_mode="Markdown")

@router.message(ProductionOrderStates.waiting_for_panel_quantity)
async def process_panel_quantity(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–æ–ª—â–∏–Ω—ã –ø–∞–Ω–µ–ª–∏
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="0.5")],
                [KeyboardButton(text="0.8")],
                [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—â–∏–Ω—É –ø–∞–Ω–µ–ª–µ–π –¥–ª—è –∑–∞–∫–∞–∑–∞ (–º–º):",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await state.set_state(ProductionOrderStates.waiting_for_panel_thickness)
        return
        
    try:
        quantity = int(message.text)
        if quantity <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.", parse_mode="Markdown")
            return
            
        await state.update_data(panel_quantity=quantity)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        selected_thickness = data["panel_thickness"]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –ø–ª–µ–Ω–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ–ª—â–∏–Ω—ã
        db = next(get_db())
        try:
            # –ò—â–µ–º —Ü–≤–µ—Ç–∞, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –≥–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ–ª—â–∏–Ω–æ–π
            available_films = db.query(Film.code).join(FinishedProduct).filter(
                FinishedProduct.thickness == selected_thickness
            ).distinct().all()
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏ —Å —Ç–∞–∫–æ–π —Ç–æ–ª—â–∏–Ω–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞
            if not available_films:
                available_films = db.query(Film.code).distinct().all()
            
            film_colors = [film[0] for film in available_films]
            
            if not film_colors:
                await message.answer("–í –±–∞–∑–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –ø–ª–µ–Ω–∫–∏.", parse_mode="Markdown")
                await state.clear()
                return
                
            keyboard = [[KeyboardButton(text=color)] for color in film_colors]
            keyboard.append([KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")])
            
            await message.answer(
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –ø–ª–µ–Ω–∫–∏ –¥–ª—è –ø–∞–Ω–µ–ª–µ–π —Ç–æ–ª—â–∏–Ω–æ–π {selected_thickness} –º–º:",
                reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True),
                parse_mode="Markdown"
            )
            await state.set_state(ProductionOrderStates.waiting_for_film_color)
        finally:
            db.close()
            
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.", parse_mode="Markdown")
        return

@router.message(ProductionOrderStates.waiting_for_film_color)
async def process_film_color(message: Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π:", parse_mode="Markdown")
        await state.set_state(ProductionOrderStates.waiting_for_panel_quantity)
        return
        
    data = await state.get_data()
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order = ProductionOrder(
            manager_id=user.id,
            panel_quantity=data["panel_quantity"],
            panel_thickness=data["panel_thickness"],
            film_color=message.text,
            status="new"
        )
        db.add(order)
        db.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
        await notify_production_users(
            message.bot,
            order.id,
            data["panel_quantity"],
            data["panel_thickness"],
            message.text,
            user.id  # –ü–µ—Ä–µ–¥–∞–µ–º id –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
        )
        
        await message.answer(
            f"‚úÖ –ó–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω!\n"
            f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{order.id}\n"
            f"–¢–æ–ª—â–∏–Ω–∞ –ø–∞–Ω–µ–ª–µ–π: {data['panel_thickness']} –º–º\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π: {data['panel_quantity']}\n"
            f"–¶–≤–µ—Ç –ø–ª–µ–Ω–∫–∏: {message.text}",
            parse_mode="Markdown"
        )
    finally:
        db.close()
    
    await state.clear()

@router.message(F.text == "üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def handle_my_orders(message: Message, state: FSMContext):
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω—É–∂–Ω—É—é —Ä–æ–ª—å (–ª–∏–±–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ, –ª–∏–±–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω)
        if not user or (user.role != UserRole.PRODUCTION and user.role != UserRole.SUPER_ADMIN):
            logging.info(f"–û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} —Å —Ä–æ–ª—å—é {user.role if user else 'None'}")
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ.", parse_mode="Markdown")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        orders = db.query(ProductionOrder).filter(
            ProductionOrder.status.in_(["new", "in_progress"])
        ).order_by(ProductionOrder.created_at.desc()).all()
        
        if not orders:
            await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ.", parse_mode="Markdown")
            return
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∑–∞–∫–∞–∑–æ–≤
        keyboard = []
        for order in orders:
            keyboard.append([KeyboardButton(text=f"‚úÖ –ó–∞–∫–∞–∑ #{order.id} –≥–æ—Ç–æ–≤")])
        keyboard.append([KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤
        message_text = "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ:\n\n"
        for order in orders:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
            manager = db.query(User).filter(User.id == order.manager_id).first()
            manager_name = manager.username if manager else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä"
            
            status = "üÜï –ù–æ–≤—ã–π" if order.status == OrderStatus.NEW.value else "üîÑ –í —Ä–∞–±–æ—Ç–µ"
            message_text += (
                f"–ó–∞–∫–∞–∑ #{order.id} ({status})\n"
                f"–ú–µ–Ω–µ–¥–∂–µ—Ä: {manager_name}\n"
                f"–¢–æ–ª—â–∏–Ω–∞ –ø–∞–Ω–µ–ª–µ–π: {order.panel_thickness} –º–º\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π: {order.panel_quantity}\n"
                f"–¶–≤–µ—Ç –ø–ª–µ–Ω–∫–∏: {order.film_color}\n"
                f"–°–æ–∑–¥–∞–Ω: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer(
            message_text,
            reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True),
            parse_mode="Markdown"
        )
    finally:
        db.close()

@router.message(F.text.startswith("‚úÖ –ó–∞–∫–∞–∑ #"))
async def handle_order_completed(message: Message, state: FSMContext):
    try:
        order_id_str = message.text.split("#")[1].strip()
        order_id = int(order_id_str.split()[0])  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "123 –≥–æ—Ç–æ–≤"
    except (IndexError, ValueError):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞.", parse_mode="Markdown")
        return
        
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω—É–∂–Ω—É—é —Ä–æ–ª—å (–ª–∏–±–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ, –ª–∏–±–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω)
        if not user or (user.role != UserRole.PRODUCTION and user.role != UserRole.SUPER_ADMIN):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤.", parse_mode="Markdown")
            return
            
        order = db.query(ProductionOrder).filter(ProductionOrder.id == order_id).first()
        if not order:
            await message.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="Markdown")
            return
            
        if order.status == OrderStatus.COMPLETED.value:
            await message.answer("–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.", parse_mode="Markdown")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞–Ω–µ–ª–µ–π
        panels_available = db.query(Panel).filter(Panel.thickness == order.panel_thickness).first()
        if not panels_available or panels_available.quantity < order.panel_quantity:
            await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–Ω–µ–ª–µ–π –Ω–∞ —Å–∫–ª–∞–¥–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.", parse_mode="Markdown")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–ª–µ–Ω–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
        film = db.query(Film).filter(Film.code == order.film_color).first()
        if not film:
            await message.answer("–ü–ª–µ–Ω–∫–∞ —Å —Ç–∞–∫–∏–º —Ü–≤–µ—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", parse_mode="Markdown")
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        order.status = OrderStatus.COMPLETED.value
        order.completed_at = datetime.now()
        order.completed_by = user.id
        db.commit()
        
        await message.answer(
            f"‚úÖ –ó–∞–∫–∞–∑ #{order.id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π!\n"
            f"–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ {order.panel_quantity} –ø–∞–Ω–µ–ª–µ–π —Å –ø–ª–µ–Ω–∫–æ–π {order.film_color} –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n\n"
            f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ –ø–ª–µ–Ω–∫–∏ –≤ —Å–∫–ª–∞–¥—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–µ.",
            parse_mode="Markdown"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂
        manager = db.query(User).filter(User.id == order.manager_id).first()
        if manager:
            try:
                await message.bot.send_message(
                    manager.telegram_id,
                    f"‚úÖ –ó–∞–∫–∞–∑ #{order.id} –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n"
                    f"–¢–æ–ª—â–∏–Ω–∞ –ø–∞–Ω–µ–ª–µ–π: {order.panel_thickness} –º–º\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π: {order.panel_quantity}\n"
                    f"–¶–≤–µ—Ç –ø–ª–µ–Ω–∫–∏: {order.film_color}\n\n"
                    f"–ì–æ—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–∫–ª–∞–¥.",
                    parse_mode="Markdown"
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É: {e}")
        
        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π
        panels_available.quantity -= order.panel_quantity
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –∂—É—Ä–Ω–∞–ª
        operation = Operation(
            user_id=user.id,
            operation_type=OperationType.PRODUCTION.value,
            quantity=order.panel_quantity,
            details=json.dumps({
                "order_id": order.id,
                "film_color": order.film_color,
                "panel_thickness": order.panel_thickness
            })
        )
        db.add(operation)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—É—é –ø—Ä–æ–¥—É–∫—Ü–∏—é –Ω–∞ —Å–∫–ª–∞–¥
        finished_product_exists = db.query(FinishedProduct).filter(
            FinishedProduct.film_id == film.id,
            FinishedProduct.thickness == order.panel_thickness
        ).first()
        
        if finished_product_exists:
            finished_product_exists.quantity += order.panel_quantity
        else:
            finished_product = FinishedProduct(
                film_id=film.id,
                quantity=order.panel_quantity,
                thickness=order.panel_thickness
            )
            db.add(finished_product)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–µ–π—Å—è –ø–ª–µ–Ω–∫–∏
        film.total_remaining -= film.panel_consumption * order.panel_quantity
        if film.total_remaining < 0:
            film.total_remaining = 0
            
        db.commit()
        
    finally:
        db.close()