from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from models import User, UserRole, Film, Panel, Joint, Glue, FinishedProduct, Operation, JointType, Order, ProductionOrder, OrderStatus, OrderJoint, OrderGlue, OperationType, OrderItem
from database import get_db
import json
import logging
from navigation import MenuState, get_menu_keyboard, go_back
import re
from states import SalesStates
from database import get_db
import json
import logging
from navigation import MenuState, get_menu_keyboard, go_back
import re
from states import SalesStates

router = Router()

def get_joint_type_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="ü¶ã –ë–∞–±–æ—á–∫–∞")],
            [KeyboardButton(text="üîÑ –ü—Ä–æ—Å—Ç—ã–µ")],
            [KeyboardButton(text="üîí –ó–∞–º—ã–∫–∞—é—â–∏–µ")],
            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

def get_joint_thickness_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="0.5")],
            [KeyboardButton(text="0.8")],
            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

async def check_sales_access(message: Message) -> bool:
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user or (user.role != UserRole.SALES_MANAGER and user.role != UserRole.SUPER_ADMIN):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return False
        return True
    finally:
        db.close()

@router.message(F.text == "üìù –°–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑")
async def handle_create_order(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    if not await check_sales_access(message):
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–ª–∞–≥ –∞–¥–º–∏–Ω-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    state_data = await state.get_data()
    is_admin_context = state_data.get("is_admin_context", False)
    selected_products = state_data.get("selected_products", [])
    selected_joints = state_data.get("selected_joints", [])
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–¥–º–∏–Ω-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–Ω–æ–≤–∞
    if is_admin_context:
        await state.update_data(is_admin_context=True)
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ —Å—Ç—ã–∫–∏
    await state.update_data(selected_products=selected_products)
    await state.update_data(selected_joints=selected_joints)
    
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–ª—â–∏–Ω –ø–∞–Ω–µ–ª–µ–π, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –≥–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è
        thicknesses = db.query(FinishedProduct.thickness).distinct().all()
        available_thicknesses = [str(thickness[0]) for thickness in thicknesses]
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–ª—â–∏–Ω, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        if not available_thicknesses:
            await message.answer(
                "–ù–∞ —Å–∫–ª–∞–¥–µ –Ω–µ—Ç –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É.",
                reply_markup=get_menu_keyboard(MenuState.SALES_MAIN, is_admin_context=is_admin_context)
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç–æ–ª—â–∏–Ω–∞–º–∏
        keyboard_rows = []
        for thickness in available_thicknesses:
            keyboard_rows.append([KeyboardButton(text=thickness)])
        keyboard_rows.append([KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")])
        
        keyboard = ReplyKeyboardMarkup(
            keyboard=keyboard_rows,
            resize_keyboard=True
        )
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—â–∏–Ω—É –ø–∞–Ω–µ–ª–µ–π (–º–º):",
            reply_markup=keyboard
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤
        if not selected_products:
            await state.update_data(selected_products=[])
        if not selected_joints:
            await state.update_data(selected_joints=[])
            
        await state.set_state(SalesStates.product_thickness)
    finally:
        db.close()

@router.message(SalesStates.product_thickness)
async def process_product_thickness(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–ª—â–∏–Ω—ã –ø–∞–Ω–µ–ª–µ–π"""
    thickness_text = message.text.strip()
    
    if thickness_text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        state_data = await state.get_data()
        is_admin_context = state_data.get("is_admin_context", False)
        
        await state.set_state(MenuState.SALES_MAIN)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_menu_keyboard(MenuState.SALES_MAIN, is_admin_context=is_admin_context)
        )
        return
    
    try:
        thickness = float(thickness_text)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–æ–ª—â–∏–Ω—É
        await state.update_data(current_thickness=thickness)
        
        db = next(get_db())
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ–ª—â–∏–Ω—ã
            finished_products = db.query(FinishedProduct).join(Film).filter(
                FinishedProduct.thickness == thickness,
                FinishedProduct.quantity > 0
            ).all()
            
            if not finished_products:
                await message.answer(
                    f"–î–ª—è —Ç–æ–ª—â–∏–Ω—ã {thickness} –º–º –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ.",
                    reply_markup=ReplyKeyboardMarkup(
                        keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
                        resize_keyboard=True
                    )
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏ –ø–ª–µ–Ω–∫–∏ –¥–ª—è —ç—Ç–æ–π —Ç–æ–ª—â–∏–Ω—ã
            keyboard_rows = []
            for product in finished_products:
                keyboard_rows.append([KeyboardButton(
                    text=f"{product.film.code} (–æ—Å—Ç–∞—Ç–æ–∫: {product.quantity} —à—Ç.)"
                )])
            
            keyboard_rows.append([KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")])
            keyboard = ReplyKeyboardMarkup(keyboard=keyboard_rows, resize_keyboard=True)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞
            products_info = "\n".join([
                f"- {product.film.code}: {product.quantity} —à—Ç."
                for product in finished_products
            ])
            
            await message.answer(
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –ø–ª–µ–Ω–∫–∏ (—Ç–æ–ª—â–∏–Ω–∞ {thickness} –º–º):\n\n{products_info}",
                reply_markup=keyboard
            )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ü–≤–µ—Ç–∞
            await state.set_state(SalesStates.selecting_products)
            
        finally:
            db.close()
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ç–æ–ª—â–∏–Ω—É –ø–∞–Ω–µ–ª–µ–π –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )

@router.message(SalesStates.selecting_products)
async def process_selecting_products(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞ –ø–ª–µ–Ω–∫–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
    film_text = message.text.strip()
    
    if film_text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–æ–ª—â–∏–Ω—ã
        await handle_create_order(message, state)
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –ø–ª–µ–Ω–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤–∏–¥–∞ "–ö–æ–¥ (–æ—Å—Ç–∞—Ç–æ–∫: X —à—Ç.)"
    if "(" in film_text:
        film_code = film_text.split("(")[0].strip()
    else:
        film_code = film_text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ–¥ –ø–ª–µ–Ω–∫–∏
    await state.update_data(current_film_code=film_code)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–æ–ª—â–∏–Ω—É
    data = await state.get_data()
    thickness = data.get('current_thickness')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    db = next(get_db())
    try:
        product = db.query(FinishedProduct).join(Film).filter(
            Film.code == film_code,
            FinishedProduct.thickness == thickness,
            FinishedProduct.quantity > 0
        ).first()
        
        if not product:
            await message.answer(
                f"–ü—Ä–æ–¥—É–∫—Ç —Å –∫–æ–¥–æ–º {film_code} –∏ —Ç–æ–ª—â–∏–Ω–æ–π {thickness} –º–º –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –Ω–∞ —Å–∫–ª–∞–¥–µ.",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
                    resize_keyboard=True
                )
            )
            return
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        await message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π (–¥–æ—Å—Ç—É–ø–Ω–æ: {product.quantity} —à—Ç.):",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        await state.set_state(SalesStates.product_quantity)
        
    finally:
        db.close()

@router.message(SalesStates.product_quantity)
async def process_product_quantity(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞–Ω–µ–ª–µ–π"""
    quantity_text = message.text.strip()
    
    if quantity_text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ü–≤–µ—Ç–∞
        data = await state.get_data()
        thickness = data.get('current_thickness')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–Ω–æ–≤–∞ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ–ª—â–∏–Ω—ã
        db = next(get_db())
        try:
            finished_products = db.query(FinishedProduct).join(Film).filter(
                FinishedProduct.thickness == thickness,
                FinishedProduct.quantity > 0
            ).all()
            
            keyboard_rows = []
            for product in finished_products:
                keyboard_rows.append([KeyboardButton(
                    text=f"{product.film.code} (–æ—Å—Ç–∞—Ç–æ–∫: {product.quantity} —à—Ç.)"
                )])
            
            keyboard_rows.append([KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")])
            keyboard = ReplyKeyboardMarkup(keyboard=keyboard_rows, resize_keyboard=True)
            
            products_info = "\n".join([
                f"- {product.film.code}: {product.quantity} —à—Ç."
                for product in finished_products
            ])
            
            await message.answer(
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –ø–ª–µ–Ω–∫–∏ (—Ç–æ–ª—â–∏–Ω–∞ {thickness} –º–º):\n\n{products_info}",
                reply_markup=keyboard
            )
            
            await state.set_state(SalesStates.selecting_products)
        finally:
            db.close()
        return
    
    try:
        quantity = int(quantity_text)
        if quantity <= 0:
            await message.answer(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
                    resize_keyboard=True
                )
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ
        data = await state.get_data()
        film_code = data.get('current_film_code')
        thickness = data.get('current_thickness')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
        db = next(get_db())
        try:
            product = db.query(FinishedProduct).join(Film).filter(
                Film.code == film_code,
                FinishedProduct.thickness == thickness
            ).first()
            
            if not product or product.quantity < quantity:
                available = product.quantity if product else 0
                await message.answer(
                    f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ (–∑–∞–ø—Ä–æ—à–µ–Ω–æ: {quantity} —à—Ç., –¥–æ—Å—Ç—É–ø–Ω–æ: {available} —à—Ç.)",
                    reply_markup=ReplyKeyboardMarkup(
                        keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
                        resize_keyboard=True
                    )
                )
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É
            selected_products = data.get('selected_products', [])
            product_key = f"{film_code}|{thickness}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ
            for i, product_data in enumerate(selected_products):
                if product_data.get('key') == product_key:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    selected_products[i]['quantity'] = quantity
                    break
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
                selected_products.append({
                    'key': product_key,
                    'film_code': film_code,
                    'thickness': thickness,
                    'quantity': quantity
                })
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(selected_products=selected_products)
            
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø—Ä–æ–¥—É–∫—Ç—ã
            await message.answer(
                f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∑–∞–∫–∞–∑: –ø–∞–Ω–µ–ª–∏ —Å –ø–ª–µ–Ω–∫–æ–π {film_code}, —Ç–æ–ª—â–∏–Ω–∞ {thickness} –º–º - {quantity} —à—Ç.\n\n"
                f"–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø—Ä–æ–¥—É–∫—Ü–∏—é –≤ –∑–∞–∫–∞–∑?",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                        [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                    ],
                    resize_keyboard=True
                )
            )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤—ã–±–æ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ—â–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            await state.set_state(SalesStates.add_more_products)
            
        finally:
            db.close()
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )

@router.message(SalesStates.add_more_products)
async def process_add_more_products(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ—â–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    response = message.text.strip()
    
    if response == "‚úÖ –î–∞":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–æ–ª—â–∏–Ω—ã
        await handle_create_order(message, state)
        return
    elif response == "‚ùå –ù–µ—Ç":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª –¥–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É (—Å—Ç—ã–∫–∏)
        data = await state.get_data()
        selected_products = data.get('selected_products', [])
        
        if not selected_products:
            # –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            await message.answer(
                "–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∑–∞–∫–∞–∑. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ü–∏—é."
            )
            await handle_create_order(message, state)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
        products_info = "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n"
        for product in selected_products:
            products_info += f"‚ñ™Ô∏è {product['film_code']} (—Ç–æ–ª—â–∏–Ω–∞ {product['thickness']} –º–º): {product['quantity']} —à—Ç.\n"
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—ã–∫–æ–≤
        await message.answer(
            f"{products_info}\n\n–¢—Ä–µ–±—É—é—Ç—Å—è –ª–∏ —Å—Ç—ã–∫–∏?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—Ç—ã–∫–æ–≤
        await state.set_state(SalesStates.waiting_for_need_joints)
        
    elif response == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        data = await state.get_data()
        film_code = data.get('current_film_code')
        thickness = data.get('current_thickness')
        
        db = next(get_db())
        try:
            product = db.query(FinishedProduct).join(Film).filter(
                Film.code == film_code,
                FinishedProduct.thickness == thickness
            ).first()
            
            available = product.quantity if product else 0
            
            await message.answer(
                f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π (–¥–æ—Å—Ç—É–ø–Ω–æ: {available} —à—Ç.):",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
                    resize_keyboard=True
                )
            )
            
            await state.set_state(SalesStates.product_quantity)
        finally:
            db.close()
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: ‚úÖ –î–∞, ‚ùå –ù–µ—Ç –∏–ª–∏ ‚óÄÔ∏è –ù–∞–∑–∞–¥",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )

@router.message(SalesStates.waiting_for_need_joints)
async def process_need_joints(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—ã–∫–æ–≤"""
    response = message.text.strip()
    
    if response == "‚úÖ –î–∞":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Å—Ç—ã–∫–∏
        await state.update_data(need_joints=True)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—ã–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = next(get_db())
        try:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç—ã–∫–∏ –ø–æ —Ç–∏–ø—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            butterfly_joints = db.query(Joint).filter(Joint.type == JointType.BUTTERFLY, Joint.quantity > 0).all()
            simple_joints = db.query(Joint).filter(Joint.type == JointType.SIMPLE, Joint.quantity > 0).all()
            closing_joints = db.query(Joint).filter(Joint.type == JointType.CLOSING, Joint.quantity > 0).all()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—ã–∫–∞—Ö
            joints_info = "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—ã–∫–∏:\n\n"
            
            if butterfly_joints:
                joints_info += "ü¶ã –ë–∞–±–æ—á–∫–∞:\n"
                for thickness in [0.5, 0.8]:
                    thickness_joints = [j for j in butterfly_joints if j.thickness == thickness]
                    if thickness_joints:
                        joints_info += f"  {thickness} –º–º: "
                        joints_info += ", ".join([f"{j.color} ({j.quantity} —à—Ç.)" for j in thickness_joints])
                        joints_info += "\n"
            
            if simple_joints:
                joints_info += "üîÑ –ü—Ä–æ—Å—Ç—ã–µ:\n"
                for thickness in [0.5, 0.8]:
                    thickness_joints = [j for j in simple_joints if j.thickness == thickness]
                    if thickness_joints:
                        joints_info += f"  {thickness} –º–º: "
                        joints_info += ", ".join([f"{j.color} ({j.quantity} —à—Ç.)" for j in thickness_joints])
                        joints_info += "\n"
            
            if closing_joints:
                joints_info += "üîí –ó–∞–º—ã–∫–∞—é—â–∏–µ:\n"
                for thickness in [0.5, 0.8]:
                    thickness_joints = [j for j in closing_joints if j.thickness == thickness]
                    if thickness_joints:
                        joints_info += f"  {thickness} –º–º: "
                        joints_info += ", ".join([f"{j.color} ({j.quantity} —à—Ç.)" for j in thickness_joints])
                        joints_info += "\n"
            
            if not butterfly_joints and not simple_joints and not closing_joints:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ç—ã–∫–æ–≤, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
                await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —Å–∫–ª–∞–¥–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—ã–∫–æ–≤.")
                await state.update_data(need_joints=False)
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –æ –∫–ª–µ–µ
                keyboard = ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                        [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                    ],
                    resize_keyboard=True
                )
                await message.answer(
                    "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –∫–ª–µ–π?",
                    reply_markup=keyboard
                )
                await state.set_state(SalesStates.waiting_for_need_glue)
                return
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø —Å—Ç—ã–∫–∞
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="ü¶ã –ë–∞–±–æ—á–∫–∞")] if butterfly_joints else [],
                    [KeyboardButton(text="üîÑ –ü—Ä–æ—Å—Ç—ã–µ")] if simple_joints else [],
                    [KeyboardButton(text="üîí –ó–∞–º—ã–∫–∞—é—â–∏–µ")] if closing_joints else [],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
            
            await message.answer(
                joints_info + "\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç—ã–∫–∞:",
                reply_markup=keyboard
            )
            await state.set_state(SalesStates.waiting_for_order_joint_type)
        finally:
            db.close()
    elif response == "‚ùå –ù–µ—Ç":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ö–æ—á–µ—Ç —Å—Ç—ã–∫–∏
        await state.update_data(need_joints=False)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –æ –∫–ª–µ–µ
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        await message.answer(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –∫–ª–µ–π?",
            reply_markup=keyboard
        )
        await state.set_state(SalesStates.waiting_for_order_installation)
    elif response == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–æ–ø—Ä–æ—Å—É –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        data = await state.get_data()
        selected_products = data.get('selected_products', [])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        products_info = "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n"
        for product in selected_products:
            products_info += f"‚ñ™Ô∏è {product['film_code']} (—Ç–æ–ª—â–∏–Ω–∞ {product['thickness']} –º–º): {product['quantity']} —à—Ç.\n"
        
        await message.answer(
            f"{products_info}\n\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø—Ä–æ–¥—É–∫—Ü–∏—é –≤ –∑–∞–∫–∞–∑?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(SalesStates.add_more_products)
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: ‚úÖ –î–∞, ‚ùå –ù–µ—Ç –∏–ª–∏ ‚óÄÔ∏è –ù–∞–∑–∞–¥",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )

@router.message(SalesStates.waiting_for_add_more_joints)
async def process_add_more_joints(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –µ—â–µ —Å—Ç—ã–∫–æ–≤"""
    response = message.text.strip()
    
    if response == "‚úÖ –î–∞":
        installation_required = True
    elif response == "‚ùå –ù–µ—Ç":
        installation_required = False
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: ‚úÖ –î–∞ –∏–ª–∏ ‚ùå –ù–µ—Ç",
            reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–Ω—Ç–∞–∂–µ
    await state.update_data(installation_required=installation_required)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:",
        reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
    )
    await state.set_state(SalesStates.waiting_for_order_customer_phone)

@router.message(SalesStates.waiting_for_order_delivery_address)
async def process_order_delivery_address(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    address = message.text.strip()
    
    # –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω, —Å—á–∏—Ç–∞–µ–º —Å–∞–º–æ–≤—ã–≤–æ–∑–æ–º
    if address.lower() == "–Ω–µ—Ç":
        address = "–°–∞–º–æ–≤—ã–≤–æ–∑"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
    await state.update_data(delivery_address=address)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
    selected_products = data.get('selected_products', [])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—ã–∫–∞—Ö
    selected_joints = data.get('selected_joints', [])
    
    need_joints = data.get('need_joints', False)
    need_glue = data.get('need_glue', False)
    glue_quantity = data.get('glue_quantity', 0)
    installation_required = data.get('installation_required', False)
    customer_phone = data.get('customer_phone', '')
    delivery_address = data.get('delivery_address', '')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
    order_summary = f"üìù –°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–∞:\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
    if selected_products:
        order_summary += f"üì¶ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n"
        total_panels = 0
        for product in selected_products:
            order_summary += f"‚ñ™Ô∏è {product['film_code']} (—Ç–æ–ª—â–∏–Ω–∞ {product['thickness']} –º–º): {product['quantity']} —à—Ç.\n"
            total_panels += product['quantity']
        order_summary += f"–í—Å–µ–≥–æ –ø–∞–Ω–µ–ª–µ–π: {total_panels} —à—Ç.\n\n"
    else:
        order_summary += "–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—ã–∫–∞—Ö
    if need_joints and selected_joints:
        order_summary += f"üîó –°—Ç—ã–∫–∏:\n"
        for joint in selected_joints:
            joint_type = joint.get('type', '')
            joint_type_text = ''
            if joint_type == 'butterfly' or joint_type == JointType.BUTTERFLY:
                joint_type_text = "–ë–∞–±–æ—á–∫–∞"
            elif joint_type == 'simple' or joint_type == JointType.SIMPLE:
                joint_type_text = "–ü—Ä–æ—Å—Ç—ã–µ"
            elif joint_type == 'closing' or joint_type == JointType.CLOSING:
                joint_type_text = "–ó–∞–º—ã–∫–∞—é—â–∏–µ"
            
            thickness = joint.get('thickness', '0.5')
            order_summary += f"‚ñ™Ô∏è {joint_type_text}, {thickness} –º–º, {joint.get('color', '')}: {joint.get('quantity', 0)} —à—Ç.\n"
        order_summary += "\n"
    else:
        order_summary += f"üîó –°—Ç—ã–∫–∏: –ù–µ—Ç\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    order_summary += f"üß¥ –ö–ª–µ–π: {glue_quantity} —Ç—é–±–∏–∫–æ–≤\n"
    order_summary += f"üîß –ú–æ–Ω—Ç–∞–∂: {'–¢—Ä–µ–±—É–µ—Ç—Å—è' if installation_required else '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}\n"
    order_summary += f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: {customer_phone}\n"
    order_summary += f"üöö –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_address}\n"
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await state.update_data(order_summary=order_summary)
    await state.set_state(MenuState.SALES_ORDER_CONFIRM)
    
    await message.answer(
        order_summary + "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:",
        reply_markup=get_menu_keyboard(MenuState.SALES_ORDER_CONFIRM)
    )
    await state.set_state(SalesStates.waiting_for_order_confirmation)

@router.message(SalesStates.waiting_for_order_confirmation)
async def process_order_confirmation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    if message.text.lower() != "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        await message.answer("–ó–∞–∫–∞–∑ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞ –ø–æ–∑–∂–µ.")
        await go_back(message, state)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    selected_products = data.get("selected_products", [])
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—ã–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    selected_joints = data.get("selected_joints", [])
    
    need_joints = selected_joints and len(selected_joints) > 0
    need_glue = data.get("need_glue", False)
    customer_phone = data.get("customer_phone", "")
    delivery_address = data.get("delivery_address", "")
    installation_required = data.get("installation_required", False)
    glue_quantity = data.get("glue_quantity", 0)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–∫–∞–∑–∞ (–≥–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è –∏–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ)
    db = next(get_db())
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ ID –≤ –±–∞–∑–µ
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        
        if not user:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            db.close()
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order = Order(
            manager_id=user.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∞ –Ω–µ telegram_id
            customer_phone=customer_phone,
            delivery_address=delivery_address,
            installation_required=installation_required,
            status=OrderStatus.NEW
        )
        db.add(order)
        db.flush()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ OrderItem
        for product in selected_products:
            film_code = product['film_code']
            thickness = float(product['thickness'])
            qty = product['quantity']
            
            film = db.query(Film).filter(Film.code == film_code).first()
            if not film:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è
            finished_product = db.query(FinishedProduct).join(Film).filter(
                Film.code == film_code,
                FinishedProduct.thickness == thickness
            ).first()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å OrderItem
            order_item = OrderItem(
                order_id=order.id,
                color=film_code,
                thickness=thickness,
                quantity=qty
            )
            db.add(order_item)
            
            if finished_product and finished_product.quantity >= qty:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –≥–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è, —É–º–µ–Ω—å—à–∞–µ–º –µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                finished_product.quantity -= qty
                
                # –°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏
                operation = Operation(
                    operation_type=OperationType.READY_PRODUCT_OUT.value,
                    quantity=qty,
                    user_id=user.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
                )
                db.add(operation)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏, —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
                production_order = ProductionOrder(
                    manager_id=user.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
                    panel_quantity=qty,
                    film_color=film_code,
                    panel_thickness=thickness,
                    status="new"
                )
                db.add(production_order)
        
        # –ï—Å–ª–∏ –Ω—É–∂–Ω—ã —Å—Ç—ã–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –∑–∞–∫–∞–∑
        if need_joints:
            if isinstance(selected_joints, list):
                # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç - —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ —Å—Ç—ã–∫–æ–≤
                for joint_data in selected_joints:
                    joint_type_val = joint_data.get('type')
                    thickness = joint_data.get('thickness')
                    color = joint_data.get('color')
                    quantity = joint_data.get('quantity')
                    
                    joint_type_text = ""
                    if joint_type_val == JointType.BUTTERFLY or joint_type_val == "butterfly":
                        joint_type_text = "–ë–∞–±–æ—á–∫–∞"
                    elif joint_type_val == JointType.SIMPLE or joint_type_val == "simple":
                        joint_type_text = "–ü—Ä–æ—Å—Ç—ã–µ"
                    elif joint_type_val == JointType.CLOSING or joint_type_val == "closing":
                        joint_type_text = "–ó–∞–º—ã–∫–∞—é—â–∏–µ"
                    
                    joints_info += f"‚ñ™Ô∏è {joint_type_text}, {thickness} –º–º, {color}: {quantity} —à—Ç.\n"
            elif isinstance(selected_joints, dict):
                # –°–ª–æ–≤–∞—Ä—å (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
                for joint_key, quantity in selected_joints.items():
                    joint_type_val, thickness, color = joint_key.split('|')
                    joint_type_text = ""
                    if joint_type_val == "butterfly":
                        joint_type_text = "–ë–∞–±–æ—á–∫–∞"
                    elif joint_type_val == "simple":
                        joint_type_text = "–ü—Ä–æ—Å—Ç—ã–µ"
                    elif joint_type_val == "closing":
                        joint_type_text = "–ó–∞–º—ã–∫–∞—é—â–∏–µ"
                    
                    joints_info += f"‚ñ™Ô∏è {joint_type_text}, {thickness} –º–º, {color}: {quantity} —à—Ç.\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–µ–µ –µ—Å–ª–∏ –æ–Ω –Ω—É–∂–µ–Ω
        glue_info = ""
        if need_glue and glue_quantity > 0:
            glue_info = f"\n–ö–ª–µ–π: {glue_quantity} —à—Ç.\n"
        
        # –°–±–æ—Ä–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        installation_text = "–î–∞" if installation_required else "–ù–µ—Ç"
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
        confirmation_message = (
            f"‚úÖ –ó–∞–∫–∞–∑ #{order.id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
            f"{products_info}"
            f"{joints_info}"
            f"{glue_info}"
            f"–ú–æ–Ω—Ç–∞–∂: {installation_text}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {customer_phone}\n"
            f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_address}\n\n"
            f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {order.status.value}"
        )
        
        await message.answer(confirmation_message)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await go_back(message, state)
    
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        db.close()

@router.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É")
async def handle_back_to_admin(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞"""
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user or user.role != UserRole.SUPER_ADMIN:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–¥–º–∏–Ω–∞
        await state.update_data(is_admin_context=False)
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
        await state.set_state(MenuState.SUPER_ADMIN_MAIN)
        await message.answer(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=get_menu_keyboard(MenuState.SUPER_ADMIN_MAIN)
        )
    finally:
        db.close()

@router.message(SalesStates.waiting_for_need_glue)
async def process_need_glue(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–ª–µ—è"""
    response = message.text.strip()
    
    if response == "‚úÖ –î–∞":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∫–ª–µ–π
        await state.update_data(need_glue=True)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—è
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª–µ—è –≤ –±–∞–∑–µ
        db = next(get_db())
        try:
            glue = db.query(Glue).filter(Glue.quantity > 0).first()
            
            if not glue:
                await message.answer(
                    "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–ª–µ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ.",
                    reply_markup=ReplyKeyboardMarkup(
                        keyboard=[
                            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                        ],
                        resize_keyboard=True
                    )
                )
                return
            
            await message.answer(
                f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—é–±–∏–∫–æ–≤ –∫–ª–µ—è (–¥–æ—Å—Ç—É–ø–Ω–æ: {glue.quantity} —à—Ç.):",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                    ],
                    resize_keyboard=True
                )
            )
            await state.set_state(SalesStates.waiting_for_order_glue_quantity)
        finally:
            db.close()
    elif response == "‚ùå –ù–µ—Ç":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ö–æ—á–µ—Ç –∫–ª–µ–π
        await state.update_data(need_glue=False, glue_quantity=0)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –æ –º–æ–Ω—Ç–∞–∂–µ
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        await message.answer(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –º–æ–Ω—Ç–∞–∂?",
            reply_markup=keyboard
        )
        await state.set_state(SalesStates.waiting_for_order_installation)
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: ‚úÖ –î–∞ –∏–ª–∏ ‚ùå –ù–µ—Ç",
            reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
        )

@router.message(SalesStates.waiting_for_order_glue_quantity)
async def process_order_glue_quantity(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–µ—è"""
    try:
        quantity = int(message.text.strip())
        if quantity <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–ª–µ–µ
        data = await state.get_data()
        glue_quantity = quantity
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—è
        await state.update_data(glue_quantity=glue_quantity)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –æ –º–æ–Ω—Ç–∞–∂–µ
        await message.answer(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –º–æ–Ω—Ç–∞–∂?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(SalesStates.waiting_for_order_installation)
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )

@router.message(SalesStates.waiting_for_order_glue_needed)
async def process_order_glue_needed(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–ª–µ—è –¥–ª—è —Å—Ç—ã–∫–æ–≤"""
    user_choice = message.text.strip()
    
    if user_choice == "‚úÖ –î–∞":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª–µ—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = next(get_db())
        try:
            glue = db.query(Glue).filter(Glue.quantity > 0).first()
            
            if not glue:
                await message.answer(
                    "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–ª–µ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ.",
                    reply_markup=ReplyKeyboardMarkup(
                        keyboard=[
                            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                        ],
                        resize_keyboard=True
                    )
                )
                return
            
            await message.answer(
                f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—é–±–∏–∫–æ–≤ –∫–ª–µ—è (–¥–æ—Å—Ç—É–ø–Ω–æ: {glue.quantity} —à—Ç.):",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                    ],
                    resize_keyboard=True
                )
            )
            await state.set_state(SalesStates.waiting_for_order_glue_quantity)
        finally:
            db.close()
    elif user_choice == "‚ùå –ù–µ—Ç":
        # –ö–ª–µ–π –Ω–µ –Ω—É–∂–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω—É–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        await state.update_data(glue_quantity=0)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –æ –º–æ–Ω—Ç–∞–∂–µ
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        await message.answer(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –º–æ–Ω—Ç–∞–∂?",
            reply_markup=keyboard
        )
        await state.set_state(SalesStates.waiting_for_order_installation)
    else:
        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )

@router.message(SalesStates.waiting_for_order_installation)
async def process_order_installation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–Ω—Ç–∞–∂–∞"""
    response = message.text.strip()
    
    if response == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É - –∑–∞–ø—Ä–æ—Å—É –æ –∫–ª–µ–µ
        await message.answer(
            "–í–∞–º –Ω—É–∂–µ–Ω –∫–ª–µ–π?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞")],
                    [KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(SalesStates.waiting_for_order_glue_needed)
        return

    installation_required = False
    if response == "‚úÖ –î–∞":
        installation_required = True
    elif response == "‚ùå –ù–µ—Ç":
        installation_required = False
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞")],
                    [KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    await state.update_data(installation_required=installation_required)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:",
        reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
    )
    await state.set_state(SalesStates.waiting_for_order_customer_phone)

@router.message(SalesStates.waiting_for_order_customer_phone)
async def process_order_customer_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
    phone = message.text.strip()
    
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É - –∑–∞–ø—Ä–æ—Å—É –æ –º–æ–Ω—Ç–∞–∂–µ
        await message.answer(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –º–æ–Ω—Ç–∞–∂?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞")],
                    [KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(SalesStates.waiting_for_order_installation)
        return
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not phone or len(phone) < 5:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
            reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.update_data(customer_phone=phone)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç' –µ—Å–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑):",
        reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
    )
    await state.set_state(SalesStates.waiting_for_order_delivery_address)

@router.message(SalesStates.waiting_for_order_joint_type)
async def process_order_joint_type(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å—Ç—ã–∫–∞"""
    user_choice = message.text.strip()
    
    if user_choice == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–æ–ø—Ä–æ—Å—É –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—ã–∫–æ–≤
        await message.answer(
            "–ù—É–∂–Ω—ã –ª–∏ —Å—Ç—ã–∫–∏?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(SalesStates.waiting_for_need_joints)
        return
    
    joint_type_map = {
        "ü¶ã –±–∞–±–æ—á–∫–∞": JointType.BUTTERFLY,
        "üîÑ –ø—Ä–æ—Å—Ç—ã–µ": JointType.SIMPLE,
        "üîí –∑–∞–º—ã–∫–∞—é—â–∏–µ": JointType.CLOSING,
        "ü¶ã –±–∞–±–æ—á–∫–∞": JointType.BUTTERFLY,
        "üîÑ –ø—Ä–æ—Å—Ç—ã–µ": JointType.SIMPLE,
        "üîí –∑–∞–º—ã–∫–∞—é—â–∏–µ": JointType.CLOSING
    }
    
    joint_type = None
    for key in joint_type_map:
        if key.lower() in user_choice.lower():
            joint_type = joint_type_map[key]
            break
    
    if not joint_type:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç—ã–∫–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="ü¶ã –ë–∞–±–æ—á–∫–∞")],
                    [KeyboardButton(text="üîÑ –ü—Ä–æ—Å—Ç—ã–µ")],
                    [KeyboardButton(text="üîí –ó–∞–º—ã–∫–∞—é—â–∏–µ")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —Å—Ç—ã–∫–∞
    await state.update_data(joint_type=joint_type)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—â–∏–Ω—É —Å—Ç—ã–∫–∞
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="0.5"), KeyboardButton(text="0.8")],
            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    
    await message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—â–∏–Ω—É —Å—Ç—ã–∫–∞ (–º–º):",
        reply_markup=keyboard
    )
    await state.set_state(SalesStates.waiting_for_order_joint_thickness)

@router.message(SalesStates.waiting_for_order_joint_thickness)
async def process_order_joint_thickness(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–æ–ª—â–∏–Ω—ã —Å—Ç—ã–∫–æ–≤"""
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.set_state(SalesStates.waiting_for_order_joint_type)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç—ã–∫–∞:",
            reply_markup=get_joint_type_keyboard()
        )
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–ª—â–∏–Ω–∞ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
        thickness = float(message.text)
        if thickness <= 0:
            raise ValueError("–¢–æ–ª—â–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Å—Ç—ã–∫–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        joint_type = data.get("joint_type")
        
        db = next(get_db())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç—ã–∫–æ–≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–æ–ª—â–∏–Ω—ã
        joints = db.query(Joint).filter(
            Joint.type == joint_type,
            Joint.thickness == thickness,
            Joint.quantity > 0
        ).all()
        
        if not joints:
            db.close()
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞: —Å—Ç—ã–∫–∏ —Ç–∏–ø–∞ {joint_type.value} —Ç–æ–ª—â–∏–Ω–æ–π {thickness} –º–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ.\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é —Ç–æ–ª—â–∏–Ω—É:",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                    ],
                    resize_keyboard=True
                )
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—â–∏–Ω—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(joint_thickness=thickness)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏ —Ç–æ–ª—â–∏–Ω—ã —Å—Ç—ã–∫–∞
        available_colors = set()
        for joint in joints:
            available_colors.add(joint.color)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
        keyboard = []
        for color in available_colors:
            keyboard.append([KeyboardButton(text=color)])
        
        keyboard.append([KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")])
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ü–≤–µ—Ç–∞ —Å—Ç—ã–∫–∞
        await state.set_state(SalesStates.waiting_for_order_joint_color)
        await message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —Å—Ç—ã–∫–∞:",
            reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
        )
        
        db.close()
    except ValueError:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ç–æ–ª—â–∏–Ω—ã —Å—Ç—ã–∫–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–ª—â–∏–Ω—ã —Å—Ç—ã–∫–∞: {e}")
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )

@router.message(SalesStates.waiting_for_order_joint_color)
async def process_order_joint_color(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞ —Å—Ç—ã–∫–∞"""
    user_choice = message.text.strip()
    
    if user_choice == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–æ–ª—â–∏–Ω—ã
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—â–∏–Ω—É —Å—Ç—ã–∫–∞ (–º–º):",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="0.5"), KeyboardButton(text="0.8")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(SalesStates.waiting_for_order_joint_thickness)
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–≤–µ—Ç (—É–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ)
    color = user_choice.split(" (")[0]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç
    await state.update_data(joint_color=color)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—ã–∫–æ–≤
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—ã–∫–æ–≤:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
    )
    await state.set_state(SalesStates.waiting_for_order_joint_quantity)

@router.message(SalesStates.waiting_for_order_joint_quantity)
async def process_order_joint_quantity(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—ã–∫–æ–≤"""
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.set_state(SalesStates.waiting_for_order_joint_color)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —Å—Ç—ã–∫–∞:",
            reply_markup=await get_colors_keyboard()
        )
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
        quantity = int(message.text)
        if quantity <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        joint_type = data.get("joint_type")
        joint_color = data.get("joint_color")
        joint_thickness = data.get("joint_thickness")
        
        db = next(get_db())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç—ã–∫–æ–≤ –≤ –±–∞–∑–µ
        joint = db.query(Joint).filter(
            Joint.type == joint_type,
            Joint.color == joint_color,
            Joint.thickness == joint_thickness
        ).first()
        
        if not joint or joint.quantity < quantity:
            db.close()
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç—ã–∫–æ–≤ —Ç–∏–ø–∞ {joint_type.value}, —Ü–≤–µ—Ç–∞ {joint_color}, —Ç–æ–ª—â–∏–Ω–æ–π {joint_thickness} –º–º –Ω–∞ —Å–∫–ª–∞–¥–µ.\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ: {joint.quantity if joint else 0} —à—Ç.\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:"
            )
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—ã–∫ –≤ —Å–ø–∏—Å–æ–∫ —Å—Ç—ã–∫–æ–≤
        selected_joints = data.get("selected_joints", [])
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å—Ç—ã–∫–∞
        joint_data = {
            "type": joint_type.value,
            "color": joint_color,
            "thickness": joint_thickness,
            "quantity": quantity
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å—Ç—ã–∫ —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞, —Ü–≤–µ—Ç–∞ –∏ —Ç–æ–ª—â–∏–Ω—ã
        found = False
        for i, existing_joint in enumerate(selected_joints):
            if (existing_joint.get("type") == joint_type.value and 
                existing_joint.get("color") == joint_color and
                existing_joint.get("thickness") == joint_thickness):
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å—Ç—ã–∫–∞
                selected_joints[i]["quantity"] = quantity
                found = True
                break
        
        # –ï—Å–ª–∏ —Å—Ç—ã–∫–∞ —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
        if not found:
            selected_joints.append(joint_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(selected_joints=selected_joints)
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å—Ç—ã–∫–∏
        await state.set_state(SalesStates.waiting_for_order_more_joints)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—ã–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        joints_info = ""
        for joint_item in selected_joints:
            joint_type_val = joint_item.get("type")
            joint_color_val = joint_item.get("color")
            joint_thickness_val = joint_item.get("thickness")
            joint_quantity_val = joint_item.get("quantity")
            
            joint_type_text = ""
            if joint_type_val == JointType.BUTTERFLY.value:
                joint_type_text = "–ë–∞–±–æ—á–∫–∞"
            elif joint_type_val == JointType.SIMPLE.value:
                joint_type_text = "–ü—Ä–æ—Å—Ç—ã–µ"
            elif joint_type_val == JointType.CLOSING.value:
                joint_type_text = "–ó–∞–º—ã–∫–∞—é—â–∏–µ"
            
            joints_info += f"‚ñ™Ô∏è {joint_type_text}, {joint_thickness_val} –º–º, {joint_color_val}: {joint_quantity_val} —à—Ç.\n"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å—Ç—ã–∫–∏")],
                [KeyboardButton(text="‚ùå –ù–µ—Ç, –ø–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ")],
                [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        
        await message.answer(
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—ã–∫–∏:\n{joints_info}\n\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å—Ç—ã–∫–∏?",
            reply_markup=keyboard
        )
        
        db.close()
    except ValueError:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—ã–∫–æ–≤: {e}")
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )

@router.message(SalesStates.waiting_for_order_more_joints)
async def process_order_more_joints(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç—ã–∫–æ–≤"""
    user_choice = message.text.strip()
    
    if user_choice == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –û—Ç–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Å—Ç—ã–∫
        data = await state.get_data()
        selected_joints = data.get('selected_joints', [])
        
        if selected_joints:
            # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Å—Ç—ã–∫
            selected_joints.pop()
            await state.update_data(selected_joints=selected_joints)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            last_joint = data.get('last_joint', {})
            joint_type = last_joint.get('type', data.get('joint_type'))
            thickness = last_joint.get('thickness', data.get('joint_thickness'))
            color = last_joint.get('color', data.get('joint_color'))
            
            await message.answer(
                f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—ã–∫–æ–≤ ({joint_type}, {thickness} –º–º, {color}):",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                    ],
                    resize_keyboard=True
                )
            )
            await state.set_state(SalesStates.waiting_for_order_joint_quantity)
            return
        else:
            # –ï—Å–ª–∏ —Å—Ç—ã–∫–æ–≤ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Å—Ç—ã–∫–∞
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç—ã–∫–∞:",
                reply_markup=get_joint_type_keyboard()
            )
            await state.set_state(SalesStates.waiting_for_order_joint_type)
            return
    
    if user_choice == "‚úÖ –î–∞":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å—Ç—ã–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç—ã–∫–∞:",
            reply_markup=get_joint_type_keyboard()
        )
        await state.set_state(SalesStates.waiting_for_order_joint_type)
    elif user_choice == "‚ùå –ù–µ—Ç":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª –≤—ã–±–æ—Ä —Å—Ç—ã–∫–æ–≤, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ –∫–ª–µ–µ
        await message.answer(
            "–ù—É–∂–µ–Ω –ª–∏ –∫–ª–µ–π –¥–ª—è —Å—Ç—ã–∫–æ–≤?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(SalesStates.waiting_for_order_glue_needed)
    else:
        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )

@router.message(SalesStates.waiting_for_add_more_joints)
async def process_add_more_joints(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –µ—â–µ —Å—Ç—ã–∫–æ–≤"""
    response = message.text.strip()
    
    if response == "‚úÖ –î–∞":
        installation_required = True
    elif response == "‚ùå –ù–µ—Ç":
        installation_required = False
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: ‚úÖ –î–∞ –∏–ª–∏ ‚ùå –ù–µ—Ç",
            reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–Ω—Ç–∞–∂–µ
    await state.update_data(installation_required=installation_required)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:",
        reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
    )
    await state.set_state(SalesStates.waiting_for_order_customer_phone)

@router.message(SalesStates.waiting_for_order_delivery_address)
async def process_order_delivery_address(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    address = message.text.strip()
    
    # –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω, —Å—á–∏—Ç–∞–µ–º —Å–∞–º–æ–≤—ã–≤–æ–∑–æ–º
    if address.lower() == "–Ω–µ—Ç":
        address = "–°–∞–º–æ–≤—ã–≤–æ–∑"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
    await state.update_data(delivery_address=address)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
    selected_products = data.get('selected_products', [])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—ã–∫–∞—Ö
    selected_joints = data.get('selected_joints', [])
    
    need_joints = data.get('need_joints', False)
    need_glue = data.get('need_glue', False)
    glue_quantity = data.get('glue_quantity', 0)
    installation_required = data.get('installation_required', False)
    customer_phone = data.get('customer_phone', '')
    delivery_address = data.get('delivery_address', '')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
    order_summary = f"üìù –°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–∞:\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
    if selected_products:
        order_summary += f"üì¶ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n"
        total_panels = 0
        for product in selected_products:
            order_summary += f"‚ñ™Ô∏è {product['film_code']} (—Ç–æ–ª—â–∏–Ω–∞ {product['thickness']} –º–º): {product['quantity']} —à—Ç.\n"
            total_panels += product['quantity']
        order_summary += f"–í—Å–µ–≥–æ –ø–∞–Ω–µ–ª–µ–π: {total_panels} —à—Ç.\n\n"
    else:
        order_summary += "–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—ã–∫–∞—Ö
    if need_joints and selected_joints:
        order_summary += f"üîó –°—Ç—ã–∫–∏:\n"
        for joint in selected_joints:
            joint_type = joint.get('type', '')
            joint_type_text = ''
            if joint_type == 'butterfly' or joint_type == JointType.BUTTERFLY:
                joint_type_text = "–ë–∞–±–æ—á–∫–∞"
            elif joint_type == 'simple' or joint_type == JointType.SIMPLE:
                joint_type_text = "–ü—Ä–æ—Å—Ç—ã–µ"
            elif joint_type == 'closing' or joint_type == JointType.CLOSING:
                joint_type_text = "–ó–∞–º—ã–∫–∞—é—â–∏–µ"
            
            thickness = joint.get('thickness', '0.5')
            order_summary += f"‚ñ™Ô∏è {joint_type_text}, {thickness} –º–º, {joint.get('color', '')}: {joint.get('quantity', 0)} —à—Ç.\n"
        order_summary += "\n"
    else:
        order_summary += f"üîó –°—Ç—ã–∫–∏: –ù–µ—Ç\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    order_summary += f"üß¥ –ö–ª–µ–π: {glue_quantity} —Ç—é–±–∏–∫–æ–≤\n"
    order_summary += f"üîß –ú–æ–Ω—Ç–∞–∂: {'–¢—Ä–µ–±—É–µ—Ç—Å—è' if installation_required else '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}\n"
    order_summary += f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: {customer_phone}\n"
    order_summary += f"üöö –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_address}\n"
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await state.update_data(order_summary=order_summary)
    await state.set_state(MenuState.SALES_ORDER_CONFIRM)
    
    await message.answer(
        order_summary + "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:",
        reply_markup=get_menu_keyboard(MenuState.SALES_ORDER_CONFIRM)
    )
    await state.set_state(SalesStates.waiting_for_order_confirmation)

@router.message(SalesStates.waiting_for_order_confirmation)
async def process_order_confirmation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    if message.text.lower() != "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        await message.answer("–ó–∞–∫–∞–∑ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞ –ø–æ–∑–∂–µ.")
        await go_back(message, state)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    selected_products = data.get("selected_products", [])
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—ã–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    selected_joints = data.get("selected_joints", [])
    
    need_joints = selected_joints and len(selected_joints) > 0
    need_glue = data.get("need_glue", False)
    customer_phone = data.get("customer_phone", "")
    delivery_address = data.get("delivery_address", "")
    installation_required = data.get("installation_required", False)
    glue_quantity = data.get("glue_quantity", 0)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–∫–∞–∑–∞ (–≥–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è –∏–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ)
    db = next(get_db())
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ ID –≤ –±–∞–∑–µ
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        
        if not user:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            db.close()
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order = Order(
            manager_id=user.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∞ –Ω–µ telegram_id
            customer_phone=customer_phone,
            delivery_address=delivery_address,
            installation_required=installation_required,
            status=OrderStatus.NEW
        )
        db.add(order)
        db.flush()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ OrderItem
        for product in selected_products:
            film_code = product['film_code']
            thickness = float(product['thickness'])
            qty = product['quantity']
            
            film = db.query(Film).filter(Film.code == film_code).first()
            if not film:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è
            finished_product = db.query(FinishedProduct).join(Film).filter(
                Film.code == film_code,
                FinishedProduct.thickness == thickness
            ).first()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å OrderItem
            order_item = OrderItem(
                order_id=order.id,
                color=film_code,
                thickness=thickness,
                quantity=qty
            )
            db.add(order_item)
            
            if finished_product and finished_product.quantity >= qty:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –≥–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è, —É–º–µ–Ω—å—à–∞–µ–º –µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                finished_product.quantity -= qty
                
                # –°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏
                operation = Operation(
                    operation_type=OperationType.READY_PRODUCT_OUT.value,
                    quantity=qty,
                    user_id=user.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
                )
                db.add(operation)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏, —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
                production_order = ProductionOrder(
                    manager_id=user.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
                    panel_quantity=qty,
                    film_color=film_code,
                    panel_thickness=thickness,
                    status="new"
                )
                db.add(production_order)
        
        # –ï—Å–ª–∏ –Ω—É–∂–Ω—ã —Å—Ç—ã–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –∑–∞–∫–∞–∑
        if need_joints:
            if isinstance(selected_joints, list):
                # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç - —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ —Å—Ç—ã–∫–æ–≤
                for joint_data in selected_joints:
                    joint_type_val = joint_data.get('type')
                    thickness = joint_data.get('thickness')
                    color = joint_data.get('color')
                    quantity = joint_data.get('quantity')
                    
                    joint_type_text = ""
                    if joint_type_val == JointType.BUTTERFLY or joint_type_val == "butterfly":
                        joint_type_text = "–ë–∞–±–æ—á–∫–∞"
                    elif joint_type_val == JointType.SIMPLE or joint_type_val == "simple":
                        joint_type_text = "–ü—Ä–æ—Å—Ç—ã–µ"
                    elif joint_type_val == JointType.CLOSING or joint_type_val == "closing":
                        joint_type_text = "–ó–∞–º—ã–∫–∞—é—â–∏–µ"
                    
                    joints_info += f"‚ñ™Ô∏è {joint_type_text}, {thickness} –º–º, {color}: {quantity} —à—Ç.\n"
            elif isinstance(selected_joints, dict):
                # –°–ª–æ–≤–∞—Ä—å (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
                for joint_key, quantity in selected_joints.items():
                    joint_type_val, thickness, color = joint_key.split('|')
                    joint_type_text = ""
                    if joint_type_val == "butterfly":
                        joint_type_text = "–ë–∞–±–æ—á–∫–∞"
                    elif joint_type_val == "simple":
                        joint_type_text = "–ü—Ä–æ—Å—Ç—ã–µ"
                    elif joint_type_val == "closing":
                        joint_type_text = "–ó–∞–º—ã–∫–∞—é—â–∏–µ"
                    
                    joints_info += f"‚ñ™Ô∏è {joint_type_text}, {thickness} –º–º, {color}: {quantity} —à—Ç.\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–µ–µ –µ—Å–ª–∏ –æ–Ω –Ω—É–∂–µ–Ω
        glue_info = ""
        if need_glue and glue_quantity > 0:
            glue_info = f"\n–ö–ª–µ–π: {glue_quantity} —à—Ç.\n"
        
        # –°–±–æ—Ä–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        installation_text = "–î–∞" if installation_required else "–ù–µ—Ç"
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
        confirmation_message = (
            f"‚úÖ –ó–∞–∫–∞–∑ #{order.id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
            f"{products_info}"
            f"{joints_info}"
            f"{glue_info}"
            f"–ú–æ–Ω—Ç–∞–∂: {installation_text}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {customer_phone}\n"
            f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_address}\n\n"
            f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {order.status.value}"
        )
        
        await message.answer(confirmation_message)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await go_back(message, state)
    
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        db.close()

@router.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É")
async def handle_back_to_admin(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞"""
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user or user.role != UserRole.SUPER_ADMIN:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–¥–º–∏–Ω–∞
        await state.update_data(is_admin_context=False)
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
        await state.set_state(MenuState.SUPER_ADMIN_MAIN)
        await message.answer(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=get_menu_keyboard(MenuState.SUPER_ADMIN_MAIN)
        )
    finally:
        db.close()

@router.message(SalesStates.waiting_for_order_joint_quantity)
async def process_order_joint_quantity(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—ã–∫–æ–≤"""
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.set_state(SalesStates.waiting_for_order_joint_color)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —Å—Ç—ã–∫–∞:",
            reply_markup=await get_colors_keyboard()
        )
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
        quantity = int(message.text)
        if quantity <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        joint_type = data.get("joint_type")
        joint_color = data.get("joint_color")
        joint_thickness = data.get("joint_thickness")
        
        db = next(get_db())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç—ã–∫–æ–≤ –≤ –±–∞–∑–µ
        joint = db.query(Joint).filter(
            Joint.type == joint_type,
            Joint.color == joint_color,
            Joint.thickness == joint_thickness
        ).first()
        
        if not joint or joint.quantity < quantity:
            db.close()
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç—ã–∫–æ–≤ —Ç–∏–ø–∞ {joint_type.value}, —Ü–≤–µ—Ç–∞ {joint_color}, —Ç–æ–ª—â–∏–Ω–æ–π {joint_thickness} –º–º –Ω–∞ —Å–∫–ª–∞–¥–µ.\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ: {joint.quantity if joint else 0} —à—Ç.\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:"
            )
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—ã–∫ –≤ —Å–ø–∏—Å–æ–∫ —Å—Ç—ã–∫–æ–≤
        selected_joints = data.get("selected_joints", [])
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å—Ç—ã–∫–∞
        joint_data = {
            "type": joint_type.value,
            "color": joint_color,
            "thickness": joint_thickness,
            "quantity": quantity
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å—Ç—ã–∫ —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞, —Ü–≤–µ—Ç–∞ –∏ —Ç–æ–ª—â–∏–Ω—ã
        found = False
        for i, existing_joint in enumerate(selected_joints):
            if (existing_joint.get("type") == joint_type.value and 
                existing_joint.get("color") == joint_color and
                existing_joint.get("thickness") == joint_thickness):
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å—Ç—ã–∫–∞
                selected_joints[i]["quantity"] = quantity
                found = True
                break
        
        # –ï—Å–ª–∏ —Å—Ç—ã–∫–∞ —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
        if not found:
            selected_joints.append(joint_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(selected_joints=selected_joints)
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å—Ç—ã–∫–∏
        await state.set_state(SalesStates.waiting_for_order_more_joints)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—ã–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        joints_info = ""
        for joint_item in selected_joints:
            joint_type_val = joint_item.get("type")
            joint_color_val = joint_item.get("color")
            joint_thickness_val = joint_item.get("thickness")
            joint_quantity_val = joint_item.get("quantity")
            
            joint_type_text = ""
            if joint_type_val == JointType.BUTTERFLY.value:
                joint_type_text = "–ë–∞–±–æ—á–∫–∞"
            elif joint_type_val == JointType.SIMPLE.value:
                joint_type_text = "–ü—Ä–æ—Å—Ç—ã–µ"
            elif joint_type_val == JointType.CLOSING.value:
                joint_type_text = "–ó–∞–º—ã–∫–∞—é—â–∏–µ"
            
            joints_info += f"‚ñ™Ô∏è {joint_type_text}, {joint_thickness_val} –º–º, {joint_color_val}: {joint_quantity_val} —à—Ç.\n"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å—Ç—ã–∫–∏")],
                [KeyboardButton(text="‚ùå –ù–µ—Ç, –ø–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ")],
                [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        
        await message.answer(
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—ã–∫–∏:\n{joints_info}\n\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å—Ç—ã–∫–∏?",
            reply_markup=keyboard
        )
        
        db.close()
    except ValueError:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—ã–∫–æ–≤: {e}")
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )

@router.message(SalesStates.waiting_for_order_more_joints)
async def process_order_more_joints(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç—ã–∫–æ–≤"""
    user_choice = message.text.strip()
    
    if user_choice == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –û—Ç–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Å—Ç—ã–∫
        data = await state.get_data()
        selected_joints = data.get('selected_joints', [])
        
        if selected_joints:
            # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Å—Ç—ã–∫
            selected_joints.pop()
            await state.update_data(selected_joints=selected_joints)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            last_joint = data.get('last_joint', {})
            joint_type = last_joint.get('type', data.get('joint_type'))
            thickness = last_joint.get('thickness', data.get('joint_thickness'))
            color = last_joint.get('color', data.get('joint_color'))
            
            await message.answer(
                f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—ã–∫–æ–≤ ({joint_type}, {thickness} –º–º, {color}):",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                    ],
                    resize_keyboard=True
                )
            )
            await state.set_state(SalesStates.waiting_for_order_joint_quantity)
            return
        else:
            # –ï—Å–ª–∏ —Å—Ç—ã–∫–æ–≤ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Å—Ç—ã–∫–∞
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç—ã–∫–∞:",
                reply_markup=get_joint_type_keyboard()
            )
            await state.set_state(SalesStates.waiting_for_order_joint_type)
            return
    
    if user_choice == "‚úÖ –î–∞":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å—Ç—ã–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç—ã–∫–∞:",
            reply_markup=get_joint_type_keyboard()
        )
        await state.set_state(SalesStates.waiting_for_order_joint_type)
    elif user_choice == "‚ùå –ù–µ—Ç":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª –≤—ã–±–æ—Ä —Å—Ç—ã–∫–æ–≤, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ –∫–ª–µ–µ
        await message.answer(
            "–ù—É–∂–µ–Ω –ª–∏ –∫–ª–µ–π –¥–ª—è —Å—Ç—ã–∫–æ–≤?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(SalesStates.waiting_for_order_glue_needed)
    else:
        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )

@router.message(SalesStates.waiting_for_order_delivery_address)
async def process_order_delivery_address(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    address = message.text.strip()
    
    # –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω, —Å—á–∏—Ç–∞–µ–º —Å–∞–º–æ–≤—ã–≤–æ–∑–æ–º
    if address.lower() == "–Ω–µ—Ç":
        address = "–°–∞–º–æ–≤—ã–≤–æ–∑"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
    await state.update_data(delivery_address=address)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
    selected_products = data.get('selected_products', [])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—ã–∫–∞—Ö
    selected_joints = data.get('selected_joints', [])
    
    need_joints = data.get('need_joints', False)
    need_glue = data.get('need_glue', False)
    glue_quantity = data.get('glue_quantity', 0)
    installation_required = data.get('installation_required', False)
    customer_phone = data.get('customer_phone', '')
    delivery_address = data.get('delivery_address', '')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
    order_summary = f"üìù –°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–∞:\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
    if selected_products:
        order_summary += f"üì¶ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n"
        total_panels = 0
        for product in selected_products:
            order_summary += f"‚ñ™Ô∏è {product['film_code']} (—Ç–æ–ª—â–∏–Ω–∞ {product['thickness']} –º–º): {product['quantity']} —à—Ç.\n"
            total_panels += product['quantity']
        order_summary += f"–í—Å–µ–≥–æ –ø–∞–Ω–µ–ª–µ–π: {total_panels} —à—Ç.\n\n"
    else:
        order_summary += "–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—ã–∫–∞—Ö
    if need_joints and selected_joints:
        order_summary += f"üîó –°—Ç—ã–∫–∏:\n"
        for joint in selected_joints:
            joint_type = joint.get('type', '')
            joint_type_text = ''
            if joint_type == 'butterfly' or joint_type == JointType.BUTTERFLY:
                joint_type_text = "–ë–∞–±–æ—á–∫–∞"
            elif joint_type == 'simple' or joint_type == JointType.SIMPLE:
                joint_type_text = "–ü—Ä–æ—Å—Ç—ã–µ"
            elif joint_type == 'closing' or joint_type == JointType.CLOSING:
                joint_type_text = "–ó–∞–º—ã–∫–∞—é—â–∏–µ"
            
            thickness = joint.get('thickness', '0.5')
            order_summary += f"‚ñ™Ô∏è {joint_type_text}, {thickness} –º–º, {joint.get('color', '')}: {joint.get('quantity', 0)} —à—Ç.\n"
        order_summary += "\n"
    else:
        order_summary += f"üîó –°—Ç—ã–∫–∏: –ù–µ—Ç\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    order_summary += f"üß¥ –ö–ª–µ–π: {glue_quantity} —Ç—é–±–∏–∫–æ–≤\n"
    order_summary += f"üîß –ú–æ–Ω—Ç–∞–∂: {'–¢—Ä–µ–±—É–µ—Ç—Å—è' if installation_required else '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}\n"
    order_summary += f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: {customer_phone}\n"
    order_summary += f"üöö –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_address}\n"
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await state.update_data(order_summary=order_summary)
    await state.set_state(MenuState.SALES_ORDER_CONFIRM)
    
    await message.answer(
        order_summary + "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:",
        reply_markup=get_menu_keyboard(MenuState.SALES_ORDER_CONFIRM)
    )
    await state.set_state(SalesStates.waiting_for_order_confirmation)

@router.message(SalesStates.waiting_for_order_confirmation)
async def process_order_confirmation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    if message.text.lower() != "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        await message.answer("–ó–∞–∫–∞–∑ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞ –ø–æ–∑–∂–µ.")
        await go_back(message, state)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    selected_products = data.get("selected_products", [])
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—ã–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    selected_joints = data.get('selected_joints', [])
    
    need_joints = selected_joints and len(selected_joints) > 0
    need_glue = data.get("need_glue", False)
    customer_phone = data.get("customer_phone", "")
    delivery_address = data.get("delivery_address", "")
    installation_required = data.get("installation_required", False)
    glue_quantity = data.get("glue_quantity", 0)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–∫–∞–∑–∞ (–≥–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è –∏–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ)
    db = next(get_db())
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ ID –≤ –±–∞–∑–µ
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        
        if not user:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            db.close()
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order = Order(
            manager_id=user.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∞ –Ω–µ telegram_id
            customer_phone=customer_phone,
            delivery_address=delivery_address,
            installation_required=installation_required,
            status=OrderStatus.NEW
        )
        db.add(order)
        db.flush()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ OrderItem
        for product in selected_products:
            film_code = product['film_code']
            thickness = float(product['thickness'])
            qty = product['quantity']
            
            film = db.query(Film).filter(Film.code == film_code).first()
            if not film:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è
            finished_product = db.query(FinishedProduct).join(Film).filter(
                Film.code == film_code,
                FinishedProduct.thickness == thickness
            ).first()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å OrderItem
            order_item = OrderItem(
                order_id=order.id,
                color=film_code,
                thickness=thickness,
                quantity=qty
            )
            db.add(order_item)
            
            if finished_product and finished_product.quantity >= qty:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –≥–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è, —É–º–µ–Ω—å—à–∞–µ–º –µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                finished_product.quantity -= qty
                
                # –°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏
                operation = Operation(
                    operation_type=OperationType.READY_PRODUCT_OUT.value,
                    quantity=qty,
                    user_id=user.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
                )
                db.add(operation)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏, —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
                production_order = ProductionOrder(
                    manager_id=user.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
                    panel_quantity=qty,
                    film_color=film_code,
                    panel_thickness=thickness,
                    status="new"
                )
                db.add(production_order)
        
        # –ï—Å–ª–∏ –Ω—É–∂–Ω—ã —Å—Ç—ã–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –∑–∞–∫–∞–∑
        if need_joints:
            if isinstance(selected_joints, list):
                # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç - —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ —Å—Ç—ã–∫–æ–≤
                for joint_data in selected_joints:
                    joint_type_val = joint_data.get('type')
                    thickness = joint_data.get('thickness')
                    color = joint_data.get('color')
                    quantity = joint_data.get('quantity')
                    
                    joint_type_text = ""
                    if joint_type_val == JointType.BUTTERFLY or joint_type_val == "butterfly":
                        joint_type_text = "–ë–∞–±–æ—á–∫–∞"
                    elif joint_type_val == JointType.SIMPLE or joint_type_val == "simple":
                        joint_type_text = "–ü—Ä–æ—Å—Ç—ã–µ"
                    elif joint_type_val == JointType.CLOSING or joint_type_val == "closing":
                        joint_type_text = "–ó–∞–º—ã–∫–∞—é—â–∏–µ"
                    
                    joints_info += f"‚ñ™Ô∏è {joint_type_text}, {thickness} –º–º, {color}: {quantity} —à—Ç.\n"
            elif isinstance(selected_joints, dict):
                # –°–ª–æ–≤–∞—Ä—å (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
                for joint_key, quantity in selected_joints.items():
                    joint_type_val, thickness, color = joint_key.split('|')
                    joint_type_text = ""
                    if joint_type_val == "butterfly":
                        joint_type_text = "–ë–∞–±–æ—á–∫–∞"
                    elif joint_type_val == "simple":
                        joint_type_text = "–ü—Ä–æ—Å—Ç—ã–µ"
                    elif joint_type_val == "closing":
                        joint_type_text = "–ó–∞–º—ã–∫–∞—é—â–∏–µ"
                    
                    joints_info += f"‚ñ™Ô∏è {joint_type_text}, {thickness} –º–º, {color}: {quantity} —à—Ç.\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–µ–µ –µ—Å–ª–∏ –æ–Ω –Ω—É–∂–µ–Ω
        glue_info = ""
        if need_glue and glue_quantity > 0:
            glue_info = f"\n–ö–ª–µ–π: {glue_quantity} —à—Ç.\n"
        
        # –°–±–æ—Ä–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        installation_text = "–î–∞" if installation_required else "–ù–µ—Ç"
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
        confirmation_message = (
            f"‚úÖ –ó–∞–∫–∞–∑ #{order.id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
            f"{products_info}"
            f"{joints_info}"
            f"{glue_info}"
            f"–ú–æ–Ω—Ç–∞–∂: {installation_text}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {customer_phone}\n"
            f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_address}\n\n"
            f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {order.status.value}"
        )
        
        await message.answer(confirmation_message)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await go_back(message, state)
    
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        db.close()

@router.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É")
async def handle_back_to_admin(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞"""
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user or user.role != UserRole.SUPER_ADMIN:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–¥–º–∏–Ω–∞
        await state.update_data(is_admin_context=False)
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
        await state.set_state(MenuState.SUPER_ADMIN_MAIN)
        await message.answer(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=get_menu_keyboard(MenuState.SUPER_ADMIN_MAIN)
        )
    finally:
        db.close()

@router.message(SalesStates.waiting_for_order_glue_needed)
async def process_order_glue_needed(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–ª–µ—è –¥–ª—è —Å—Ç—ã–∫–æ–≤"""
    user_choice = message.text.strip()
    
    if user_choice == "‚úÖ –î–∞":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª–µ—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = next(get_db())
        try:
            glue = db.query(Glue).filter(Glue.quantity > 0).first()
            
            if not glue:
                await message.answer(
                    "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–ª–µ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ.",
                    reply_markup=ReplyKeyboardMarkup(
                        keyboard=[
                            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                        ],
                        resize_keyboard=True
                    )
                )
                return
            
            await message.answer(
                f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—é–±–∏–∫–æ–≤ –∫–ª–µ—è (–¥–æ—Å—Ç—É–ø–Ω–æ: {glue.quantity} —à—Ç.):",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                    ],
                    resize_keyboard=True
                )
            )
            await state.set_state(SalesStates.waiting_for_order_glue_quantity)
        finally:
            db.close()
    elif user_choice == "‚ùå –ù–µ—Ç":
        # –ö–ª–µ–π –Ω–µ –Ω—É–∂–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω—É–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        await state.update_data(glue_quantity=0)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –æ –º–æ–Ω—Ç–∞–∂–µ
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        await message.answer(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –º–æ–Ω—Ç–∞–∂?",
            reply_markup=keyboard
        )
        await state.set_state(SalesStates.waiting_for_order_installation)
    else:
        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )

@router.message(SalesStates.waiting_for_order_installation)
async def process_order_installation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–Ω—Ç–∞–∂–∞"""
    response = message.text.strip()
    
    if response == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É - –∑–∞–ø—Ä–æ—Å—É –æ –∫–ª–µ–µ
        await message.answer(
            "–í–∞–º –Ω—É–∂–µ–Ω –∫–ª–µ–π?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞")],
                    [KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(SalesStates.waiting_for_order_glue_needed)
        return

    installation_required = False
    if response == "‚úÖ –î–∞":
        installation_required = True
    elif response == "‚ùå –ù–µ—Ç":
        installation_required = False
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞")],
                    [KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    await state.update_data(installation_required=installation_required)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:",
        reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
    )
    await state.set_state(SalesStates.waiting_for_order_customer_phone)

@router.message(SalesStates.waiting_for_order_customer_phone)
async def process_order_customer_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
    phone = message.text.strip()
    
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É - –∑–∞–ø—Ä–æ—Å—É –æ –º–æ–Ω—Ç–∞–∂–µ
        await message.answer(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –º–æ–Ω—Ç–∞–∂?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞")],
                    [KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(SalesStates.waiting_for_order_installation)
        return
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not phone or len(phone) < 5:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
            reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.update_data(customer_phone=phone)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç' –µ—Å–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑):",
        reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
    )
    await state.set_state(SalesStates.waiting_for_order_delivery_address)

@router.message(SalesStates.waiting_for_order_glue_quantity)
async def process_order_glue_quantity(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–µ—è"""
    try:
        quantity = int(message.text.strip())
        if quantity <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–ª–µ–µ
        data = await state.get_data()
        glue_quantity = quantity
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—è
        await state.update_data(glue_quantity=glue_quantity)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –æ –º–æ–Ω—Ç–∞–∂–µ
        await message.answer(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –º–æ–Ω—Ç–∞–∂?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(SalesStates.waiting_for_order_installation)
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )

@router.message(SalesStates.waiting_for_order_glue_needed)
async def process_order_glue_needed(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–ª–µ—è –¥–ª—è —Å—Ç—ã–∫–æ–≤"""
    user_choice = message.text.strip()
    
    if user_choice == "‚úÖ –î–∞":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª–µ—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = next(get_db())
        try:
            glue = db.query(Glue).filter(Glue.quantity > 0).first()
            
            if not glue:
                await message.answer(
                    "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–ª–µ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ.",
                    reply_markup=ReplyKeyboardMarkup(
                        keyboard=[
                            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                        ],
                        resize_keyboard=True
                    )
                )
                return
            
            await message.answer(
                f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—é–±–∏–∫–æ–≤ –∫–ª–µ—è (–¥–æ—Å—Ç—É–ø–Ω–æ: {glue.quantity} —à—Ç.):",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                    ],
                    resize_keyboard=True
                )
            )
            await state.set_state(SalesStates.waiting_for_order_glue_quantity)
        finally:
            db.close()
    elif user_choice == "‚ùå –ù–µ—Ç":
        # –ö–ª–µ–π –Ω–µ –Ω—É–∂–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω—É–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        await state.update_data(glue_quantity=0)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –æ –º–æ–Ω—Ç–∞–∂–µ
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        await message.answer(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –º–æ–Ω—Ç–∞–∂?",
            reply_markup=keyboard
        )
        await state.set_state(SalesStates.waiting_for_order_installation)
    else:
        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )

@router.message(SalesStates.waiting_for_order_installation)
async def process_order_installation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–Ω—Ç–∞–∂–∞"""
    response = message.text.strip()
    
    if response == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É - –∑–∞–ø—Ä–æ—Å—É –æ –∫–ª–µ–µ
        await message.answer(
            "–í–∞–º –Ω—É–∂–µ–Ω –∫–ª–µ–π?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞")],
                    [KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(SalesStates.waiting_for_order_glue_needed)
        return

    installation_required = False
    if response == "‚úÖ –î–∞":
        installation_required = True
    elif response == "‚ùå –ù–µ—Ç":
        installation_required = False
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞")],
                    [KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    await state.update_data(installation_required=installation_required)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:",
        reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
    )
    await state.set_state(SalesStates.waiting_for_order_customer_phone)

@router.message(SalesStates.waiting_for_order_delivery_address)
async def process_order_delivery_address(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    address = message.text.strip()
    
    # –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω, —Å—á–∏—Ç–∞–µ–º —Å–∞–º–æ–≤—ã–≤–æ–∑–æ–º
    if address.lower() == "–Ω–µ—Ç":
        address = "–°–∞–º–æ–≤—ã–≤–æ–∑"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
    await state.update_data(delivery_address=address)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
    selected_products = data.get('selected_products', [])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—ã–∫–∞—Ö
    selected_joints = data.get('selected_joints', [])
    
    need_joints = data.get('need_joints', False)
    need_glue = data.get('need_glue', False)
    glue_quantity = data.get('glue_quantity', 0)
    installation_required = data.get('installation_required', False)
    customer_phone = data.get('customer_phone', '')
    delivery_address = data.get('delivery_address', '')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
    order_summary = f"üìù –°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–∞:\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
    if selected_products:
        order_summary += f"üì¶ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n"
        total_panels = 0
        for product in selected_products:
            order_summary += f"‚ñ™Ô∏è {product['film_code']} (—Ç–æ–ª—â–∏–Ω–∞ {product['thickness']} –º–º): {product['quantity']} —à—Ç.\n"
            total_panels += product['quantity']
        order_summary += f"–í—Å–µ–≥–æ –ø–∞–Ω–µ–ª–µ–π: {total_panels} —à—Ç.\n\n"
    else:
        order_summary += "–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—ã–∫–∞—Ö
    if need_joints and selected_joints:
        order_summary += f"üîó –°—Ç—ã–∫–∏:\n"
        for joint in selected_joints:
            joint_type = joint.get('type', '')
            joint_type_text = ''
            if joint_type == 'butterfly' or joint_type == JointType.BUTTERFLY:
                joint_type_text = "–ë–∞–±–æ—á–∫–∞"
            elif joint_type == 'simple' or joint_type == JointType.SIMPLE:
                joint_type_text = "–ü—Ä–æ—Å—Ç—ã–µ"
            elif joint_type == 'closing' or joint_type == JointType.CLOSING:
                joint_type_text = "–ó–∞–º—ã–∫–∞—é—â–∏–µ"
            
            thickness = joint.get('thickness', '0.5')
            order_summary += f"‚ñ™Ô∏è {joint_type_text}, {thickness} –º–º, {joint.get('color', '')}: {joint.get('quantity', 0)} —à—Ç.\n"
        order_summary += "\n"
    else:
        order_summary += f"üîó –°—Ç—ã–∫–∏: –ù–µ—Ç\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    order_summary += f"üß¥ –ö–ª–µ–π: {glue_quantity} —Ç—é–±–∏–∫–æ–≤\n"
    order_summary += f"üîß –ú–æ–Ω—Ç–∞–∂: {'–¢—Ä–µ–±—É–µ—Ç—Å—è' if installation_required else '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}\n"
    order_summary += f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: {customer_phone}\n"
    order_summary += f"üöö –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_address}\n"
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await state.update_data(order_summary=order_summary)
    await state.set_state(MenuState.SALES_ORDER_CONFIRM)
    
    await message.answer(
        order_summary + "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:",
        reply_markup=get_menu_keyboard(MenuState.SALES_ORDER_CONFIRM)
    )
    await state.set_state(SalesStates.waiting_for_order_confirmation)

@router.message(SalesStates.waiting_for_order_confirmation)
async def process_order_confirmation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    if message.text.lower() != "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        await message.answer("–ó–∞–∫–∞–∑ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞ –ø–æ–∑–∂–µ.")
        await go_back(message, state)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    selected_products = data.get("selected_products", [])
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—ã–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    selected_joints = data.get('selected_joints', [])
    
    need_joints = selected_joints and len(selected_joints) > 0
    need_glue = data.get("need_glue", False)
    customer_phone = data.get("customer_phone", "")
    delivery_address = data.get("delivery_address", "")
    installation_required = data.get("installation_required", False)
    glue_quantity = data.get("glue_quantity", 0)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–∫–∞–∑–∞ (–≥–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è –∏–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ)
    db = next(get_db())
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ ID –≤ –±–∞–∑–µ
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        
        if not user:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            db.close()
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order = Order(
            manager_id=user.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∞ –Ω–µ telegram_id
            customer_phone=customer_phone,
            delivery_address=delivery_address,
            installation_required=installation_required,
            status=OrderStatus.NEW
        )
        db.add(order)
        db.flush()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ OrderItem
        for product in selected_products:
            film_code = product['film_code']
            thickness = float(product['thickness'])
            qty = product['quantity']
            
            film = db.query(Film).filter(Film.code == film_code).first()
            if not film:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è
            finished_product = db.query(FinishedProduct).join(Film).filter(
                Film.code == film_code,
                FinishedProduct.thickness == thickness
            ).first()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å OrderItem
            order_item = OrderItem(
                order_id=order.id,
                color=film_code,
                thickness=thickness,
                quantity=qty
            )
            db.add(order_item)
            
            if finished_product and finished_product.quantity >= qty:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –≥–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è, —É–º–µ–Ω—å—à–∞–µ–º –µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                finished_product.quantity -= qty
                
                # –°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏
                operation = Operation(
                    operation_type=OperationType.READY_PRODUCT_OUT.value,
                    quantity=qty,
                    user_id=user.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
                )
                db.add(operation)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏, —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
                production_order = ProductionOrder(
                    manager_id=user.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
                    panel_quantity=qty,
                    film_color=film_code,
                    panel_thickness=thickness,
                    status="new"
                )
                db.add(production_order)
        
        # –ï—Å–ª–∏ –Ω—É–∂–Ω—ã —Å—Ç—ã–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –∑–∞–∫–∞–∑
        if need_joints:
            if isinstance(selected_joints, list):
                # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç - —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ —Å—Ç—ã–∫–æ–≤
                for joint_data in selected_joints:
                    joint_type_val = joint_data.get('type')
                    thickness = joint_data.get('thickness')
                    color = joint_data.get('color')
                    quantity = joint_data.get('quantity')
                    
                    joint_type_text = ""
                    if joint_type_val == JointType.BUTTERFLY or joint_type_val == "butterfly":
                        joint_type_text = "–ë–∞–±–æ—á–∫–∞"
                    elif joint_type_val == JointType.SIMPLE or joint_type_val == "simple":
                        joint_type_text = "–ü—Ä–æ—Å—Ç—ã–µ"
                    elif joint_type_val == JointType.CLOSING or joint_type_val == "closing":
                        joint_type_text = "–ó–∞–º—ã–∫–∞—é—â–∏–µ"
                    
                    joints_info += f"‚ñ™Ô∏è {joint_type_text}, {thickness} –º–º, {color}: {quantity} —à—Ç.\n"
            elif isinstance(selected_joints, dict):
                # –°–ª–æ–≤–∞—Ä—å (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
                for joint_key, quantity in selected_joints.items():
                    joint_type_val, thickness, color = joint_key.split('|')
                    joint_type_text = ""
                    if joint_type_val == "butterfly":
                        joint_type_text = "–ë–∞–±–æ—á–∫–∞"
                    elif joint_type_val == "simple":
                        joint_type_text = "–ü—Ä–æ—Å—Ç—ã–µ"
                    elif joint_type_val == "closing":
                        joint_type_text = "–ó–∞–º—ã–∫–∞—é—â–∏–µ"
                    
                    joints_info += f"‚ñ™Ô∏è {joint_type_text}, {thickness} –º–º, {color}: {quantity} —à—Ç.\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–µ–µ –µ—Å–ª–∏ –æ–Ω –Ω—É–∂–µ–Ω
        glue_info = ""
        if need_glue and glue_quantity > 0:
            glue_info = f"\n–ö–ª–µ–π: {glue_quantity} —à—Ç.\n"
        
        # –°–±–æ—Ä–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        installation_text = "–î–∞" if installation_required else "–ù–µ—Ç"
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
        confirmation_message = (
            f"‚úÖ –ó–∞–∫–∞–∑ #{order.id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
            f"{products_info}"
            f"{joints_info}"
            f"{glue_info}"
            f"–ú–æ–Ω—Ç–∞–∂: {installation_text}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {customer_phone}\n"
            f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_address}\n\n"
            f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {order.status.value}"
        )
        
        await message.answer(confirmation_message)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await go_back(message, state)
    
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        db.close()

@router.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É")
async def handle_back_to_admin(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞"""
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user or user.role != UserRole.SUPER_ADMIN:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–¥–º–∏–Ω–∞
        await state.update_data(is_admin_context=False)
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
        await state.set_state(MenuState.SUPER_ADMIN_MAIN)
        await message.answer(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=get_menu_keyboard(MenuState.SUPER_ADMIN_MAIN)
        )
    finally:
        db.close()

@router.message(SalesStates.waiting_for_order_glue_needed)
async def process_order_glue_needed(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–ª–µ—è –¥–ª—è —Å—Ç—ã–∫–æ–≤"""
    user_choice = message.text.strip()
    
    if user_choice == "‚úÖ –î–∞":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª–µ—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = next(get_db())
        try:
            glue = db.query(Glue).filter(Glue.quantity > 0).first()
            
            if not glue:
                await message.answer(
                    "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–ª–µ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ.",
                    reply_markup=ReplyKeyboardMarkup(
                        keyboard=[
                            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                        ],
                        resize_keyboard=True
                    )
                )
                return
            
            await message.answer(
                f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—é–±–∏–∫–æ–≤ –∫–ª–µ—è (–¥–æ—Å—Ç—É–ø–Ω–æ: {glue.quantity} —à—Ç.):",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                    ],
                    resize_keyboard=True
                )
            )
            await state.set_state(SalesStates.waiting_for_order_glue_quantity)
        finally:
            db.close()
    elif user_choice == "‚ùå –ù–µ—Ç":
        # –ö–ª–µ–π –Ω–µ –Ω—É–∂–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω—É–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        await state.update_data(glue_quantity=0)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –æ –º–æ–Ω—Ç–∞–∂–µ
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        await message.answer(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –º–æ–Ω—Ç–∞–∂?",
            reply_markup=keyboard
        )
        await state.set_state(SalesStates.waiting_for_order_installation)
    else:
        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )

@router.message(SalesStates.waiting_for_order_installation)
async def process_order_installation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–Ω—Ç–∞–∂–∞"""
    response = message.text.strip()
    
    if response == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É - –∑–∞–ø—Ä–æ—Å—É –æ –∫–ª–µ–µ
        await message.answer(
            "–í–∞–º –Ω—É–∂–µ–Ω –∫–ª–µ–π?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞")],
                    [KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(SalesStates.waiting_for_order_glue_needed)
        return

    installation_required = False
    if response == "‚úÖ –î–∞":
        installation_required = True
    elif response == "‚ùå –ù–µ—Ç":
        installation_required = False
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞")],
                    [KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    await state.update_data(installation_required=installation_required)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:",
        reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
    )
    await state.set_state(SalesStates.waiting_for_order_customer_phone)

@router.message(SalesStates.waiting_for_order_customer_phone)
async def process_order_customer_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
    phone = message.text.strip()
    
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É - –∑–∞–ø—Ä–æ—Å—É –æ –º–æ–Ω—Ç–∞–∂–µ
        await message.answer(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –º–æ–Ω—Ç–∞–∂?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞")],
                    [KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(SalesStates.waiting_for_order_installation)
        return
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not phone or len(phone) < 5:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
            reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.update_data(customer_phone=phone)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç' –µ—Å–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑):",
        reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
    )
    await state.set_state(SalesStates.waiting_for_order_delivery_address)

@router.message(SalesStates.waiting_for_order_glue_quantity)
async def process_order_glue_quantity(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–µ—è"""
    try:
        quantity = int(message.text.strip())
        if quantity <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–ª–µ–µ
        data = await state.get_data()
        glue_quantity = quantity
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—è
        await state.update_data(glue_quantity=glue_quantity)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –æ –º–æ–Ω—Ç–∞–∂–µ
        await message.answer(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –º–æ–Ω—Ç–∞–∂?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(SalesStates.waiting_for_order_installation)
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )

@router.message(SalesStates.waiting_for_order_glue_needed)
async def process_order_glue_needed(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–ª–µ—è –¥–ª—è —Å—Ç—ã–∫–æ–≤"""
    user_choice = message.text.strip()
    
    if user_choice == "‚úÖ –î–∞":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª–µ—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = next(get_db())
        try:
            glue = db.query(Glue).filter(Glue.quantity > 0).first()
            
            if not glue:
                await message.answer(
                    "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–ª–µ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ.",
                    reply_markup=ReplyKeyboardMarkup(
                        keyboard=[
                            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                        ],
                        resize_keyboard=True
                    )
                )
                return
            
            await message.answer(
                f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—é–±–∏–∫–æ–≤ –∫–ª–µ—è (–¥–æ—Å—Ç—É–ø–Ω–æ: {glue.quantity} —à—Ç.):",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                    ],
                    resize_keyboard=True
                )
            )
            await state.set_state(SalesStates.waiting_for_order_glue_quantity)
        finally:
            db.close()
    elif user_choice == "‚ùå –ù–µ—Ç":
        # –ö–ª–µ–π –Ω–µ –Ω—É–∂–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω—É–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        await state.update_data(glue_quantity=0)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –æ –º–æ–Ω—Ç–∞–∂–µ
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        await message.answer(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –º–æ–Ω—Ç–∞–∂?",
            reply_markup=keyboard
        )
        await state.set_state(SalesStates.waiting_for_order_installation)
    else:
        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )

@router.message(SalesStates.waiting_for_order_installation)
async def process_order_installation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–Ω—Ç–∞–∂–∞"""
    response = message.text.strip()
    
    if response == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É - –∑–∞–ø—Ä–æ—Å—É –æ –∫–ª–µ–µ
        await message.answer(
            "–í–∞–º –Ω—É–∂–µ–Ω –∫–ª–µ–π?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞")],
                    [KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(SalesStates.waiting_for_order_glue_needed)
        return

    installation_required = False
    if response == "‚úÖ –î–∞":
        installation_required = True
    elif response == "‚ùå –ù–µ—Ç":
        installation_required = False
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞")],
                    [KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    await state.update_data(installation_required=installation_required)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:",
        reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
    )
    await state.set_state(SalesStates.waiting_for_order_customer_phone)

@router.message(SalesStates.waiting_for_order_customer_phone)
async def process_order_customer_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
    phone = message.text.strip()
    
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É - –∑–∞–ø—Ä–æ—Å—É –æ –º–æ–Ω—Ç–∞–∂–µ
        await message.answer(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –º–æ–Ω—Ç–∞–∂?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞")],
                    [KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(SalesStates.waiting_for_order_installation)
        return
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not phone or len(phone) < 5:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
            reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.update_data(customer_phone=phone)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç' –µ—Å–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑):",
        reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
    )
    await state.set_state(SalesStates.waiting_for_order_delivery_address)

@router.message(SalesStates.waiting_for_order_joint_quantity)
async def process_order_joint_quantity(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—ã–∫–æ–≤"""
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        await state.set_state(SalesStates.waiting_for_order_joint_color)
    await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —Å—Ç—ã–∫–∞:",
            reply_markup=await get_colors_keyboard()
        )
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
        quantity = int(message.text)
        if quantity <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
        joint_type = data.get("joint_type")
        joint_color = data.get("joint_color")
        joint_thickness = data.get("joint_thickness")
        
    db = next(get_db())
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç—ã–∫–æ–≤ –≤ –±–∞–∑–µ
        joint = db.query(Joint).filter(
            Joint.type == joint_type,
            Joint.color == joint_color,
            Joint.thickness == joint_thickness
        ).first()
        
        if not joint or joint.quantity < quantity:
            db.close()
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç—ã–∫–æ–≤ —Ç–∏–ø–∞ {joint_type.value}, —Ü–≤–µ—Ç–∞ {joint_color}, —Ç–æ–ª—â–∏–Ω–æ–π {joint_thickness} –º–º –Ω–∞ —Å–∫–ª–∞–¥–µ.\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ: {joint.quantity if joint else 0} —à—Ç.\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:"
            )
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—ã–∫ –≤ —Å–ø–∏—Å–æ–∫ —Å—Ç—ã–∫–æ–≤
        selected_joints = data.get("selected_joints", [])
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å—Ç—ã–∫–∞
        joint_data = {
            "type": joint_type.value,
            "color": joint_color,
            "thickness": joint_thickness,
            "quantity": quantity
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å—Ç—ã–∫ —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞, —Ü–≤–µ—Ç–∞ –∏ —Ç–æ–ª—â–∏–Ω—ã
        found = False
        for i, existing_joint in enumerate(selected_joints):
            if (existing_joint.get("type") == joint_type.value and 
                existing_joint.get("color") == joint_color and
                existing_joint.get("thickness") == joint_thickness):
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å—Ç—ã–∫–∞
                selected_joints[i]["quantity"] = quantity
                found = True
                break
        
        # –ï—Å–ª–∏ —Å—Ç—ã–∫–∞ —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
        if not found:
            selected_joints.append(joint_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(selected_joints=selected_joints)
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å—Ç—ã–∫–∏
        await state.set_state(SalesStates.waiting_for_order_more_joints)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—ã–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        joints_info = ""
        for joint_item in selected_joints:
            joint_type_val = joint_item.get("type")
            joint_color_val = joint_item.get("color")
            joint_thickness_val = joint_item.get("thickness")
            joint_quantity_val = joint_item.get("quantity")
                    
                    joint_type_text = ""
            if joint_type_val == JointType.BUTTERFLY.value:
                        joint_type_text = "–ë–∞–±–æ—á–∫–∞"
            elif joint_type_val == JointType.SIMPLE.value:
                        joint_type_text = "–ü—Ä–æ—Å—Ç—ã–µ"
            elif joint_type_val == JointType.CLOSING.value:
                        joint_type_text = "–ó–∞–º—ã–∫–∞—é—â–∏–µ"
                    
            joints_info += f"‚ñ™Ô∏è {joint_type_text}, {joint_thickness_val} –º–º, {joint_color_val}: {joint_quantity_val} —à—Ç.\n"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞
        keyboard = ReplyKeyboardMarkup(
                        keyboard=[
                [KeyboardButton(text="‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å—Ç—ã–∫–∏")],
                [KeyboardButton(text="‚ùå –ù–µ—Ç, –ø–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ")],
                            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                        ],
                        resize_keyboard=True
                    )
            
            await message.answer(
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—ã–∫–∏:\n{joints_info}\n\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å—Ç—ã–∫–∏?",
            reply_markup=keyboard
        )
        
            db.close()
    except ValueError:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—ã–∫–æ–≤: {e}")
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )

@router.message(SalesStates.waiting_for_order_more_joints)
async def process_order_more_joints(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç—ã–∫–æ–≤"""
    user_choice = message.text.strip()
    
    if user_choice == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –û—Ç–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Å—Ç—ã–∫
        data = await state.get_data()
        selected_joints = data.get('selected_joints', [])
        
        if selected_joints:
            # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Å—Ç—ã–∫
            selected_joints.pop()
            await state.update_data(selected_joints=selected_joints)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            last_joint = data.get('last_joint', {})
            joint_type = last_joint.get('type', data.get('joint_type'))
            thickness = last_joint.get('thickness', data.get('joint_thickness'))
            color = last_joint.get('color', data.get('joint_color'))
            
    await message.answer(
                f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—ã–∫–æ–≤ ({joint_type}, {thickness} –º–º, {color}):",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
            await state.set_state(SalesStates.waiting_for_order_joint_quantity)
        return
        else:
            # –ï—Å–ª–∏ —Å—Ç—ã–∫–æ–≤ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Å—Ç—ã–∫–∞
        await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç—ã–∫–∞:",
                reply_markup=get_joint_type_keyboard()
        )
            await state.set_state(SalesStates.waiting_for_order_joint_type)
        return
    
    if user_choice == "‚úÖ –î–∞":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å—Ç—ã–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞
    await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç—ã–∫–∞:",
            reply_markup=get_joint_type_keyboard()
        )
        await state.set_state(SalesStates.waiting_for_order_joint_type)
    elif user_choice == "‚ùå –ù–µ—Ç":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª –≤—ã–±–æ—Ä —Å—Ç—ã–∫–æ–≤, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ –∫–ª–µ–µ
        await message.answer(
            "–ù—É–∂–µ–Ω –ª–∏ –∫–ª–µ–π –¥–ª—è —Å—Ç—ã–∫–æ–≤?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(SalesStates.waiting_for_order_glue_needed)
    else:
        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )

@router.message(SalesStates.waiting_for_order_delivery_address)
async def process_order_delivery_address(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    address = message.text.strip()
    
    # –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω, —Å—á–∏—Ç–∞–µ–º —Å–∞–º–æ–≤—ã–≤–æ–∑–æ–º
    if address.lower() == "–Ω–µ—Ç":
        address = "–°–∞–º–æ–≤—ã–≤–æ–∑"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
    await state.update_data(delivery_address=address)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
    selected_products = data.get('selected_products', [])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—ã–∫–∞—Ö
    selected_joints = data.get('selected_joints', [])
    
    need_joints = data.get('need_joints', False)
    need_glue = data.get('need_glue', False)
    glue_quantity = data.get('glue_quantity', 0)
    installation_required = data.get('installation_required', False)
    customer_phone = data.get('customer_phone', '')
    delivery_address = data.get('delivery_address', '')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
    order_summary = f"üìù –°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–∞:\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
    if selected_products:
        order_summary += f"üì¶ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n"
        total_panels = 0
        for product in selected_products:
            order_summary += f"‚ñ™Ô∏è {product['film_code']} (—Ç–æ–ª—â–∏–Ω–∞ {product['thickness']} –º–º): {product['quantity']} —à—Ç.\n"
            total_panels += product['quantity']
        order_summary += f"–í—Å–µ–≥–æ –ø–∞–Ω–µ–ª–µ–π: {total_panels} —à—Ç.\n\n"
    else:
        order_summary += "–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—ã–∫–∞—Ö
    if need_joints and selected_joints:
        order_summary += f"üîó –°—Ç—ã–∫–∏:\n"
        for joint in selected_joints:
            joint_type = joint.get('type', '')
            joint_type_text = ''
            if joint_type == 'butterfly' or joint_type == JointType.BUTTERFLY:
                joint_type_text = "–ë–∞–±–æ—á–∫–∞"
            elif joint_type == 'simple' or joint_type == JointType.SIMPLE:
                joint_type_text = "–ü—Ä–æ—Å—Ç—ã–µ"
            elif joint_type == 'closing' or joint_type == JointType.CLOSING:
                joint_type_text = "–ó–∞–º—ã–∫–∞—é—â–∏–µ"
            
            thickness = joint.get('thickness', '0.5')
            order_summary += f"‚ñ™Ô∏è {joint_type_text}, {thickness} –º–º, {joint.get('color', '')}: {joint.get('quantity', 0)} —à—Ç.\n"
        order_summary += "\n"
    else:
        order_summary += f"üîó –°—Ç—ã–∫–∏: –ù–µ—Ç\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    order_summary += f"üß¥ –ö–ª–µ–π: {glue_quantity} —Ç—é–±–∏–∫–æ–≤\n"
    order_summary += f"üîß –ú–æ–Ω—Ç–∞–∂: {'–¢—Ä–µ–±—É–µ—Ç—Å—è' if installation_required else '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}\n"
    order_summary += f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: {customer_phone}\n"
    order_summary += f"üöö –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_address}\n"
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await state.update_data(order_summary=order_summary)
    await state.set_state(MenuState.SALES_ORDER_CONFIRM)
    
    await message.answer(
        order_summary + "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:",
        reply_markup=get_menu_keyboard(MenuState.SALES_ORDER_CONFIRM)
    )
    await state.set_state(SalesStates.waiting_for_order_confirmation)

@router.message(SalesStates.waiting_for_order_confirmation)
async def process_order_confirmation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    if message.text.lower() != "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        await message.answer("–ó–∞–∫–∞–∑ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞ –ø–æ–∑–∂–µ.")
        await go_back(message, state)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    selected_products = data.get("selected_products", [])
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—ã–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    selected_joints = data.get('selected_joints', [])
    
    need_joints = selected_joints and len(selected_joints) > 0
    need_glue = data.get("need_glue", False)
    customer_phone = data.get("customer_phone", "")
    delivery_address = data.get("delivery_address", "")
    installation_required = data.get("installation_required", False)
    glue_quantity = data.get("glue_quantity", 0)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–∫–∞–∑–∞ (–≥–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è –∏–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ)
    db = next(get_db())
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ ID –≤ –±–∞–∑–µ
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        
        if not user:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            db.close()
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order = Order(
            manager_id=user.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∞ –Ω–µ telegram_id
            customer_phone=customer_phone,
            delivery_address=delivery_address,
            installation_required=installation_required,
            status=OrderStatus.NEW
        )
        db.add(order)
        db.flush()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ OrderItem
        for product in selected_products:
            film_code = product['film_code']
            thickness = float(product['thickness'])
            qty = product['quantity']
            
            film = db.query(Film).filter(Film.code == film_code).first()
            if not film:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è
            finished_product = db.query(FinishedProduct).join(Film).filter(
                Film.code == film_code,
                FinishedProduct.thickness == thickness
            ).first()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å OrderItem
            order_item = OrderItem(
                order_id=order.id,
                color=film_code,
                thickness=thickness,
                quantity=qty
            )
            db.add(order_item)
            
            if finished_product and finished_product.quantity >= qty:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –≥–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è, —É–º–µ–Ω—å—à–∞–µ–º –µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                finished_product.quantity -= qty
                
                # –°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏
                operation = Operation(
                    operation_type=OperationType.READY_PRODUCT_OUT.value,
                    quantity=qty,
                    user_id=user.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
                )
                db.add(operation)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏, —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
                production_order = ProductionOrder(
                    manager_id=user.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
                    panel_quantity=qty,
                    film_color=film_code,
                    panel_thickness=thickness,
                    status="new"
                )
                db.add(production_order)
        
        # –ï—Å–ª–∏ –Ω—É–∂–Ω—ã —Å—Ç—ã–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –∑–∞–∫–∞–∑
        if need_joints:
            if isinstance(selected_joints, list):
                # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç - —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ —Å—Ç—ã–∫–æ–≤
                for joint_data in selected_joints:
                    joint_type_val = joint_data.get('type')
                    thickness = joint_data.get('thickness')
                    color = joint_data.get('color')
                    quantity = joint_data.get('quantity')
                    
                    joint_type_text = ""
                    if joint_type_val == JointType.BUTTERFLY or joint_type_val == "butterfly":
                        joint_type_text = "–ë–∞–±–æ—á–∫–∞"
                    elif joint_type_val == JointType.SIMPLE or joint_type_val == "simple":
                        joint_type_text = "–ü—Ä–æ—Å—Ç—ã–µ"
                    elif joint_type_val == JointType.CLOSING or joint_type_val == "closing":
                        joint_type_text = "–ó–∞–º—ã–∫–∞—é—â–∏–µ"
                    
                    joints_info += f"‚ñ™Ô∏è {joint_type_text}, {thickness} –º–º, {color}: {quantity} —à—Ç.\n"
            elif isinstance(selected_joints, dict):
                # –°–ª–æ–≤–∞—Ä—å (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
                for joint_key, quantity in selected_joints.items():
                    joint_type_val, thickness, color = joint_key.split('|')
                    joint_type_text = ""
                    if joint_type_val == "butterfly":
                        joint_type_text = "–ë–∞–±–æ—á–∫–∞"
                    elif joint_type_val == "simple":
                        joint_type_text = "–ü—Ä–æ—Å—Ç—ã–µ"
                    elif joint_type_val == "closing":
                        joint_type_text = "–ó–∞–º—ã–∫–∞—é—â–∏–µ"
                    
                    joints_info += f"‚ñ™Ô∏è {joint_type_text}, {thickness} –º–º, {color}: {quantity} —à—Ç.\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–µ–µ –µ—Å–ª–∏ –æ–Ω –Ω—É–∂–µ–Ω
        glue_info = ""
        if need_glue and glue_quantity > 0:
            glue_info = f"\n–ö–ª–µ–π: {glue_quantity} —à—Ç.\n"
        
        # –°–±–æ—Ä–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        installation_text = "–î–∞" if installation_required else "–ù–µ—Ç"
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
        confirmation_message = (
            f"‚úÖ –ó–∞–∫–∞–∑ #{order.id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
            f"{products_info}"
            f"{joints_info}"
            f"{glue_info}"
            f"–ú–æ–Ω—Ç–∞–∂: {installation_text}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {customer_phone}\n"
            f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_address}\n\n"
            f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {order.status.value}"
        )
        
        await message.answer(confirmation_message)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await go_back(message, state)
    
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        db.close()

@router.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É")
async def handle_back_to_admin(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞"""
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user or user.role != UserRole.SUPER_ADMIN:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–¥–º–∏–Ω–∞
        await state.update_data(is_admin_context=False)
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
        await state.set_state(MenuState.SUPER_ADMIN_MAIN)
        await message.answer(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=get_menu_keyboard(MenuState.SUPER_ADMIN_MAIN)
        )
    finally:
        db.close()

@router.message(SalesStates.waiting_for_order_glue_needed)
async def process_order_glue_needed(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–ª–µ—è –¥–ª—è —Å—Ç—ã–∫–æ–≤"""
    user_choice = message.text.strip()
    
    if user_choice == "‚úÖ –î–∞":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª–µ—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = next(get_db())
        try:
            glue = db.query(Glue).filter(Glue.quantity > 0).first()
            
            if not glue:
                await message.answer(
                    "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–ª–µ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ.",
                    reply_markup=ReplyKeyboardMarkup(
                        keyboard=[
                            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                        ],
                        resize_keyboard=True
                    )
                )
                return
            
            await message.answer(
                f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—é–±–∏–∫–æ–≤ –∫–ª–µ—è (–¥–æ—Å—Ç—É–ø–Ω–æ: {glue.quantity} —à—Ç.):",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                    ],
                    resize_keyboard=True
                )
            )
            await state.set_state(SalesStates.waiting_for_order_glue_quantity)
        finally:
            db.close()
    elif user_choice == "‚ùå –ù–µ—Ç":
        # –ö–ª–µ–π –Ω–µ –Ω—É–∂–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω—É–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        await state.update_data(glue_quantity=0)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –æ –º–æ–Ω—Ç–∞–∂–µ
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        await message.answer(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –º–æ–Ω—Ç–∞–∂?",
            reply_markup=keyboard
        )
        await state.set_state(SalesStates.waiting_for_order_installation)
    else:
        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )

@router.message(SalesStates.waiting_for_order_installation)
async def process_order_installation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–Ω—Ç–∞–∂–∞"""
    response = message.text.strip()
    
    if response == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É - –∑–∞–ø—Ä–æ—Å—É –æ –∫–ª–µ–µ
        await message.answer(
            "–í–∞–º –Ω—É–∂–µ–Ω –∫–ª–µ–π?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞")],
                    [KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(SalesStates.waiting_for_order_glue_needed)
        return

    installation_required = False
    if response == "‚úÖ –î–∞":
        installation_required = True
    elif response == "‚ùå –ù–µ—Ç":
        installation_required = False
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞")],
                    [KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    await state.update_data(installation_required=installation_required)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:",
        reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
    )
    await state.set_state(SalesStates.waiting_for_order_customer_phone)

@router.message(SalesStates.waiting_for_order_customer_phone)
async def process_order_customer_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
    phone = message.text.strip()
    
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É - –∑–∞–ø—Ä–æ—Å—É –æ –º–æ–Ω—Ç–∞–∂–µ
        await message.answer(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –º–æ–Ω—Ç–∞–∂?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞")],
                    [KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(SalesStates.waiting_for_order_installation)
        return
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not phone or len(phone) < 5:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
            reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.update_data(customer_phone=phone)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç' –µ—Å–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑):",
        reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
    )
    await state.set_state(SalesStates.waiting_for_order_delivery_address)

@router.message(SalesStates.waiting_for_order_glue_quantity)
async def process_order_glue_quantity(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–µ—è"""
    try:
        quantity = int(message.text.strip())
        if quantity <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–ª–µ–µ
        data = await state.get_data()
        glue_quantity = quantity
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—è
        await state.update_data(glue_quantity=glue_quantity)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –æ –º–æ–Ω—Ç–∞–∂–µ
        await message.answer(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –º–æ–Ω—Ç–∞–∂?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(SalesStates.waiting_for_order_installation)
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )

@router.message(SalesStates.waiting_for_order_glue_needed)
async def process_order_glue_needed(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–ª–µ—è –¥–ª—è —Å—Ç—ã–∫–æ–≤"""
    user_choice = message.text.strip()
    
    if user_choice == "‚úÖ –î–∞":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª–µ—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = next(get_db())
        try:
            glue = db.query(Glue).filter(Glue.quantity > 0).first()
            
            if not glue:
                await message.answer(
                    "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–ª–µ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ.",
                    reply_markup=ReplyKeyboardMarkup(
                        keyboard=[
                            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                        ],
                        resize_keyboard=True
                    )
                )
                return
            
            await message.answer(
                f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—é–±–∏–∫–æ–≤ –∫–ª–µ—è (–¥–æ—Å—Ç—É–ø–Ω–æ: {glue.quantity} —à—Ç.):",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                    ],
                    resize_keyboard=True
                )
            )
            await state.set_state(SalesStates.waiting_for_order_glue_quantity)
        finally:
            db.close()
    elif user_choice == "‚ùå –ù–µ—Ç":
        # –ö–ª–µ–π –Ω–µ –Ω—É–∂–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω—É–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        await state.update_data(glue_quantity=0)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –æ –º–æ–Ω—Ç–∞–∂–µ
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        await message.answer(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –º–æ–Ω—Ç–∞–∂?",
            reply_markup=keyboard
        )
        await state.set_state(SalesStates.waiting_for_order_installation)
    else:
        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )

@router.message(SalesStates.waiting_for_order_installation)
async def process_order_installation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–Ω—Ç–∞–∂–∞"""
    response = message.text.strip()
    
    if response == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É - –∑–∞–ø—Ä–æ—Å—É –æ –∫–ª–µ–µ
        await message.answer(
            "–í–∞–º –Ω—É–∂–µ–Ω –∫–ª–µ–π?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞")],
                    [KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(SalesStates.waiting_for_order_glue_needed)
        return

    installation_required = False
    if response == "‚úÖ –î–∞":
        installation_required = True
    elif response == "‚ùå –ù–µ—Ç":
        installation_required = False
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞")],
                    [KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    await state.update_data(installation_required=installation_required)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:",
        reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
    )
    await state.set_state(SalesStates.waiting_for_order_customer_phone)

@router.message(SalesStates.waiting_for_order_customer_phone)
async def process_order_customer_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
    phone = message.text.strip()
    
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É - –∑–∞–ø—Ä–æ—Å—É –æ –º–æ–Ω—Ç–∞–∂–µ
        await message.answer(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –º–æ–Ω—Ç–∞–∂?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞")],
                    [KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(SalesStates.waiting_for_order_installation)
        return
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not phone or len(phone) < 5:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
            reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.update_data(customer_phone=phone)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç' –µ—Å–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑):",
        reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
    )
    await state.set_state(SalesStates.waiting_for_order_delivery_address)

@router.message(SalesStates.waiting_for_order_delivery_address)
async def process_order_delivery_address(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    address = message.text.strip()
    
    # –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω, —Å—á–∏—Ç–∞–µ–º —Å–∞–º–æ–≤—ã–≤–æ–∑–æ–º
    if address.lower() == "–Ω–µ—Ç":
        address = "–°–∞–º–æ–≤—ã–≤–æ–∑"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
    await state.update_data(delivery_address=address)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
    selected_products = data.get('selected_products', [])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—ã–∫–∞—Ö
    selected_joints = data.get('selected_joints', [])
    
    need_joints = data.get('need_joints', False)
    need_glue = data.get('need_glue', False)
    glue_quantity = data.get('glue_quantity', 0)
    installation_required = data.get('installation_required', False)
    customer_phone = data.get('customer_phone', '')
    delivery_address = data.get('delivery_address', '')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
    order_summary = f"üìù –°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–∞:\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
    if selected_products:
        order_summary += f"üì¶ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n"
        total_panels = 0
        for product in selected_products:
            order_summary += f"‚ñ™Ô∏è {product['film_code']} (—Ç–æ–ª—â–∏–Ω–∞ {product['thickness']} –º–º): {product['quantity']} —à—Ç.\n"
            total_panels += product['quantity']
        order_summary += f"–í—Å–µ–≥–æ –ø–∞–Ω–µ–ª–µ–π: {total_panels} —à—Ç.\n\n"
    else:
        order_summary += "–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—ã–∫–∞—Ö
    if need_joints and selected_joints:
        order_summary += f"üîó –°—Ç—ã–∫–∏:\n"
        for joint in selected_joints:
            joint_type = joint.get('type', '')
            joint_type_text = ''
            if joint_type == 'butterfly' or joint_type == JointType.BUTTERFLY:
                joint_type_text = "–ë–∞–±–æ—á–∫–∞"
            elif joint_type == 'simple' or joint_type == JointType.SIMPLE:
                joint_type_text = "–ü—Ä–æ—Å—Ç—ã–µ"
            elif joint_type == 'closing' or joint_type == JointType.CLOSING:
                joint_type_text = "–ó–∞–º—ã–∫–∞—é—â–∏–µ"
            
            thickness = joint.get('thickness', '0.5')
            order_summary += f"‚ñ™Ô∏è {joint_type_text}, {thickness} –º–º, {joint.get('color', '')}: {joint.get('quantity', 0)} —à—Ç.\n"
        order_summary += "\n"
    else:
        order_summary += f"üîó –°—Ç—ã–∫–∏: –ù–µ—Ç\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    order_summary += f"üß¥ –ö–ª–µ–π: {glue_quantity} —Ç—é–±–∏–∫–æ–≤\n"
    order_summary += f"üîß –ú–æ–Ω—Ç–∞–∂: {'–¢—Ä–µ–±—É–µ—Ç—Å—è' if installation_required else '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}\n"
    order_summary += f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: {customer_phone}\n"
    order_summary += f"üöö –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_address}\n"
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await state.update_data(order_summary=order_summary)
    await state.set_state(MenuState.SALES_ORDER_CONFIRM)
    
    await message.answer(
        order_summary + "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:",
        reply_markup=get_menu_keyboard(MenuState.SALES_ORDER_CONFIRM)
    )
    await state.set_state(SalesStates.waiting_for_order_confirmation)

@router.message(SalesStates.waiting_for_order_confirmation)
async def process_order_confirmation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    if message.text.lower() != "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        await message.answer("–ó–∞–∫–∞–∑ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞ –ø–æ–∑–∂–µ.")
        await go_back(message, state)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    selected_products = data.get("selected_products", [])
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—ã–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    selected_joints = data.get('selected_joints', [])
    
    need_joints = selected_joints and len(selected_joints) > 0
    need_glue = data.get("need_glue", False)
    customer_phone = data.get("customer_phone", "")
    delivery_address = data.get("delivery_address", "")
    installation_required = data.get("installation_required", False)
    glue_quantity = data.get("glue_quantity", 0)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–∫–∞–∑–∞ (–≥–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è –∏–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ)
    db = next(get_db())
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ ID –≤ –±–∞–∑–µ
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        
        if not user:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            db.close()
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order = Order(
            manager_id=user.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∞ –Ω–µ telegram_id
            customer_phone=customer_phone,
            delivery_address=delivery_address,
            installation_required=installation_required,
            status=OrderStatus.NEW
        )
        db.add(order)
        db.flush()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ OrderItem
        for product in selected_products:
            film_code = product['film_code']
            thickness = float(product['thickness'])
            qty = product['quantity']
            
            film = db.query(Film).filter(Film.code == film_code).first()
            if not film:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è
            finished_product = db.query(FinishedProduct).join(Film).filter(
                Film.code == film_code,
                FinishedProduct.thickness == thickness
            ).first()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å OrderItem
            order_item = OrderItem(
                order_id=order.id,
                color=film_code,
                thickness=thickness,
                quantity=qty
            )
            db.add(order_item)
            
            if finished_product and finished_product.quantity >= qty:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –≥–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è, —É–º–µ–Ω—å—à–∞–µ–º –µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                finished_product.quantity -= qty
                
                # –°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏
                operation = Operation(
                    operation_type=OperationType.READY_PRODUCT_OUT.value,
                    quantity=qty,
                    user_id=user.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
                )
                db.add(operation)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏, —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
                production_order = ProductionOrder(
                    manager_id=user.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
                    panel_quantity=qty,
                    film_color=film_code,
                    panel_thickness=thickness,
                    status="new"
                )
                db.add(production_order)
        
        # –ï—Å–ª–∏ –Ω—É–∂–Ω—ã —Å—Ç—ã–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –∑–∞–∫–∞–∑
        if need_joints:
            if isinstance(selected_joints, list):
                # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç - —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ —Å—Ç—ã–∫–æ–≤
                for joint_data in selected_joints:
                    joint_type_val = joint_data.get('type')
                    thickness = joint_data.get('thickness')
                    color = joint_data.get('color')
                    quantity = joint_data.get('quantity')
                    
                    joint_type_text = ""
                    if joint_type_val == JointType.BUTTERFLY or joint_type_val == "butterfly":
                        joint_type_text = "–ë–∞–±–æ—á–∫–∞"
                    elif joint_type_val == JointType.SIMPLE or joint_type_val == "simple":
                        joint_type_text = "–ü—Ä–æ—Å—Ç—ã–µ"
                    elif joint_type_val == JointType.CLOSING or joint_type_val == "closing":
                        joint_type_text = "–ó–∞–º—ã–∫–∞—é—â–∏–µ"
                    
                    joints_info += f"‚ñ™Ô∏è {joint_type_text}, {thickness} –º–º, {color}: {quantity} —à—Ç.\n"
            elif isinstance(selected_joints, dict):
                # –°–ª–æ–≤–∞—Ä—å (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
                for joint_key, quantity in selected_joints.items():
                    joint_type_val, thickness, color = joint_key.split('|')
                    joint_type_text = ""
                    if joint_type_val == "butterfly":
                        joint_type_text = "–ë–∞–±–æ—á–∫–∞"
                    elif joint_type_val == "simple":
                        joint_type_text = "–ü—Ä–æ—Å—Ç—ã–µ"
                    elif joint_type_val == "closing":
                        joint_type_text = "–ó–∞–º—ã–∫–∞—é—â–∏–µ"
                    
                    joints_info += f"‚ñ™Ô∏è {joint_type_text}, {thickness} –º–º, {color}: {quantity} —à—Ç.\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–µ–µ –µ—Å–ª–∏ –æ–Ω –Ω—É–∂–µ–Ω
        glue_info = ""
        if need_glue and glue_quantity > 0:
            glue_info = f"\n–ö–ª–µ–π: {glue_quantity} —à—Ç.\n"
        
        # –°–±–æ—Ä–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        installation_text = "–î–∞" if installation_required else "–ù–µ—Ç"
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
        confirmation_message = (
            f"‚úÖ –ó–∞–∫–∞–∑ #{order.id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
            f"{products_info}"
            f"{joints_info}"
            f"{glue_info}"
            f"–ú–æ–Ω—Ç–∞–∂: {installation_text}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {customer_phone}\n"
            f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_address}\n\n"
            f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {order.status.value}"
        )
        
        await message.answer(confirmation_message)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await go_back(message, state)
    
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        db.close()

@router.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É")
async def handle_back_to_admin(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞"""
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user or user.role != UserRole.SUPER_ADMIN:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–¥–º–∏–Ω–∞
        await state.update_data(is_admin_context=False)
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
        await state.set_state(MenuState.SUPER_ADMIN_MAIN)
        await message.answer(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=get_menu_keyboard(MenuState.SUPER_ADMIN_MAIN)
        )
    finally:
        db.close()

@router.message(SalesStates.waiting_for_order_glue_needed)
async def process_order_glue_needed(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–ª–µ—è –¥–ª—è —Å—Ç—ã–∫–æ–≤"""
    user_choice = message.text.strip()
    
    if user_choice == "‚úÖ –î–∞":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª–µ—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = next(get_db())
        try:
            glue = db.query(Glue).filter(Glue.quantity > 0).first()
            
            if not glue:
                await message.answer(
                    "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–ª–µ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ.",
                    reply_markup=ReplyKeyboardMarkup(
                        keyboard=[
                            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                        ],
                        resize_keyboard=True
                    )
                )
                return
            
            await message.answer(
                f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—é–±–∏–∫–æ–≤ –∫–ª–µ—è (–¥–æ—Å—Ç—É–ø–Ω–æ: {glue.quantity} —à—Ç.):",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                    ],
                    resize_keyboard=True
                )
            )
            await state.set_state(SalesStates.waiting_for_order_glue_quantity)
        finally:
            db.close()
    elif user_choice == "‚ùå –ù–µ—Ç":
        # –ö–ª–µ–π –Ω–µ –Ω—É–∂–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω—É–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        await state.update_data(glue_quantity=0)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –æ –º–æ–Ω—Ç–∞–∂–µ
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        await message.answer(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –º–æ–Ω—Ç–∞–∂?",
            reply_markup=keyboard
        )
        await state.set_state(SalesStates.waiting_for_order_installation)
    else:
        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )

@router.message(SalesStates.waiting_for_order_installation)
async def process_order_installation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–Ω—Ç–∞–∂–∞"""
    response = message.text.strip()
    
    if response == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É - –∑–∞–ø—Ä–æ—Å—É –æ –∫–ª–µ–µ
        await message.answer(
            "–í–∞–º –Ω—É–∂–µ–Ω –∫–ª–µ–π?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞")],
                    [KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(SalesStates.waiting_for_order_glue_needed)
        return

    installation_required = False
    if response == "‚úÖ –î–∞":
        installation_required = True
    elif response == "‚ùå –ù–µ—Ç":
        installation_required = False
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞")],
                    [KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    await state.update_data(installation_required=installation_required)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:",
        reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
    )
    await state.set_state(SalesStates.waiting_for_order_customer_phone)

@router.message(SalesStates.waiting_for_order_customer_phone)
async def process_order_customer_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
    phone = message.text.strip()
    
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É - –∑–∞–ø—Ä–æ—Å—É –æ –º–æ–Ω—Ç–∞–∂–µ
        await message.answer(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –º–æ–Ω—Ç–∞–∂?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞")],
                    [KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(SalesStates.waiting_for_order_installation)
        return
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not phone or len(phone) < 5:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
            reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.update_data(customer_phone=phone)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç' –µ—Å–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑):",
        reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
    )
    await state.set_state(SalesStates.waiting_for_order_delivery_address)

@router.message(SalesStates.waiting_for_order_glue_quantity)
async def process_order_glue_quantity(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–µ—è"""
    try:
        quantity = int(message.text.strip())
        if quantity <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–ª–µ–µ
        data = await state.get_data()
        glue_quantity = quantity
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—è
        await state.update_data(glue_quantity=glue_quantity)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –æ –º–æ–Ω—Ç–∞–∂–µ
        await message.answer(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –º–æ–Ω—Ç–∞–∂?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(SalesStates.waiting_for_order_installation)
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )

@router.message(SalesStates.waiting_for_order_glue_needed)
async def process_order_glue_needed(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–ª–µ—è –¥–ª—è —Å—Ç—ã–∫–æ–≤"""
    user_choice = message.text.strip()
    
    if user_choice == "‚úÖ –î–∞":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª–µ—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = next(get_db())
        try:
            glue = db.query(Glue).filter(Glue.quantity > 0).first()
            
            if not glue:
                await message.answer(
                    "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–ª–µ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ.",
                    reply_markup=ReplyKeyboardMarkup(
                        keyboard=[
                            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                        ],
                        resize_keyboard=True
                    )
                )
                return
            
            await message.answer(
                f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—é–±–∏–∫–æ–≤ –∫–ª–µ—è (–¥–æ—Å—Ç—É–ø–Ω–æ: {glue.quantity} —à—Ç.):",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                    ],
                    resize_keyboard=True
                )
            )
            await state.set_state(SalesStates.waiting_for_order_glue_quantity)
        finally:
            db.close()
    elif user_choice == "‚ùå –ù–µ—Ç":
        # –ö–ª–µ–π –Ω–µ –Ω—É–∂–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω—É–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        await state.update_data(glue_quantity=0)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –æ –º–æ–Ω—Ç–∞–∂–µ
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        await message.answer(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –º–æ–Ω—Ç–∞–∂?",
            reply_markup=keyboard
        )
        await state.set_state(SalesStates.waiting_for_order_installation)
    else:
        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )

@router.message(SalesStates.waiting_for_order_installation)
async def process_order_installation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–Ω—Ç–∞–∂–∞"""
    response = message.text.strip()
    
    if response == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É - –∑–∞–ø—Ä–æ—Å—É –æ –∫–ª–µ–µ
        await message.answer(
            "–í–∞–º –Ω—É–∂–µ–Ω –∫–ª–µ–π?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞")],
                    [KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(SalesStates.waiting_for_order_glue_needed)
        return

    installation_required = False
    if response == "‚úÖ –î–∞":
        installation_required = True
    elif response == "‚ùå –ù–µ—Ç":
        installation_required = False
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞")],
                    [KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    await state.update_data(installation_required=installation_required)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:",
        reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
    )
    await state.set_state(SalesStates.waiting_for_order_customer_phone)

@router.message(SalesStates.waiting_for_order_customer_phone)
async def process_order_customer_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
    phone = message.text.strip()
    
    if message.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É - –∑–∞–ø—Ä–æ—Å—É –æ –º–æ–Ω—Ç–∞–∂–µ
        await message.answer(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –º–æ–Ω—Ç–∞–∂?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞")],
                    [KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(SalesStates.waiting_for_order_installation)
        return
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not phone or len(phone) < 5:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
            reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.update_data(customer_phone=phone)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç' –µ—Å–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑):",
        reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
    )
    await state.set_state(SalesStates.waiting_for_order_delivery_address)

@router.message(SalesStates.waiting_for_order_delivery_address)
async def process_order_delivery_address(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    address = message.text.strip()
    
    # –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω, —Å—á–∏—Ç–∞–µ–º —Å–∞–º–æ–≤—ã–≤–æ–∑–æ–º
    if address.lower() == "–Ω–µ—Ç":
        address = "–°–∞–º–æ–≤—ã–≤–æ–∑"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
    await state.update_data(delivery_address=address)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
    selected_products = data.get('selected_products', [])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—ã–∫–∞—Ö
    selected_joints = data.get('selected_joints', [])
    
    need_joints = data.get('need_joints', False)
    need_glue = data.get('need_glue', False)
    glue_quantity = data.get('glue_quantity', 0)
    installation_required = data.get('installation_required', False)
    customer_phone = data.get('customer_phone', '')
    delivery_address = data.get('delivery_address', '')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
    order_summary = f"üìù –°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–∞:\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
    if selected_products:
        order_summary += f"üì¶ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n"
        total_panels = 0
        for product in selected_products:
            order_summary += f"‚ñ™Ô∏è {product['film_code']} (—Ç–æ–ª—â–∏–Ω–∞ {product['thickness']} –º–º): {product['quantity']} —à—Ç.\n"
            total_panels += product['quantity']
        order_summary += f"–í—Å–µ–≥–æ –ø–∞–Ω–µ–ª–µ–π: {total_panels} —à—Ç.\n\n"
    else:
        order_summary += "–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—ã–∫–∞—Ö
    if need_joints and selected_joints:
        order_summary += f"üîó –°—Ç—ã–∫–∏:\n"
        for joint in selected_joints:
            joint_type = joint.get('type', '')
            joint_type_text = ''
            if joint_type == 'butterfly' or joint_type == JointType.BUTTERFLY:
                joint_type_text = "–ë–∞–±–æ—á–∫–∞"
            elif joint_type == 'simple' or joint_type == JointType.SIMPLE:
                joint_type_text = "–ü—Ä–æ—Å—Ç—ã–µ"
            elif joint_type == 'closing' or joint_type == JointType.CLOSING:
                joint_type_text = "–ó–∞–º—ã–∫–∞—é—â–∏–µ"
            
            thickness = joint.get('thickness', '0.5')
            order_summary += f"‚ñ™Ô∏è {joint_type_text}, {thickness} –º–º, {joint.get('color', '')}: {joint.get('quantity', 0)} —à—Ç.\n"
        order_summary += "\n"
    else:
        order_summary += f"üîó –°—Ç—ã–∫–∏: –ù–µ—Ç\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    order_summary += f"üß¥ –ö–ª–µ–π: {glue_quantity} —Ç—é–±–∏–∫–æ–≤\n"
    order_summary += f"üîß –ú–æ–Ω—Ç–∞–∂: {'–¢—Ä–µ–±—É–µ—Ç—Å—è' if installation_required else '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}\n"
    order_summary += f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: {customer_phone}\n"
    order_summary += f"üöö –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_address}\n"
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await state.update_data(order_summary=order_summary)
    await state.set_state(MenuState.SALES_ORDER_CONFIRM)
    
    await message.answer(
        order_summary + "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:",
        reply_markup=get_menu_keyboard(MenuState.SALES_ORDER_CONFIRM)
    )
    await state.set_state(SalesStates.waiting_for_order_confirmation)

@router.message(SalesStates.waiting_for_order_confirmation)
async def process_order_confirmation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    if message.text.lower() != "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        await message.answer("–ó–∞–∫–∞–∑ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞ –ø–æ–∑–∂–µ.")
        await go_back(message, state)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    selected_products = data.get("selected_products", [])
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—ã–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    selected_joints = data.get('selected_joints', [])
    
    need_joints = selected_joints and len(selected_joints) > 0
    need_glue = data.get("need_glue", False)
    customer_phone = data.get("customer_phone", "")
    delivery_address = data.get("delivery_address", "")
    installation_required = data.get("installation_required", False)
    glue_quantity = data.get("glue_quantity", 0)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–∫–∞–∑–∞ (–≥–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è –∏–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ)
    db = next(get_db())
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ ID –≤ –±–∞–∑–µ
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        
        if not user:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            db.close()
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order = Order(
            manager_id=user.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∞ –Ω–µ telegram_id
            customer_phone=customer_phone,
            delivery_address=delivery_address,
            installation_required=installation_required,
            status=OrderStatus.NEW
        )
        db.add(order)
        db.flush()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ OrderItem
        for product in selected_products:
            film_code = product['film_code']
            thickness = float(product['thickness'])
            qty = product['quantity']
            
            film = db.query(Film).filter(Film.code == film_code).first()
            if not film:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è
            finished_product = db.query(FinishedProduct).join(Film).filter(
                Film.code == film_code,
                FinishedProduct.thickness == thickness
            ).first()
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å OrderItem
            order_item = OrderItem(
                order_id=order.id,
                color=film_code,
                thickness=thickness,
                quantity=qty
            )
            db.add(order_item)
            
            if finished_product and finished_product.quantity >= qty:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –≥–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è, —É–º–µ–Ω—å—à–∞–µ–º –µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                finished_product.quantity -= qty
                
                # –°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏
                operation = Operation(
                    operation_type=OperationType.READY_PRODUCT_OUT.value,
                    quantity=qty,
                    user_id=user.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
                )
                db.add(operation)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏, —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
                production_order = ProductionOrder(
                    manager_id=user.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
                    panel_quantity=qty,
                    film_color=film_code,
                    panel_thickness=thickness,
                    status="new"
                )
                db.add(production_order)
        
        # –ï—Å–ª–∏ –Ω—É–∂–Ω—ã —Å—Ç—ã–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –∑–∞–∫–∞–∑
        if need_joints:
            if isinstance(selected_joints, list):
                # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç - —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ —Å—Ç—ã–∫–æ–≤
                for joint_data in selected_joints:
                    joint_type_val = joint_data.get('type')
                    thickness = joint_data.get('thickness')
                    color = joint_data.get('color')
                    quantity = joint_data.get('quantity')
                    
                    joint_type_text = ""
                    if joint_type_val == JointType.BUTTERFLY or joint_type_val == "butterfly":
                        joint_type_text = "–ë–∞–±–æ—á–∫–∞"
                    elif joint_type_val == JointType.SIMPLE or joint_type_val == "simple":
                        joint_type_text = "–ü—Ä–æ—Å—Ç—ã–µ"
                    elif joint_type_val == JointType.CLOSING or joint_type_val == "closing":
                        joint_type_text = "–ó–∞–º—ã–∫–∞—é—â–∏–µ"
                    
                    joints_info += f"‚ñ™Ô∏è {joint_type_text}, {thickness} –º–º, {color}: {quantity} —à—Ç.\n"
            elif isinstance(selected_joints, dict):
                # –°–ª–æ–≤–∞—Ä—å (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
                for joint_key, quantity in selected_joints.items():
                    joint_type_val, thickness, color = joint_key.split('|')
                    joint_type_text = ""
                    if joint_type_val == "butterfly":
                        joint_type_text = "–ë–∞–±–æ—á–∫–∞"
                    elif joint_type_val == "simple":
                        joint_type_text = "–ü—Ä–æ—Å—Ç—ã–µ"
                    elif joint_type_val == "closing":
                        joint_type_text = "–ó–∞–º—ã–∫–∞—é—â–∏–µ"
                    
                    joints_info += f"‚ñ™Ô∏è {joint_type_text}, {thickness} –º–º, {color}: {quantity} —à—Ç.\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–µ–µ –µ—Å–ª–∏ –æ–Ω –Ω—É–∂–µ–Ω
        glue_info = ""
        if need_glue and glue_quantity > 0:
            glue_info = f"\n–ö–ª–µ–π: {glue_quantity} —à—Ç.\n"
        
        # –°–±–æ—Ä–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        installation_text = "–î–∞" if installation_required else "–ù–µ—Ç"
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
        confirmation_message = (
            f"‚úÖ –ó–∞–∫–∞–∑ #{order.id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
            f"{products_info}"
            f"{joints_info}"
            f"{glue_info}"
            f"–ú–æ–Ω—Ç–∞–∂: {installation_text}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {customer_phone}\n"
            f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_address}\n\n"
            f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {order.status.value}"
        )
        
        await message.answer(confirmation_message)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await go_back(message, state)
    
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
    
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
        db.close()

@router.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É")
async def handle_back_to_admin(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞"""
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user or user.role != UserRole.SUPER_ADMIN:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–¥–º–∏–Ω–∞
        await state.update_data(is_admin_context=False)
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
        await state.set_state(MenuState.SUPER_ADMIN_MAIN)
        await message.answer(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=get_menu_keyboard(MenuState.SUPER_ADMIN_MAIN)
        )
    finally:
        db.close()

@router.message(SalesStates.waiting_for_order_glue_needed)
async def process_order_glue_needed(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–ª–µ—è –¥–ª—è —Å—Ç—ã–∫–æ–≤"""
    user_choice = message.text.strip()
    
    if user_choice == "‚úÖ –î–∞":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª–µ—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = next(get_db())
        try:
            glue = db.query(Glue).filter(Glue.quantity > 0).first()
            
            if not glue:
                await message.answer(
                    "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–ª–µ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ.",
                    reply_markup=ReplyKeyboardMarkup(
                        keyboard=[
                            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                        ],
                        resize_keyboard=True
                    )
                )
                return
            
            await message.answer(
                f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—é–±–∏–∫–æ–≤ –∫–ª–µ—è (–¥–æ—Å—Ç—É–ø–Ω–æ: {glue.quantity} —à—Ç.):",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                    ],
                    resize_keyboard=True
                )
            )
            await state.set_state(SalesStates.waiting_for_order_glue_quantity)
        finally:
            db.close()
    elif user_choice == "‚ùå –ù–µ—Ç":
        # –ö–ª–µ–π –Ω–µ –Ω—É–∂–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω—É–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        await state.update_data(glue_quantity=0)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –æ –º–æ–Ω—Ç–∞–∂–µ
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        await message.answer(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –º–æ–Ω—Ç–∞–∂?",
            reply_markup=keyboard
        )
        await state.set_state(SalesStates.waiting_for_order_installation)
    else:
        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥
        await message.answer(
        await state.update_