from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from models import User, UserRole, Film, Panel, Joint, Glue, FinishedProduct, Operation, JointType, Order, ProductionOrder, OrderStatus, OrderJoint, OrderGlue, OperationType, OrderItem
from database import get_db
import json
import logging
from navigation import MenuState, get_menu_keyboard, go_back
import re
from states import SalesStates
from typing import Optional, Dict, List, Any, Union
from sqlalchemy import select

router = Router()

def get_joint_type_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ —Å—Ç—ã–∫–æ–≤"""
    db = next(get_db())
    try:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç—ã–∫–∏ –ø–æ —Ç–∏–ø—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ
        butterfly_joints = db.query(Joint).filter(Joint.type == JointType.BUTTERFLY, Joint.quantity > 0).first()
        simple_joints = db.query(Joint).filter(Joint.type == JointType.SIMPLE, Joint.quantity > 0).first()
        closing_joints = db.query(Joint).filter(Joint.type == JointType.CLOSING, Joint.quantity > 0).first()
        
        keyboard = []
        if butterfly_joints:
            keyboard.append([KeyboardButton(text="ü¶ã –ë–∞–±–æ—á–∫–∞")])
        if simple_joints:
            keyboard.append([KeyboardButton(text="üîÑ –ü—Ä–æ—Å—Ç—ã–µ")])
        if closing_joints:
            keyboard.append([KeyboardButton(text="üîí –ó–∞–º—ã–∫–∞—é—â–∏–µ")])
        
        keyboard.append([KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")])
        
        return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    finally:
        db.close()

async def check_sales_access(message: Message) -> bool:
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user or (user.role != UserRole.SALES_MANAGER and user.role != UserRole.SUPER_ADMIN):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return False
        return True
    finally:
        db.close()

@router.message(F.text == "üìù –°–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑")
async def handle_create_order(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    if not await check_sales_access(message):
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–ª–∞–≥ –∞–¥–º–∏–Ω-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    state_data = await state.get_data()
    is_admin_context = state_data.get("is_admin_context", False)
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–¥–º–∏–Ω-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–Ω–æ–≤–∞
    if is_admin_context:
        await state.update_data(is_admin_context=True)
    
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–ª—â–∏–Ω –ø–∞–Ω–µ–ª–µ–π, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –≥–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è
        thicknesses = db.query(FinishedProduct.thickness).distinct().all()
        available_thicknesses = [str(thickness[0]) for thickness in thicknesses]
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–ª—â–∏–Ω, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        if not available_thicknesses:
            await message.answer(
                "–ù–∞ —Å–∫–ª–∞–¥–µ –Ω–µ—Ç –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É.",
                reply_markup=get_menu_keyboard(MenuState.SALES_MAIN, is_admin_context=is_admin_context)
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç–æ–ª—â–∏–Ω–∞–º–∏
        keyboard_rows = []
        for thickness in available_thicknesses:
            keyboard_rows.append([KeyboardButton(text=thickness)])
        keyboard_rows.append([KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")])
        
        keyboard = ReplyKeyboardMarkup(
            keyboard=keyboard_rows,
            resize_keyboard=True
        )
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—â–∏–Ω—É –ø–∞–Ω–µ–ª–µ–π (–º–º):",
            reply_markup=keyboard
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        await state.update_data(selected_products=[])
        await state.update_data(selected_joints=[])
        await state.set_state(SalesStates.product_thickness)
    finally:
        db.close()

@router.message(SalesStates.product_thickness)
async def process_product_thickness(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–ª—â–∏–Ω—ã –ø–∞–Ω–µ–ª–µ–π"""
    thickness_text = message.text.strip()
    
    if thickness_text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        state_data = await state.get_data()
        is_admin_context = state_data.get("is_admin_context", False)
        
        await state.set_state(MenuState.SALES_MAIN)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_menu_keyboard(MenuState.SALES_MAIN, is_admin_context=is_admin_context)
        )
        return
    
    try:
        thickness = float(thickness_text)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–æ–ª—â–∏–Ω—É
        await state.update_data(current_thickness=thickness)
        
        db = next(get_db())
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ–ª—â–∏–Ω—ã
            finished_products = db.query(FinishedProduct).join(Film).filter(
                FinishedProduct.thickness == thickness,
                FinishedProduct.quantity > 0
            ).all()
            
            if not finished_products:
                await message.answer(
                    f"–î–ª—è —Ç–æ–ª—â–∏–Ω—ã {thickness} –º–º –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ.",
                    reply_markup=ReplyKeyboardMarkup(
                        keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
                        resize_keyboard=True
                    )
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏ –ø–ª–µ–Ω–∫–∏ –¥–ª—è —ç—Ç–æ–π —Ç–æ–ª—â–∏–Ω—ã
            keyboard_rows = []
            for product in finished_products:
                keyboard_rows.append([KeyboardButton(
                    text=f"{product.film.code} (–æ—Å—Ç–∞—Ç–æ–∫: {product.quantity} —à—Ç.)"
                )])
            
            keyboard_rows.append([KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")])
            keyboard = ReplyKeyboardMarkup(keyboard=keyboard_rows, resize_keyboard=True)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞
            products_info = "\n".join([
                f"- {product.film.code}: {product.quantity} —à—Ç."
                for product in finished_products
            ])
            
            await message.answer(
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –ø–ª–µ–Ω–∫–∏ (—Ç–æ–ª—â–∏–Ω–∞ {thickness} –º–º):\n\n{products_info}",
                reply_markup=keyboard
            )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ü–≤–µ—Ç–∞
            await state.set_state(SalesStates.selecting_products)
            
        finally:
            db.close()
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ç–æ–ª—â–∏–Ω—É –ø–∞–Ω–µ–ª–µ–π –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )

@router.message(SalesStates.selecting_products)
async def process_selecting_products(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞ –ø–ª–µ–Ω–∫–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
    film_text = message.text.strip()
    
    if film_text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–æ–ª—â–∏–Ω—ã
        await handle_create_order(message, state)
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –ø–ª–µ–Ω–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤–∏–¥–∞ "–ö–æ–¥ (–æ—Å—Ç–∞—Ç–æ–∫: X —à—Ç.)"
    if "(" in film_text:
        film_code = film_text.split("(")[0].strip()
    else:
        film_code = film_text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ–¥ –ø–ª–µ–Ω–∫–∏
    await state.update_data(current_film_code=film_code)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–æ–ª—â–∏–Ω—É
    data = await state.get_data()
    thickness = data.get('current_thickness')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    db = next(get_db())
    try:
        product = db.query(FinishedProduct).join(Film).filter(
            Film.code == film_code,
            FinishedProduct.thickness == thickness,
            FinishedProduct.quantity > 0
        ).first()
        
        if not product:
            await message.answer(
                f"–ü—Ä–æ–¥—É–∫—Ç —Å –∫–æ–¥–æ–º {film_code} –∏ —Ç–æ–ª—â–∏–Ω–æ–π {thickness} –º–º –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –Ω–∞ —Å–∫–ª–∞–¥–µ.",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
                    resize_keyboard=True
                )
            )
            return
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        await message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π (–¥–æ—Å—Ç—É–ø–Ω–æ: {product.quantity} —à—Ç.):",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        await state.set_state(SalesStates.product_quantity)
        
    finally:
        db.close()

@router.message(SalesStates.product_quantity)
async def process_product_quantity(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞–Ω–µ–ª–µ–π"""
    quantity_text = message.text.strip()
    
    if quantity_text == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ü–≤–µ—Ç–∞
        data = await state.get_data()
        thickness = data.get('current_thickness')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–Ω–æ–≤–∞ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–æ–ª—â–∏–Ω—ã
        db = next(get_db())
        try:
            finished_products = db.query(FinishedProduct).join(Film).filter(
                FinishedProduct.thickness == thickness,
                FinishedProduct.quantity > 0
            ).all()
            
            keyboard_rows = []
            for product in finished_products:
                keyboard_rows.append([KeyboardButton(
                    text=f"{product.film.code} (–æ—Å—Ç–∞—Ç–æ–∫: {product.quantity} —à—Ç.)"
                )])
            
            keyboard_rows.append([KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")])
            keyboard = ReplyKeyboardMarkup(keyboard=keyboard_rows, resize_keyboard=True)
            
            products_info = "\n".join([
                f"- {product.film.code}: {product.quantity} —à—Ç."
                for product in finished_products
            ])
            
            await message.answer(
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –ø–ª–µ–Ω–∫–∏ (—Ç–æ–ª—â–∏–Ω–∞ {thickness} –º–º):\n\n{products_info}",
                reply_markup=keyboard
            )
            
            await state.set_state(SalesStates.selecting_products)
        finally:
            db.close()
        return
    
    try:
        quantity = int(quantity_text)
        if quantity <= 0:
            await message.answer(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
                    resize_keyboard=True
                )
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—Ä–æ–¥—É–∫—Ç–µ
        data = await state.get_data()
        film_code = data.get('current_film_code')
        thickness = data.get('current_thickness')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
        db = next(get_db())
        try:
            product = db.query(FinishedProduct).join(Film).filter(
                Film.code == film_code,
                FinishedProduct.thickness == thickness
            ).first()
            
            if not product or product.quantity < quantity:
                available = product.quantity if product else 0
                await message.answer(
                    f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ (–∑–∞–ø—Ä–æ—à–µ–Ω–æ: {quantity} —à—Ç., –¥–æ—Å—Ç—É–ø–Ω–æ: {available} —à—Ç.)",
                    reply_markup=ReplyKeyboardMarkup(
                        keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
                        resize_keyboard=True
                    )
                )
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É
            selected_products = data.get('selected_products', [])
            product_key = f"{film_code}|{thickness}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ
            for i, product_data in enumerate(selected_products):
                if product_data.get('key') == product_key:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    selected_products[i]['quantity'] = quantity
                    break
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
                selected_products.append({
                    'key': product_key,
                    'film_code': film_code,
                    'thickness': thickness,
                    'quantity': quantity
                })
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(selected_products=selected_products)
            
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø—Ä–æ–¥—É–∫—Ç—ã
            await message.answer(
                f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∑–∞–∫–∞–∑: –ø–∞–Ω–µ–ª–∏ —Å –ø–ª–µ–Ω–∫–æ–π {film_code}, —Ç–æ–ª—â–∏–Ω–∞ {thickness} –º–º - {quantity} —à—Ç.\n\n"
                f"–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø—Ä–æ–¥—É–∫—Ü–∏—é –≤ –∑–∞–∫–∞–∑?",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                        [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                    ],
                    resize_keyboard=True
                )
            )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤—ã–±–æ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ—â–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            await state.set_state(SalesStates.add_more_products)
            
        finally:
            db.close()
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True
            )
        )

@router.message(SalesStates.add_more_products)
async def process_add_more_products(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ—â–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    response = message.text.strip()
    
    if response == "‚úÖ –î–∞":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø—Ä–æ–¥—É–∫—Ç—ã
        # –í–º–µ—Å—Ç–æ –≤—ã–∑–æ–≤–∞ handle_create_order, –Ω–∞–ø—Ä—è–º—É—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—â–∏–Ω
        db = next(get_db())
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–ª—â–∏–Ω –ø–∞–Ω–µ–ª–µ–π, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –≥–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è
            thicknesses = db.query(FinishedProduct.thickness).distinct().all()
            available_thicknesses = [str(thickness[0]) for thickness in thicknesses]
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–ª—â–∏–Ω, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
            if not available_thicknesses:
                await message.answer(
                    "–ù–∞ —Å–∫–ª–∞–¥–µ –Ω–µ—Ç –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É."
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç–æ–ª—â–∏–Ω–∞–º–∏
            keyboard_rows = []
            for thickness in available_thicknesses:
                keyboard_rows.append([KeyboardButton(text=thickness)])
            keyboard_rows.append([KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")])
            
            keyboard = ReplyKeyboardMarkup(
                keyboard=keyboard_rows,
                resize_keyboard=True
            )
            
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—â–∏–Ω—É –ø–∞–Ω–µ–ª–µ–π (–º–º):",
                reply_markup=keyboard
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–ª—â–∏–Ω—ã, –Ω–æ –ù–ï –æ—á–∏—â–∞–µ–º selected_products
            await state.set_state(SalesStates.product_thickness)
        finally:
            db.close()
        return
    elif response == "‚ùå –ù–µ—Ç":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª –¥–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É (—Å—Ç—ã–∫–∏)
        data = await state.get_data()
        selected_products = data.get('selected_products', [])
        
        if not selected_products:
            # –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            await message.answer(
                "–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∑–∞–∫–∞–∑. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ü–∏—é."
            )
            await handle_create_order(message, state)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
        products_info = "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n"
        for product in selected_products:
            products_info += f"‚ñ™Ô∏è {product['film_code']} (—Ç–æ–ª—â–∏–Ω–∞ {product['thickness']} –º–º): {product['quantity']} —à—Ç.\n"
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—ã–∫–æ–≤
        await message.answer(
            f"{products_info}\n\n–¢—Ä–µ–±—É—é—Ç—Å—è –ª–∏ —Å—Ç—ã–∫–∏?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—Ç—ã–∫–æ–≤
        await state.set_state(SalesStates.waiting_for_need_joints)
        
    elif response == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        data = await state.get_data()
        film_code = data.get('current_film_code')
        thickness = data.get('current_thickness')
        
        db = next(get_db())
        try:
            product = db.query(FinishedProduct).join(Film).filter(
                Film.code == film_code,
                FinishedProduct.thickness == thickness
            ).first()
            
            available = product.quantity if product else 0
            
            await message.answer(
                f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π (–¥–æ—Å—Ç—É–ø–Ω–æ: {available} —à—Ç.):",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
                    resize_keyboard=True
                )
            )
            
            await state.set_state(SalesStates.product_quantity)
        finally:
            db.close()
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: ‚úÖ –î–∞, ‚ùå –ù–µ—Ç –∏–ª–∏ ‚óÄÔ∏è –ù–∞–∑–∞–¥",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )

@router.message(SalesStates.waiting_for_need_joints)
async def process_need_joints(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—ã–∫–æ–≤"""
    response = message.text.strip()
    
    if response == "‚úÖ –î–∞":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Å—Ç—ã–∫–∏
        await state.update_data(need_joints=True)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—ã–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = next(get_db())
        try:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç—ã–∫–∏ –ø–æ —Ç–∏–ø—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            butterfly_joints = db.query(Joint).filter(Joint.type == JointType.BUTTERFLY, Joint.quantity > 0).all()
            simple_joints = db.query(Joint).filter(Joint.type == JointType.SIMPLE, Joint.quantity > 0).all()
            closing_joints = db.query(Joint).filter(Joint.type == JointType.CLOSING, Joint.quantity > 0).all()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—ã–∫–∞—Ö
            joints_info = "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—ã–∫–∏:\n\n"
            
            if butterfly_joints:
                joints_info += "ü¶ã –ë–∞–±–æ—á–∫–∞:\n"
                for thickness in [0.5, 0.8]:
                    thickness_joints = [j for j in butterfly_joints if j.thickness == thickness]
                    if thickness_joints:
                        joints_info += f"  {thickness} –º–º: "
                        joints_info += ", ".join([f"{j.color} ({j.quantity} —à—Ç.)" for j in thickness_joints])
                        joints_info += "\n"
            
            if simple_joints:
                joints_info += "üîÑ –ü—Ä–æ—Å—Ç—ã–µ:\n"
                for thickness in [0.5, 0.8]:
                    thickness_joints = [j for j in simple_joints if j.thickness == thickness]
                    if thickness_joints:
                        joints_info += f"  {thickness} –º–º: "
                        joints_info += ", ".join([f"{j.color} ({j.quantity} —à—Ç.)" for j in thickness_joints])
                        joints_info += "\n"
            
            if closing_joints:
                joints_info += "üîí –ó–∞–º—ã–∫–∞—é—â–∏–µ:\n"
                for thickness in [0.5, 0.8]:
                    thickness_joints = [j for j in closing_joints if j.thickness == thickness]
                    if thickness_joints:
                        joints_info += f"  {thickness} –º–º: "
                        joints_info += ", ".join([f"{j.color} ({j.quantity} —à—Ç.)" for j in thickness_joints])
                        joints_info += "\n"
            
            if not butterfly_joints and not simple_joints and not closing_joints:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ç—ã–∫–æ–≤, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
                await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —Å–∫–ª–∞–¥–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—ã–∫–æ–≤.")
                await state.update_data(need_joints=False)
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –æ –∫–ª–µ–µ
                keyboard = ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                        [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                    ],
                    resize_keyboard=True
                )
                await message.answer(
                    "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –∫–ª–µ–π?",
                    reply_markup=keyboard
                )
                await state.set_state(SalesStates.waiting_for_need_glue)
                return
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø —Å—Ç—ã–∫–∞
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="ü¶ã –ë–∞–±–æ—á–∫–∞")] if butterfly_joints else [],
                    [KeyboardButton(text="üîÑ –ü—Ä–æ—Å—Ç—ã–µ")] if simple_joints else [],
                    [KeyboardButton(text="üîí –ó–∞–º—ã–∫–∞—é—â–∏–µ")] if closing_joints else [],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
            
            await message.answer(
                joints_info + "\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç—ã–∫–∞:",
                reply_markup=keyboard
            )
            await state.set_state(SalesStates.waiting_for_order_joint_type)
        finally:
            db.close()
    elif response == "‚ùå –ù–µ—Ç":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ö–æ—á–µ—Ç —Å—Ç—ã–∫–∏
        await state.update_data(need_joints=False)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –æ –∫–ª–µ–µ
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        await message.answer(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –∫–ª–µ–π?",
            reply_markup=keyboard
        )
        await state.set_state(SalesStates.waiting_for_order_installation)
    elif response == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–æ–ø—Ä–æ—Å—É –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        data = await state.get_data()
        selected_products = data.get('selected_products', [])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        products_info = "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n"
        for product in selected_products:
            products_info += f"‚ñ™Ô∏è {product['film_code']} (—Ç–æ–ª—â–∏–Ω–∞ {product['thickness']} –º–º): {product['quantity']} —à—Ç.\n"
        
        await message.answer(
            f"{products_info}\n\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –ø—Ä–æ–¥—É–∫—Ü–∏—é –≤ –∑–∞–∫–∞–∑?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(SalesStates.add_more_products)
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: ‚úÖ –î–∞, ‚ùå –ù–µ—Ç –∏–ª–∏ ‚óÄÔ∏è –ù–∞–∑–∞–¥",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )

async def process_add_more_joints(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –µ—â–µ —Å—Ç—ã–∫–æ–≤"""
    response = message.text.strip()
    
    if response == "‚úÖ –î–∞":
        installation_required = True
    elif response == "‚ùå –ù–µ—Ç":
        installation_required = False
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: ‚úÖ –î–∞ –∏–ª–∏ ‚ùå –ù–µ—Ç",
            reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–Ω—Ç–∞–∂–µ
    await state.update_data(installation_required=installation_required)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:",
        reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
    )
    await state.set_state(SalesStates.waiting_for_order_customer_phone)

@router.message(SalesStates.waiting_for_order_customer_phone)
async def process_order_customer_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
    phone = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not phone or len(phone) < 5:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
            reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.update_data(customer_phone=phone)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç' –µ—Å–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑):",
        reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
    )
    await state.set_state(SalesStates.waiting_for_order_delivery_address)

@router.message(SalesStates.waiting_for_order_delivery_address)
async def process_order_delivery_address(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    address = message.text.strip()
    
    # –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω, —Å—á–∏—Ç–∞–µ–º —Å–∞–º–æ–≤—ã–≤–æ–∑–æ–º
    if address.lower() == "–Ω–µ—Ç":
        address = "–°–∞–º–æ–≤—ã–≤–æ–∑"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
    await state.update_data(delivery_address=address)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
    selected_products = data.get('selected_products', [])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—ã–∫–∞—Ö
    selected_joints = data.get('selected_joints', [])
    
    need_joints = data.get('need_joints', False)
    need_glue = data.get('need_glue', False)
    glue_quantity = data.get('glue_quantity', 0)
    installation_required = data.get('installation_required', False)
    customer_phone = data.get('customer_phone', '')
    delivery_address = data.get('delivery_address', '')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
    order_summary = f"üìù –°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–∞:\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
    if selected_products:
        order_summary += f"üì¶ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n"
        total_panels = 0
        for product in selected_products:
            order_summary += f"‚ñ™Ô∏è {product['film_code']} (—Ç–æ–ª—â–∏–Ω–∞ {product['thickness']} –º–º): {product['quantity']} —à—Ç.\n"
            total_panels += product['quantity']
        order_summary += f"–í—Å–µ–≥–æ –ø–∞–Ω–µ–ª–µ–π: {total_panels} —à—Ç.\n\n"
    else:
        order_summary += "–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—ã–∫–∞—Ö
    if need_joints and selected_joints:
        order_summary += f"üîó –°—Ç—ã–∫–∏:\n"
        for joint in selected_joints:
            joint_type = joint.get('type', '')
            joint_type_text = ''
            if joint_type == 'butterfly':
                joint_type_text = "–ë–∞–±–æ—á–∫–∞"
            elif joint_type == 'simple':
                joint_type_text = "–ü—Ä–æ—Å—Ç—ã–µ"
            elif joint_type == 'closing':
                joint_type_text = "–ó–∞–º—ã–∫–∞—é—â–∏–µ"
            
            order_summary += f"‚ñ™Ô∏è –¢–∏–ø: {joint_type_text}, {joint.get('thickness', '')} –º–º, {joint.get('color', '')}: {joint.get('quantity', 0)} —à—Ç.\n"
        order_summary += "\n"
    else:
        order_summary += f"üîó –°—Ç—ã–∫–∏: –ù–µ—Ç\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    order_summary += f"üß¥ –ö–ª–µ–π: {glue_quantity} —Ç—é–±–∏–∫–æ–≤\n"
    order_summary += f"üîß –ú–æ–Ω—Ç–∞–∂: {'–¢—Ä–µ–±—É–µ—Ç—Å—è' if installation_required else '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}\n"
    order_summary += f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: {customer_phone}\n"
    order_summary += f"üöö –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_address}\n"
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await state.update_data(order_summary=order_summary)
    await state.set_state(MenuState.SALES_ORDER_CONFIRM)
    
    await message.answer(
        order_summary + "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:",
        reply_markup=get_menu_keyboard(MenuState.SALES_ORDER_CONFIRM)
    )
    await state.set_state(SalesStates.waiting_for_order_confirmation)

@router.message(SalesStates.waiting_for_order_confirmation)
async def process_order_confirmation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    response = message.text.strip()
    
    if response == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        selected_products = data.get("selected_products", [])
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—ã–∫–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        selected_joints = data.get("selected_joints", [])
        
        need_joints = len(selected_joints) > 0
        need_glue = data.get("need_glue", False)
        customer_phone = data.get("customer_phone", "")
        delivery_address = data.get("delivery_address", "")
        installation_required = data.get("installation_required", False)
        glue_quantity = data.get("glue_quantity", 0)
        
        # Debug logging for glue
        logging.info(f"DEBUG: Order confirmation - need_glue: {need_glue}, glue_quantity: {glue_quantity}")
        
        # –ü–æ–ª—É—á–∞–µ–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        telegram_id = message.from_user.id
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        db = next(get_db())
        try:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
            user = db.query(User).filter(User.telegram_id == telegram_id).first()
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
            if not user:
                logging.error(f"User with telegram_id={telegram_id} not found in database during order confirmation.")
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞: –í–∞—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=get_menu_keyboard(MenuState.SALES_MAIN)
                )
                await state.set_state(MenuState.SALES_MAIN) # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                return
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º user.id –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
            manager_db_id = user.id
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
            order = Order(
                manager_id=manager_db_id, # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
                customer_phone=customer_phone,
                delivery_address=delivery_address,
                installation_required=installation_required,
                status=OrderStatus.NEW
            )
            db.add(order)
            db.flush()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –∑–∞–∫–∞–∑
            total_panels = 0
            for product in selected_products:
                film_code = product['film_code']
                thickness = float(product['thickness'])
                qty = product['quantity']
                total_panels += qty
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç, —É—Å—Ç–∞–Ω–æ–≤–∏–º —Ç–æ–ª—â–∏–Ω—É –ø–∞–Ω–µ–ª–∏ –≤ –∑–∞–∫–∞–∑–µ
                order.panel_thickness = thickness
                
                film = db.query(Film).filter(Film.code == film_code).first()
                if not film:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è
                finished_product = db.query(FinishedProduct).join(Film).filter(
                    Film.code == film_code,
                    FinishedProduct.thickness == thickness
                ).first()
                
                if finished_product and finished_product.quantity >= qty:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –≥–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
                    order_item = OrderItem(
                        order_id=order.id,
                        quantity=qty,
                        color=product['film_code'],
                        thickness=product['thickness']
                    )
                    
                    # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ
                    # finished_product.quantity -= qty
                    
                    # –°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏
                    # operation = Operation(
                    #     operation_type=OperationType.READY_PRODUCT_OUT.value,
                    #     quantity=qty,
                    #     user_id=manager_db_id, # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ –±–∞–∑—ã
                    #     details=json.dumps({"film_id": film.id, "film_code": film_code, "thickness": thickness})
                    # )
                    # db.add(operation)
                    
                    db.add(order_item)
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏, —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
                    order_item = OrderItem(
                        order_id=order.id,
                        quantity=qty,
                        color=product['film_code'],
                        thickness=product['thickness']
                    )
                    
                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
                    production_order = ProductionOrder(
                        manager_id=manager_db_id,
                        film_id=film.id,
                        panel_thickness=thickness,
                        panel_quantity=qty,
                        status="new"
                    )
                    
                    db.add(production_order)
                
                db.add(order_item)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π –≤ –∑–∞–∫–∞–∑–µ
            
            # –ï—Å–ª–∏ –Ω—É–∂–Ω—ã —Å—Ç—ã–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –∑–∞–∫–∞–∑
            total_joints = 0
            if need_joints and selected_joints:
                for joint in selected_joints:
                    joint_type_val = joint.get('type')
                    thickness = float(joint.get('thickness'))
                    color = joint.get('color')
                    joint_qty = joint.get('quantity')
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å—Ç—ã–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ –≤ enum
                    joint_type_enum = None
                    if joint_type_val == "butterfly":
                        joint_type_enum = JointType.BUTTERFLY
                    elif joint_type_val == "simple":
                        joint_type_enum = JointType.SIMPLE
                    elif joint_type_val == "closing":
                        joint_type_enum = JointType.CLOSING
                        
                    if not joint_type_enum:
                        continue
                        
                    # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ç—ã–∫ –≤ –±–∞–∑–µ
                    joint = db.query(Joint).filter(
                        Joint.type == joint_type_enum,
                        Joint.thickness == thickness,
                        Joint.color == color
                    ).first()
                    
                    if joint and joint.quantity >= joint_qty:
                        # –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å –º–µ–∂–¥—É –∑–∞–∫–∞–∑–æ–º –∏ —Å—Ç—ã–∫–æ–º
                        order_joint = OrderJoint(
                            order_id=order.id,
                            joint_type=joint_type_enum,
                            joint_color=color,
                            quantity=joint_qty,
                            joint_thickness=thickness  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä joint_thickness
                        )
                        db.add(order_joint)
                        
                        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—ã–∫–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ
                        # joint.quantity -= joint_qty
                        
                        # –°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
                        # operation = Operation(
                        #     operation_type=OperationType.JOINT_OUT.value,
                        #     quantity=joint_qty,
                        #     user_id=manager_db_id
                        # )
                        # db.add(operation)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—ã–∫–æ–≤ –≤ –∑–∞–∫–∞–∑–µ
            order.joint_quantity = total_joints
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—è, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∑–∞–∫–∞–∑
            glue_quantity = data.get('glue_quantity', 0)
            logging.info(f"DEBUG: Order confirmation - need_glue: {data.get('need_glue', False)}, glue_quantity: {glue_quantity}")
            
            if glue_quantity > 0:  # –ë—ã–ª–æ: if need_glue and glue_quantity > 0:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–µ—è
                glue = db.query(Glue).first()
                logging.info(f"DEBUG: Checking for glue - found: {glue is not None}, glue_quantity needed: {glue_quantity}")
                
                if glue and glue.quantity >= glue_quantity:
                    # –°–≤—è–∑—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ —Å –∫–ª–µ–µ–º
                    order_glue = OrderGlue(
                        order_id=order.id,
                        quantity=glue_quantity
                    )
                    db.add(order_glue)
                    logging.info(f"DEBUG: Created OrderGlue with quantity {glue_quantity} for order {order.id}")
                    
                    # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—è –Ω–∞ —Å–∫–ª–∞–¥–µ
                    # glue.quantity -= glue_quantity
                    
                    # –°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
                    # operation = Operation(
                    #     operation_type=OperationType.GLUE_OUT.value,
                    #     quantity=glue_quantity,
                    #     user_id=manager_db_id
                    # )
                    # db.add(operation)
                else:
                    logging.warning(f"DEBUG: Not enough glue - required: {glue_quantity}, available: {glue.quantity if glue else 0}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db.commit()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –≤ –∑–∞–∫–∞–∑–µ
            products_info = "–ü—Ä–æ–¥—É–∫—Ü–∏—è:\n"
            for product in selected_products:
                products_info += f"‚ñ™Ô∏è {product['film_code']} (—Ç–æ–ª—â–∏–Ω–∞ {product['thickness']} –º–º): {product['quantity']} —à—Ç.\n"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—ã–∫–∞—Ö –≤ –∑–∞–∫–∞–∑–µ
            joints_info = ""
            if need_joints and selected_joints:
                joints_info = "\n–°—Ç—ã–∫–∏:\n"
                for joint in selected_joints:
                    joint_type_val = joint.get('type')
                    thickness = joint.get('thickness')
                    color = joint.get('color')
                    quantity = joint.get('quantity')
                    
                    joint_type_text = ""
                    if joint_type_val == "butterfly":
                        joint_type_text = "–ë–∞–±–æ—á–∫–∞"
                    elif joint_type_val == "simple":
                        joint_type_text = "–ü—Ä–æ—Å—Ç—ã–µ"
                    elif joint_type_val == "closing":
                        joint_type_text = "–ó–∞–º—ã–∫–∞—é—â–∏–µ"
                    
                    joints_info += f"‚ñ™Ô∏è –¢–∏–ø: {joint_type_text}, {thickness} –º–º, {color}: {quantity} —à—Ç.\n"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            confirmation_message = f"‚úÖ –ó–∞–∫–∞–∑ #{order.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
            confirmation_message += products_info
            
            if joints_info:
                confirmation_message += joints_info
                
            confirmation_message += f"\nüß¥ –ö–ª–µ–π: {glue_quantity} —Ç—é–±–∏–∫–æ–≤"
            confirmation_message += f"\nüîß –ú–æ–Ω—Ç–∞–∂: {'–¢—Ä–µ–±—É–µ—Ç—Å—è' if installation_required else '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}"
            confirmation_message += f"\nüìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: {customer_phone}"
            confirmation_message += f"\nüöö –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_address}"
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await state.set_state(MenuState.SALES_MAIN)
            await message.answer(
                confirmation_message,
                reply_markup=get_menu_keyboard(MenuState.SALES_MAIN)
            )
        except Exception as e:
            db.rollback()
            logging.error(f"Error creating order: {e}")
            await message.answer(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}",
                reply_markup=get_menu_keyboard(MenuState.SALES_MAIN)
            )
        finally:
            db.close()
    elif response == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑
        await state.set_state(MenuState.SALES_MAIN)
        await message.answer(
            "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=get_menu_keyboard(MenuState.SALES_MAIN)
        )
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
            reply_markup=get_menu_keyboard(MenuState.SALES_ORDER_CONFIRM)
        )

@router.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É")
async def handle_back_to_admin(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞"""
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user or user.role != UserRole.SUPER_ADMIN:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–¥–º–∏–Ω–∞
        await state.update_data(is_admin_context=False)
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
        await state.set_state(MenuState.SUPER_ADMIN_MAIN)
        await message.answer(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=get_menu_keyboard(MenuState.SUPER_ADMIN_MAIN)
        )
    finally:
        db.close()

@router.message(SalesStates.waiting_for_need_glue)
async def process_need_glue(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–ª–µ—è"""
    response = message.text.strip()
    
    if response == "‚úÖ –î–∞":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∫–ª–µ–π
        await state.update_data(need_glue=True)
        logging.info(f"DEBUG: User {message.from_user.id} requested glue (need_glue=True)")
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—è
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª–µ—è –≤ –±–∞–∑–µ
        db = next(get_db())
        try:
            glue = db.query(Glue).filter(Glue.quantity > 0).first()
            
            if not glue:
                await message.answer(
                    "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–ª–µ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ.",
                    reply_markup=ReplyKeyboardMarkup(
                        keyboard=[
                            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                        ],
                        resize_keyboard=True
                    )
                )
                return
            
            await message.answer(
                f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—é–±–∏–∫–æ–≤ –∫–ª–µ—è (–¥–æ—Å—Ç—É–ø–Ω–æ: {glue.quantity} —à—Ç.):",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                    ],
                    resize_keyboard=True
                )
            )
            await state.set_state(SalesStates.waiting_for_order_glue_quantity)
        finally:
            db.close()
    elif response == "‚ùå –ù–µ—Ç":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ö–æ—á–µ—Ç –∫–ª–µ–π
        await state.update_data(need_glue=False, glue_quantity=0)
        logging.info(f"DEBUG: User {message.from_user.id} did not request glue (need_glue=False, glue_quantity=0)")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –æ –º–æ–Ω—Ç–∞–∂–µ
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        await message.answer(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –º–æ–Ω—Ç–∞–∂?",
            reply_markup=keyboard
        )
        await state.set_state(SalesStates.waiting_for_order_installation)
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: ‚úÖ –î–∞ –∏–ª–∏ ‚ùå –ù–µ—Ç",
            reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
        )

@router.message(SalesStates.waiting_for_order_glue_quantity)
async def process_order_glue_quantity(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–µ—è"""
    try:
        quantity = int(message.text.strip())
        if quantity <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–ª–µ–µ
        data = await state.get_data()
        glue_quantity = quantity
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—è
        await state.update_data(glue_quantity=glue_quantity)
        logging.info(f"DEBUG: Saved glue_quantity={glue_quantity} to state for user {message.from_user.id}")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –æ –º–æ–Ω—Ç–∞–∂–µ
        await message.answer(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –º–æ–Ω—Ç–∞–∂?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(SalesStates.waiting_for_order_installation)
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )

@router.message(SalesStates.waiting_for_order_glue_needed)
async def process_order_glue_needed(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–ª–µ—è –¥–ª—è —Å—Ç—ã–∫–æ–≤"""
    user_choice = message.text.strip()
    
    if user_choice == "‚úÖ –î–∞":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª–µ—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = next(get_db())
        try:
            glue = db.query(Glue).filter(Glue.quantity > 0).first()
            
            if not glue:
                await message.answer(
                    "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–ª–µ–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ.",
                    reply_markup=ReplyKeyboardMarkup(
                        keyboard=[
                            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                        ],
                        resize_keyboard=True
                    )
                )
                return
            
            await message.answer(
                f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—é–±–∏–∫–æ–≤ –∫–ª–µ—è (–¥–æ—Å—Ç—É–ø–Ω–æ: {glue.quantity} —à—Ç.):",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                    ],
                    resize_keyboard=True
                )
            )
            await state.set_state(SalesStates.waiting_for_order_glue_quantity)
        finally:
            db.close()
    elif user_choice == "‚ùå –ù–µ—Ç":
        # –ö–ª–µ–π –Ω–µ –Ω—É–∂–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω—É–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        await state.update_data(glue_quantity=0)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –æ –º–æ–Ω—Ç–∞–∂–µ
        await message.answer(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –º–æ–Ω—Ç–∞–∂?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(SalesStates.waiting_for_order_installation)
    else:
        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")]
                ],
                resize_keyboard=True
            )
        )

@router.message(SalesStates.waiting_for_order_installation)
async def process_order_installation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–Ω—Ç–∞–∂–∞"""
    user_choice = message.text.strip()
    
    if user_choice == "‚úÖ –î–∞":
        # –ú–æ–Ω—Ç–∞–∂ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        await state.update_data(installation_required=True)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:",
            reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
        )
        await state.set_state(SalesStates.waiting_for_order_customer_phone)
    elif user_choice == "‚ùå –ù–µ—Ç":
        # –ú–æ–Ω—Ç–∞–∂ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        await state.update_data(installation_required=False)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–º–æ–Ω—Ç–∞–∂ –Ω–µ –Ω—É–∂–µ–Ω, –Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞ –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω—É–∂–µ–Ω)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:",
            reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
        )
        await state.set_state(SalesStates.waiting_for_order_customer_phone)
    else:
        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")]
                ],
                resize_keyboard=True
            )
        )

@router.message(SalesStates.waiting_for_order_joint_type)
async def process_order_joint_type(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å—Ç—ã–∫–∞"""
    user_choice = message.text.strip()
    
    if user_choice == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–æ–ø—Ä–æ—Å—É –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—ã–∫–æ–≤
        await message.answer(
            "–ù—É–∂–Ω—ã –ª–∏ —Å—Ç—ã–∫–∏?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(SalesStates.waiting_for_need_joints)
        return
    
    joint_type_map = {
        "ü¶ã –±–∞–±–æ—á–∫–∞": JointType.BUTTERFLY,
        "üîÑ –ø—Ä–æ—Å—Ç—ã–µ": JointType.SIMPLE,
        "üîí –∑–∞–º—ã–∫–∞—é—â–∏–µ": JointType.CLOSING,
        "ü¶ã –±–∞–±–æ—á–∫–∞": JointType.BUTTERFLY,
        "üîÑ –ø—Ä–æ—Å—Ç—ã–µ": JointType.SIMPLE,
        "üîí –∑–∞–º—ã–∫–∞—é—â–∏–µ": JointType.CLOSING
    }
    
    joint_type = None
    joint_type_str = ""
    for key in joint_type_map:
        if key.lower() in user_choice.lower():
            joint_type = joint_type_map[key]
            if "–±–∞–±–æ—á–∫–∞" in key.lower():
                joint_type_str = "butterfly"
            elif "–ø—Ä–æ—Å—Ç—ã–µ" in key.lower():
                joint_type_str = "simple"
            elif "–∑–∞–º—ã–∫–∞—é—â–∏–µ" in key.lower():
                joint_type_str = "closing"
            break
    
    if not joint_type:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç—ã–∫–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="ü¶ã –ë–∞–±–æ—á–∫–∞")],
                    [KeyboardButton(text="üîÑ –ü—Ä–æ—Å—Ç—ã–µ")],
                    [KeyboardButton(text="üîí –ó–∞–º—ã–∫–∞—é—â–∏–µ")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —Å—Ç—ã–∫–∞ –∏ –µ–≥–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
    await state.update_data(joint_type=joint_type, joint_type_str=joint_type_str)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—â–∏–Ω—É —Å—Ç—ã–∫–∞
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="0.5"), KeyboardButton(text="0.8")],
            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    
    await message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—â–∏–Ω—É —Å—Ç—ã–∫–∞ (–º–º):",
        reply_markup=keyboard
    )
    await state.set_state(SalesStates.waiting_for_order_joint_thickness)

@router.message(SalesStates.waiting_for_order_joint_thickness)
async def process_order_joint_thickness(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–ª—â–∏–Ω—ã —Å—Ç—ã–∫–∞"""
    user_choice = message.text.strip()
    
    if user_choice == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Å—Ç—ã–∫–∞
        db = next(get_db())
        try:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç—ã–∫–∏ –ø–æ —Ç–∏–ø—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            butterfly_joints = db.query(Joint).filter(Joint.type == JointType.BUTTERFLY, Joint.quantity > 0).all()
            simple_joints = db.query(Joint).filter(Joint.type == JointType.SIMPLE, Joint.quantity > 0).all()
            closing_joints = db.query(Joint).filter(Joint.type == JointType.CLOSING, Joint.quantity > 0).all()
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø —Å—Ç—ã–∫–∞
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="ü¶ã –ë–∞–±–æ—á–∫–∞")] if butterfly_joints else [],
                    [KeyboardButton(text="üîÑ –ü—Ä–æ—Å—Ç—ã–µ")] if simple_joints else [],
                    [KeyboardButton(text="üîí –ó–∞–º—ã–∫–∞—é—â–∏–µ")] if closing_joints else [],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
            
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç—ã–∫–∞:",
                reply_markup=keyboard
            )
        finally:
            db.close()
        
        await state.set_state(SalesStates.waiting_for_order_joint_type)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Ç–æ–ª—â–∏–Ω—ã
    valid_thicknesses = ["0.5", "0.8"]
    if user_choice not in valid_thicknesses:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—â–∏–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: 0.5 –∏–ª–∏ 0.8 –º–º.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="0.5"), KeyboardButton(text="0.8")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–æ–ª—â–∏–Ω—É
    thickness = float(user_choice)
    await state.update_data(joint_thickness=thickness)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø —Å—Ç—ã–∫–∞
    data = await state.get_data()
    joint_type = data.get('joint_type')
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–≤–µ—Ç —Å—Ç—ã–∫–∞
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏ —Ç–æ–ª—â–∏–Ω—ã
        available_joints = db.query(Joint).filter(
            Joint.type == joint_type,
            Joint.thickness == thickness,
            Joint.quantity > 0
        ).all()
        
        if not available_joints:
            await message.answer(
                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—ã–∫–æ–≤ —Ç–∏–ø–∞ {joint_type} —Å —Ç–æ–ª—â–∏–Ω–æ–π {thickness} –º–º.",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="0.5"), KeyboardButton(text="0.8")],
                        [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                    ],
                    resize_keyboard=True
                )
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
        keyboard = []
        row = []
        for joint in available_joints:
            if len(row) < 3:  # –ú–∞–∫—Å–∏–º—É–º 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
                row.append(KeyboardButton(text=f"{joint.color} ({joint.quantity} —à—Ç.)"))
            else:
                keyboard.append(row)
                row = [KeyboardButton(text=f"{joint.color} ({joint.quantity} —à—Ç.)")]
        
        if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
            keyboard.append(row)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")])
        
        await message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —Å—Ç—ã–∫–∞:",
            reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
        )
        await state.set_state(SalesStates.waiting_for_order_joint_color)
    finally:
        db.close()

@router.message(SalesStates.waiting_for_order_joint_color)
async def process_order_joint_color(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞ —Å—Ç—ã–∫–∞"""
    user_choice = message.text.strip()
    
    if user_choice == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–æ–ª—â–∏–Ω—ã
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—â–∏–Ω—É —Å—Ç—ã–∫–∞ (–º–º):",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="0.5"), KeyboardButton(text="0.8")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(SalesStates.waiting_for_order_joint_thickness)
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–≤–µ—Ç (—É–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ)
    color = user_choice.split(" (")[0]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç
    await state.update_data(joint_color=color)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—ã–∫–æ–≤
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—ã–∫–æ–≤:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True
        )
    )
    await state.set_state(SalesStates.waiting_for_order_joint_quantity)

@router.message(SalesStates.waiting_for_order_joint_quantity)
async def process_order_joint_quantity(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—ã–∫–æ–≤"""
    user_choice = message.text.strip()
    
    if user_choice == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ü–≤–µ—Ç–∞ —Å—Ç—ã–∫–∞
        data = await state.get_data()
        joint_type = data.get('joint_type')
        thickness = data.get('joint_thickness')
        
        db = next(get_db())
        try:
            available_joints = db.query(Joint).filter(
                Joint.type == joint_type,
                Joint.thickness == thickness,
                Joint.quantity > 0
            ).all()
            
            if not available_joints:
                await message.answer(
                    "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—ã–∫–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏ —Ç–æ–ª—â–∏–Ω—ã.",
                    reply_markup=get_joint_type_keyboard()
                )
                await state.set_state(SalesStates.waiting_for_order_joint_type)
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
            keyboard = []
            row = []
            for joint in available_joints:
                if len(row) < 3:  # –ú–∞–∫—Å–∏–º—É–º 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
                    row.append(KeyboardButton(text=f"{joint.color} ({joint.quantity} —à—Ç.)"))
                else:
                    keyboard.append(row)
                    row = [KeyboardButton(text=f"{joint.color} ({joint.quantity} —à—Ç.)")]
            
            if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
                keyboard.append(row)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard.append([KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")])
            
            await message.answer(
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —Å—Ç—ã–∫–∞ ({joint_type}, {thickness} –º–º):",
                reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
            )
            await state.set_state(SalesStates.waiting_for_order_joint_color)
        finally:
            db.close()
        return
    
    try:
        quantity = int(user_choice)
        if quantity <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—ã–∫–æ–≤
        data = await state.get_data()
        joint_type = data.get('joint_type')
        joint_type_str = data.get('joint_type_str', '')  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        thickness = data.get('joint_thickness')
        color = data.get('joint_color')
        
        db = next(get_db())
        try:
            # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—ã–∫ –≤ –±–∞–∑–µ
            joint = db.query(Joint).filter(
                Joint.type == joint_type,
                Joint.thickness == thickness,
                Joint.color == color
            ).first()
            
            if not joint or joint.quantity < quantity:
                max_quantity = joint.quantity if joint else 0
                await message.answer(
                    f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç—ã–∫–æ–≤. –î–æ—Å—Ç—É–ø–Ω–æ: {max_quantity} —à—Ç.",
                    reply_markup=ReplyKeyboardMarkup(
                        keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
                        resize_keyboard=True
                    )
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—ã–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            selected_joints = data.get('selected_joints', [])
            
            joint_data = {
                "type": joint_type_str,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å—Ç—ã–∫–∞
                "color": color,
                "thickness": thickness,
                "quantity": quantity
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç—ã–∫ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
            await state.update_data(last_joint=joint_data)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç—ã–∫
            selected_joints.append(joint_data)
            await state.update_data(selected_joints=selected_joints)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—ã–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            joints_text = "\n".join([
                f"‚Ä¢ {j['type']}, {j['thickness']} –º–º, {j['color']}, {j['quantity']} —à—Ç."
                for j in selected_joints
            ])
            
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –Ω—É–∂–Ω—ã –ª–∏ –µ—â–µ —Å—Ç—ã–∫–∏
            await message.answer(
                f"‚úÖ –°—Ç—ã–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫–∞–∑\n\n–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—ã–∫–∏:\n{joints_text}\n\n–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å—Ç—ã–∫–∏?",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                        [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                    ],
                    resize_keyboard=True
                )
            )
            await state.set_state(SalesStates.waiting_for_order_more_joints)
        finally:
            db.close()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

@router.message(SalesStates.waiting_for_order_more_joints)
async def process_order_more_joints(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç—ã–∫–æ–≤"""
    user_choice = message.text.strip()
    
    if user_choice == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –û—Ç–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Å—Ç—ã–∫
        data = await state.get_data()
        selected_joints = data.get('selected_joints', [])
        
        if selected_joints:
            # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Å—Ç—ã–∫
            selected_joints.pop()
            await state.update_data(selected_joints=selected_joints)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            last_joint = data.get('last_joint', {})
            joint_type = last_joint.get('type', data.get('joint_type'))
            thickness = last_joint.get('thickness', data.get('joint_thickness'))
            color = last_joint.get('color', data.get('joint_color'))
            
            await message.answer(
                f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—ã–∫–æ–≤ ({joint_type}, {thickness} –º–º, {color}):",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                    ],
                    resize_keyboard=True
                )
            )
            await state.set_state(SalesStates.waiting_for_order_joint_quantity)
            return
        else:
            # –ï—Å–ª–∏ —Å—Ç—ã–∫–æ–≤ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Å—Ç—ã–∫–∞
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç—ã–∫–∞:",
                reply_markup=get_joint_type_keyboard()
            )
            await state.set_state(SalesStates.waiting_for_order_joint_type)
            return
    
    if user_choice == "‚úÖ –î–∞":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å—Ç—ã–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç—ã–∫–∞:",
            reply_markup=get_joint_type_keyboard()
        )
        await state.set_state(SalesStates.waiting_for_order_joint_type)
    elif user_choice == "‚ùå –ù–µ—Ç":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª –≤—ã–±–æ—Ä —Å—Ç—ã–∫–æ–≤, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ –∫–ª–µ–µ
        await message.answer(
            "–ù—É–∂–µ–Ω –ª–∏ –∫–ª–µ–π –¥–ª—è —Å—Ç—ã–∫–æ–≤?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(SalesStates.waiting_for_order_glue_needed)
    else:
        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )

@router.message(F.text == "üìù –ó–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ")
async def handle_production_order(message: Message, state: FSMContext):
    if not await check_sales_access(message):
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–ª–∞–≥ –∞–¥–º–∏–Ω-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    state_data = await state.get_data()
    is_admin_context = state_data.get("is_admin_context", False)
    
    await state.set_state(MenuState.SALES_ORDER)
    db = next(get_db())
    try:
        films = db.query(Film).all()
        if not films:
            await message.answer(
                "–í –±–∞–∑–µ –Ω–µ—Ç –ø–ª–µ–Ω–∫–∏.",
                reply_markup=get_menu_keyboard(MenuState.SALES_MAIN, is_admin_context=is_admin_context)
            )
            return
        
        films_info = [f"- {film.code}" for film in films]
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–ª–µ–Ω–∫–∏.\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n" + "\n".join(films_info),
            reply_markup=get_menu_keyboard(MenuState.SALES_ORDER, is_admin_context=is_admin_context)
        )
        await state.set_state(SalesStates.waiting_for_film_color)
    finally:
        db.close()

@router.message(F.text == "üì¶ –ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞ —Å–∫–ª–∞–¥")
async def handle_warehouse_order(message: Message, state: FSMContext):
    if not await check_sales_access(message):
        return
    
    await state.set_state(MenuState.SALES_ORDER)
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏
        finished_products = db.query(FinishedProduct).join(Film).all()
        if not finished_products:
            await message.answer(
                "–ù–∞ —Å–∫–ª–∞–¥–µ –Ω–µ—Ç –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏.",
                reply_markup=get_menu_keyboard(MenuState.SALES_MAIN)
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏
        products_info = []
        for product in finished_products:
            products_info.append(
                f"‚Ä¢ –ü–∞–Ω–µ–ª–∏ —Å –ø–ª–µ–Ω–∫–æ–π {product.film.code} (—Ç–æ–ª—â–∏–Ω–∞: {product.thickness} –º–º): {product.quantity} —à—Ç."
            )
        
        if not products_info:
            await message.answer(
                "–ù–∞ —Å–∫–ª–∞–¥–µ –Ω–µ—Ç –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏.",
                reply_markup=get_menu_keyboard(MenuState.SALES_MAIN)
            )
            return
        
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–ª–µ–Ω–∫–∏.\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n" + "\n".join(products_info),
            reply_markup=get_menu_keyboard(MenuState.SALES_ORDER)
        )
        await state.set_state(SalesStates.waiting_for_film_code)
    finally:
        db.close()

@router.message(F.text == "üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏")
async def handle_stock(message: Message, state: FSMContext):
    if not await check_sales_access(message):
        return
    
    state_data = await state.get_data()
    is_admin_context = state_data.get("is_admin_context", False)
    
    await state.set_state(MenuState.SALES_STOCK)
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏
        finished_products = db.query(FinishedProduct).join(Film).all()
        if not finished_products:
            await message.answer(
                "–ù–∞ —Å–∫–ª–∞–¥–µ –Ω–µ—Ç –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏.",
                reply_markup=get_menu_keyboard(MenuState.SALES_MAIN, is_admin_context)
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏
        response = "üì¶ –ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è –Ω–∞ —Å–∫–ª–∞–¥–µ:\n\n"
        for product in finished_products:
            if product.quantity > 0:
                response += f"- {product.film.code}: {product.quantity} —à—Ç.\n"
        
        await message.answer(
            response,
            reply_markup=get_menu_keyboard(MenuState.SALES_STOCK, is_admin_context)
        )
    finally:
        db.close()

@router.message(F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def handle_back(message: Message, state: FSMContext):
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
            return
        
        next_menu, keyboard = await go_back(state, user.role)
        await state.set_state(next_menu)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
    finally:
        db.close()

@router.message(SalesStates.waiting_for_film_color)
async def process_film_color(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø–ª–µ–Ω–∫–∏"""
    db = next(get_db())
    try:
        film = db.query(Film).filter(Film.code == message.text.strip()).first()
        if not film:
            await message.answer("‚ùå –ü–ª–µ–Ω–∫–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:")
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –ø–ª–µ–Ω–∫–∏
        await state.update_data(film_color=film.code)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π:")
        await state.set_state(SalesStates.waiting_for_panel_quantity)
    finally:
        db.close()

@router.message(SalesStates.waiting_for_panel_quantity)
async def process_panel_quantity(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞–Ω–µ–ª–µ–π –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    try:
        quantity = int(message.text.strip())
        if quantity <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        
        db = next(get_db())
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
            if not user:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
            production_order = ProductionOrder(
                manager_id=user.id,
                film_color=data['film_color'],
                panel_quantity=quantity,
                status="new"
            )
            
            db.add(production_order)
            db.commit()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ
            order_text = (
                f"‚úÖ –ó–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ #{production_order.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                f"–ü–ª–µ–Ω–∫–∞: {production_order.film_color}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π: {production_order.panel_quantity}"
            )
            
            await message.answer(order_text)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üìù –ó–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ")],
                    [KeyboardButton(text="üì¶ –ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞ —Å–∫–ª–∞–¥")],
                    [KeyboardButton(text="üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏")]
                ],
                resize_keyboard=True
            )
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
            
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}")
        finally:
            db.close()
            await state.clear()
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

@router.message(SalesStates.waiting_for_film_code)
async def process_film_code(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø–ª–µ–Ω–∫–∏"""
    db = next(get_db())
    try:
        film = db.query(Film).filter(Film.code == message.text.strip()).first()
        if not film:
            await message.answer("‚ùå –ü–ª–µ–Ω–∫–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:")
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –ø–ª–µ–Ω–∫–∏
        await state.update_data(film_code=film.code)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π:")
        await state.set_state(SalesStates.waiting_for_panels_count)
    finally:
        db.close()

@router.message(SalesStates.waiting_for_panels_count)
async def process_panels_count(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞–Ω–µ–ª–µ–π –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    try:
        quantity = int(message.text.strip())
        if quantity <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        
        db = next(get_db())
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
            if not user:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
            production_order = ProductionOrder(
                manager_id=user.id,
                film_color=data['film_code'],
                panel_quantity=quantity,
                status="new"
            )
            
            db.add(production_order)
            db.commit()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ
            order_text = (
                f"‚úÖ –ó–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ #{production_order.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                f"–ü–ª–µ–Ω–∫–∞: {production_order.film_color}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π: {production_order.panel_quantity}"
            )
            
            await message.answer(order_text)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üìù –ó–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ")],
                    [KeyboardButton(text="üì¶ –ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞ —Å–∫–ª–∞–¥")],
                    [KeyboardButton(text="üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏")]
                ],
                resize_keyboard=True
            )
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
            
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}")
        finally:
            db.close()
            await state.clear()
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

@router.message(SalesStates.waiting_for_joint_type)
async def process_joint_type(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å—Ç—ã–∫–∞"""
    db = next(get_db())
    try:
        joint_type_str = message.text.strip().lower()
        joint_type_map = {
            "–ø—Ä–æ—Å—Ç–æ–π": JointType.SIMPLE,
            "–±–∞–±–æ—á–∫–∞": JointType.BUTTERFLY,
            "–∑–∞–º—ã–∫–∞—é—â–∏–π": JointType.CLOSING
        }
        if joint_type_str not in joint_type_map:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å—Ç—ã–∫–∞. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: –ø—Ä–æ—Å—Ç–æ–π, –±–∞–±–æ—á–∫–∞, –∑–∞–º—ã–∫–∞—é—â–∏–π")
            return
        
        await state.update_data(joint_type=joint_type_map[joint_type_str])
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç —Å—Ç—ã–∫–∞:")
        await state.set_state(SalesStates.waiting_for_joint_color)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç—ã–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞")

@router.message(SalesStates.waiting_for_joint_color)
async def process_joint_color(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–≤–µ—Ç–∞ —Å—Ç—ã–∫–∞"""
    db = next(get_db())
    try:
        joint_color = message.text.strip()
        await state.update_data(joint_color=joint_color)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—ã–∫–æ–≤:")
        await state.set_state(SalesStates.waiting_for_joint_quantity)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç —Å—Ç—ã–∫–∞")

@router.message(SalesStates.waiting_for_joint_quantity)
async def process_order_joint_quantity(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—ã–∫–æ–≤"""
    user_choice = message.text.strip()
    
    if user_choice == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ü–≤–µ—Ç–∞ —Å—Ç—ã–∫–∞
        data = await state.get_data()
        joint_type = data.get('joint_type')
        thickness = data.get('joint_thickness')
        
        db = next(get_db())
        try:
            available_joints = db.query(Joint).filter(
                Joint.type == joint_type,
                Joint.thickness == thickness,
                Joint.quantity > 0
            ).all()
            
            if not available_joints:
                await message.answer(
                    "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—ã–∫–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏ —Ç–æ–ª—â–∏–Ω—ã.",
                    reply_markup=get_joint_type_keyboard()
                )
                await state.set_state(SalesStates.waiting_for_order_joint_type)
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
            keyboard = []
            row = []
            for joint in available_joints:
                if len(row) < 3:  # –ú–∞–∫—Å–∏–º—É–º 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
                    row.append(KeyboardButton(text=f"{joint.color} ({joint.quantity} —à—Ç.)"))
                else:
                    keyboard.append(row)
                    row = [KeyboardButton(text=f"{joint.color} ({joint.quantity} —à—Ç.)")]
            
            if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
                keyboard.append(row)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard.append([KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")])
            
            await message.answer(
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —Å—Ç—ã–∫–∞ ({joint_type}, {thickness} –º–º):",
                reply_markup=ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
            )
            await state.set_state(SalesStates.waiting_for_order_joint_color)
        finally:
            db.close()
        return
    
    try:
        quantity = int(user_choice)
        if quantity <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—ã–∫–æ–≤
        data = await state.get_data()
        joint_type = data.get('joint_type')
        joint_type_str = data.get('joint_type_str', '')  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        thickness = data.get('joint_thickness')
        color = data.get('joint_color')
        
        db = next(get_db())
        try:
            # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—ã–∫ –≤ –±–∞–∑–µ
            joint = db.query(Joint).filter(
                Joint.type == joint_type,
                Joint.thickness == thickness,
                Joint.color == color
            ).first()
            
            if not joint or joint.quantity < quantity:
                max_quantity = joint.quantity if joint else 0
                await message.answer(
                    f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç—ã–∫–æ–≤. –î–æ—Å—Ç—É–ø–Ω–æ: {max_quantity} —à—Ç.",
                    reply_markup=ReplyKeyboardMarkup(
                        keyboard=[[KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]],
                        resize_keyboard=True
                    )
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—ã–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            selected_joints = data.get('selected_joints', [])
            
            joint_data = {
                "type": joint_type_str,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å—Ç—ã–∫–∞
                "color": color,
                "thickness": thickness,
                "quantity": quantity
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç—ã–∫ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
            await state.update_data(last_joint=joint_data)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç—ã–∫
            selected_joints.append(joint_data)
            await state.update_data(selected_joints=selected_joints)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—ã–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            joints_text = "\n".join([
                f"‚Ä¢ {j['type']}, {j['thickness']} –º–º, {j['color']}, {j['quantity']} —à—Ç."
                for j in selected_joints
            ])
            
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –Ω—É–∂–Ω—ã –ª–∏ –µ—â–µ —Å—Ç—ã–∫–∏
            await message.answer(
                f"‚úÖ –°—Ç—ã–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫–∞–∑\n\n–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—ã–∫–∏:\n{joints_text}\n\n–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å—Ç—ã–∫–∏?",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                        [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                    ],
                    resize_keyboard=True
                )
            )
            await state.set_state(SalesStates.waiting_for_order_more_joints)
        finally:
            db.close()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

async def process_order_more_joints(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç—ã–∫–æ–≤"""
    user_choice = message.text.strip()
    
    if user_choice == "‚óÄÔ∏è –ù–∞–∑–∞–¥":
        # –û—Ç–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Å—Ç—ã–∫
        data = await state.get_data()
        selected_joints = data.get('selected_joints', [])
        
        if selected_joints:
            # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Å—Ç—ã–∫
            selected_joints.pop()
            await state.update_data(selected_joints=selected_joints)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            last_joint = data.get('last_joint', {})
            joint_type = last_joint.get('type', data.get('joint_type'))
            thickness = last_joint.get('thickness', data.get('joint_thickness'))
            color = last_joint.get('color', data.get('joint_color'))
            
            await message.answer(
                f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—ã–∫–æ–≤ ({joint_type}, {thickness} –º–º, {color}):",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                    ],
                    resize_keyboard=True
                )
            )
            await state.set_state(SalesStates.waiting_for_order_joint_quantity)
            return
        else:
            # –ï—Å–ª–∏ —Å—Ç—ã–∫–æ–≤ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Å—Ç—ã–∫–∞
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç—ã–∫–∞:",
                reply_markup=get_joint_type_keyboard()
            )
            await state.set_state(SalesStates.waiting_for_order_joint_type)
            return
    
    if user_choice == "‚úÖ –î–∞":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å—Ç—ã–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç—ã–∫–∞:",
            reply_markup=get_joint_type_keyboard()
        )
        await state.set_state(SalesStates.waiting_for_order_joint_type)
    elif user_choice == "‚ùå –ù–µ—Ç":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–æ–Ω—á–∏–ª –≤—ã–±–æ—Ä —Å—Ç—ã–∫–æ–≤, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ –∫–ª–µ–µ
        await message.answer(
            "–ù—É–∂–µ–Ω –ª–∏ –∫–ª–µ–π –¥–ª—è —Å—Ç—ã–∫–æ–≤?",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(SalesStates.waiting_for_order_glue_needed)
    else:
        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
        )

async def process_add_more_joints(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –µ—â–µ —Å—Ç—ã–∫–æ–≤"""
    response = message.text.strip()
    
    if response == "‚úÖ –î–∞":
        installation_required = True
    elif response == "‚ùå –ù–µ—Ç":
        installation_required = False
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: ‚úÖ –î–∞ –∏–ª–∏ ‚ùå –ù–µ—Ç",
            reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–Ω—Ç–∞–∂–µ
    await state.update_data(installation_required=installation_required)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:",
        reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
    )
    await state.set_state(SalesStates.waiting_for_order_customer_phone)

async def process_order_customer_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
    phone = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not phone or len(phone) < 5:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
            reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.update_data(customer_phone=phone)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç' –µ—Å–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑):",
        reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
    )
    await state.set_state(SalesStates.waiting_for_order_delivery_address)

async def process_order_delivery_address(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    address = message.text.strip()
    
    # –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω, —Å—á–∏—Ç–∞–µ–º —Å–∞–º–æ–≤—ã–≤–æ–∑–æ–º
    if address.lower() == "–Ω–µ—Ç":
        address = "–°–∞–º–æ–≤—ã–≤–æ–∑"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
    await state.update_data(delivery_address=address)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
    selected_products = data.get('selected_products', [])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—ã–∫–∞—Ö
    selected_joints = data.get('selected_joints', [])
    
    need_joints = data.get('need_joints', False)
    need_glue = data.get('need_glue', False)
    glue_quantity = data.get('glue_quantity', 0)
    installation_required = data.get('installation_required', False)
    customer_phone = data.get('customer_phone', '')
    delivery_address = data.get('delivery_address', '')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
    order_summary = f"üìù –°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–∞:\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
    if selected_products:
        order_summary += f"üì¶ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n"
        total_panels = 0
        for product in selected_products:
            order_summary += f"‚ñ™Ô∏è {product['film_code']} (—Ç–æ–ª—â–∏–Ω–∞ {product['thickness']} –º–º): {product['quantity']} —à—Ç.\n"
            total_panels += product['quantity']
        order_summary += f"–í—Å–µ–≥–æ –ø–∞–Ω–µ–ª–µ–π: {total_panels} —à—Ç.\n\n"
    else:
        order_summary += "–ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—ã–∫–∞—Ö
    if need_joints and selected_joints:
        order_summary += f"üîó –°—Ç—ã–∫–∏:\n"
        for joint in selected_joints:
            joint_type = joint.get('type', '')
            joint_type_text = ''
            if joint_type == 'butterfly':
                joint_type_text = "–ë–∞–±–æ—á–∫–∞"
            elif joint_type == 'simple':
                joint_type_text = "–ü—Ä–æ—Å—Ç—ã–µ"
            elif joint_type == 'closing':
                joint_type_text = "–ó–∞–º—ã–∫–∞—é—â–∏–µ"
            
            order_summary += f"‚ñ™Ô∏è –¢–∏–ø: {joint_type_text}, {joint.get('thickness', '')} –º–º, {joint.get('color', '')}: {joint.get('quantity', 0)} —à—Ç.\n"
        order_summary += "\n"
    else:
        order_summary += f"üîó –°—Ç—ã–∫–∏: –ù–µ—Ç\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    order_summary += f"üß¥ –ö–ª–µ–π: {glue_quantity} —Ç—é–±–∏–∫–æ–≤\n"
    order_summary += f"üîß –ú–æ–Ω—Ç–∞–∂: {'–¢—Ä–µ–±—É–µ—Ç—Å—è' if installation_required else '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}\n"
    order_summary += f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: {customer_phone}\n"
    order_summary += f"üöö –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_address}\n"
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await state.update_data(order_summary=order_summary)
    await state.set_state(MenuState.SALES_ORDER_CONFIRM)
    
    await message.answer(
        order_summary + "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:",
        reply_markup=get_menu_keyboard(MenuState.SALES_ORDER_CONFIRM)
    )
    await state.set_state(SalesStates.waiting_for_order_confirmation)
