from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from models import User, UserRole, Film, Panel, Joint, Glue, FinishedProduct, Operation, JointType, Order, ProductionOrder, OrderStatus
from database import get_db
import json
import logging
from navigation import MenuState, get_menu_keyboard, go_back

router = Router()

class SalesStates(StatesGroup):
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
    waiting_for_film_color = State()
    waiting_for_panel_quantity = State()
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ –Ω–∞ —Å–∫–ª–∞–¥
    waiting_for_film_code = State()
    waiting_for_panels_count = State()
    waiting_for_joint_type = State()
    waiting_for_joint_color = State()
    waiting_for_joint_quantity = State()
    waiting_for_glue_quantity = State()
    waiting_for_installation = State()
    waiting_for_phone = State()
    waiting_for_address = State()
    
    # –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
    waiting_for_order_film_color = State()
    waiting_for_order_panel_quantity = State()
    waiting_for_need_joints = State()
    waiting_for_order_joint_type = State()
    waiting_for_order_joint_thickness = State()
    waiting_for_order_joint_color = State()
    waiting_for_order_joint_quantity = State()
    waiting_for_need_glue = State()
    waiting_for_order_glue_quantity = State()
    waiting_for_order_installation = State()
    waiting_for_order_customer_phone = State()
    waiting_for_order_delivery_address = State()
    waiting_for_order_confirmation = State()

async def check_sales_access(message: Message) -> bool:
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user or (user.role != UserRole.SALES_MANAGER and user.role != UserRole.SUPER_ADMIN):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return False
        return True
    finally:
        db.close()

@router.message(F.text == "üìù –ó–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ")
async def handle_production_order(message: Message, state: FSMContext):
    if not await check_sales_access(message):
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–ª–∞–≥ –∞–¥–º–∏–Ω-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    state_data = await state.get_data()
    is_admin_context = state_data.get("is_admin_context", False)
    
    await state.set_state(MenuState.SALES_ORDER)
    db = next(get_db())
    try:
        films = db.query(Film).all()
        if not films:
            await message.answer(
                "–í –±–∞–∑–µ –Ω–µ—Ç –ø–ª–µ–Ω–∫–∏.",
                reply_markup=get_menu_keyboard(MenuState.SALES_MAIN, is_admin_context=is_admin_context)
            )
            return
        
        films_info = [f"- {film.code}" for film in films]
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–ª–µ–Ω–∫–∏.\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n" + "\n".join(films_info),
            reply_markup=get_menu_keyboard(MenuState.SALES_ORDER, is_admin_context=is_admin_context)
        )
        await state.set_state(SalesStates.waiting_for_film_color)
    finally:
        db.close()

@router.message(F.text == "üì¶ –ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞ —Å–∫–ª–∞–¥")
async def handle_warehouse_order(message: Message, state: FSMContext):
    if not await check_sales_access(message):
        return
    
    await state.set_state(MenuState.SALES_ORDER)
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏
        finished_products = db.query(FinishedProduct).join(Film).all()
        if not finished_products:
            await message.answer(
                "–ù–∞ —Å–∫–ª–∞–¥–µ –Ω–µ—Ç –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏.",
                reply_markup=get_menu_keyboard(MenuState.SALES_MAIN)
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏
        products_info = []
        for product in finished_products:
            products_info.append(
                f"‚Ä¢ –ü–∞–Ω–µ–ª–∏ —Å –ø–ª–µ–Ω–∫–æ–π {product.film.code} (—Ç–æ–ª—â–∏–Ω–∞: {product.thickness} –º–º): {product.quantity} —à—Ç."
            )
        
        if not products_info:
            await message.answer(
                "–ù–∞ —Å–∫–ª–∞–¥–µ –Ω–µ—Ç –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏.",
                reply_markup=get_menu_keyboard(MenuState.SALES_MAIN)
            )
            return
        
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–ª–µ–Ω–∫–∏.\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n" + "\n".join(products_info),
            reply_markup=get_menu_keyboard(MenuState.SALES_ORDER)
        )
        await state.set_state(SalesStates.waiting_for_film_code)
    finally:
        db.close()

@router.message(F.text == "üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏")
async def handle_stock(message: Message, state: FSMContext):
    if not await check_sales_access(message):
        return
    
    state_data = await state.get_data()
    is_admin_context = state_data.get("is_admin_context", False)
    
    await state.set_state(MenuState.SALES_STOCK)
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏
        finished_products = db.query(FinishedProduct).join(Film).all()
        if not finished_products:
            await message.answer(
                "–ù–∞ —Å–∫–ª–∞–¥–µ –Ω–µ—Ç –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏.",
                reply_markup=get_menu_keyboard(MenuState.SALES_MAIN, is_admin_context)
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏
        response = "üì¶ –ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è –Ω–∞ —Å–∫–ª–∞–¥–µ:\n\n"
        for product in finished_products:
            if product.quantity > 0:
                response += f"- {product.film.code}: {product.quantity} —à—Ç.\n"
        
        await message.answer(
            response,
            reply_markup=get_menu_keyboard(MenuState.SALES_STOCK, is_admin_context)
        )
    finally:
        db.close()

@router.message(F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥")
async def handle_back(message: Message, state: FSMContext):
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
            return
        
        next_menu, keyboard = await go_back(state, user.role)
        await state.set_state(next_menu)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
    finally:
        db.close()

@router.message(SalesStates.waiting_for_film_color)
async def process_film_color(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø–ª–µ–Ω–∫–∏"""
    db = next(get_db())
    try:
        film = db.query(Film).filter(Film.code == message.text.strip()).first()
        if not film:
            await message.answer("‚ùå –ü–ª–µ–Ω–∫–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:")
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –ø–ª–µ–Ω–∫–∏
        await state.update_data(film_color=film.code)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π:")
        await state.set_state(SalesStates.waiting_for_panel_quantity)
    finally:
        db.close()

@router.message(SalesStates.waiting_for_panel_quantity)
async def process_panel_quantity(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞–Ω–µ–ª–µ–π –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    try:
        quantity = int(message.text.strip())
        if quantity <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        
        db = next(get_db())
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
            if not user:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
            production_order = ProductionOrder(
                manager_id=user.id,
                film_color=data['film_color'],
                panel_quantity=quantity,
                status="new"
            )
            
            db.add(production_order)
            db.commit()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ
            order_text = (
                f"‚úÖ –ó–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ #{production_order.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                f"–ü–ª–µ–Ω–∫–∞: {production_order.film_color}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π: {production_order.panel_quantity}"
            )
            
            await message.answer(order_text)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üìù –ó–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ")],
                    [KeyboardButton(text="üì¶ –ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞ —Å–∫–ª–∞–¥")],
                    [KeyboardButton(text="üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏")]
                ],
                resize_keyboard=True
            )
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
            
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}")
        finally:
            db.close()
            await state.clear()
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

@router.message(SalesStates.waiting_for_film_code)
async def process_film_code(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø–ª–µ–Ω–∫–∏"""
    db = next(get_db())
    try:
        film = db.query(Film).filter(Film.code == message.text.strip()).first()
        if not film:
            await message.answer("‚ùå –ü–ª–µ–Ω–∫–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:")
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –ø–ª–µ–Ω–∫–∏
        await state.update_data(film_code=film.code)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π:")
        await state.set_state(SalesStates.waiting_for_panels_count)
    finally:
        db.close()

@router.message(SalesStates.waiting_for_panels_count)
async def process_panels_count(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞–Ω–µ–ª–µ–π –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    try:
        quantity = int(message.text.strip())
        if quantity <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        
        db = next(get_db())
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
            if not user:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
            production_order = ProductionOrder(
                manager_id=user.id,
                film_color=data['film_code'],
                panel_quantity=quantity,
                status="new"
            )
            
            db.add(production_order)
            db.commit()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –∑–∞–∫–∞–∑–µ
            order_text = (
                f"‚úÖ –ó–∞–∫–∞–∑ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ #{production_order.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                f"–ü–ª–µ–Ω–∫–∞: {production_order.film_color}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π: {production_order.panel_quantity}"
            )
            
            await message.answer(order_text)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üìù –ó–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ")],
                    [KeyboardButton(text="üì¶ –ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞ —Å–∫–ª–∞–¥")],
                    [KeyboardButton(text="üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏")]
                ],
                resize_keyboard=True
            )
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
            
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}")
        finally:
            db.close()
            await state.clear()
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

@router.message(SalesStates.waiting_for_joint_type)
async def process_joint_type(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å—Ç—ã–∫–∞"""
    db = next(get_db())
    try:
        joint_type_str = message.text.strip().lower()
        joint_type_map = {
            "–ø—Ä–æ—Å—Ç–æ–π": JointType.SIMPLE,
            "–±–∞–±–æ—á–∫–∞": JointType.BUTTERFLY,
            "–∑–∞–º—ã–∫–∞—é—â–∏–π": JointType.CLOSING
        }
        if joint_type_str not in joint_type_map:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å—Ç—ã–∫–∞. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: –ø—Ä–æ—Å—Ç–æ–π, –±–∞–±–æ—á–∫–∞, –∑–∞–º—ã–∫–∞—é—â–∏–π")
            return
        
        await state.update_data(joint_type=joint_type_map[joint_type_str])
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç —Å—Ç—ã–∫–∞:")
        await state.set_state(SalesStates.waiting_for_joint_color)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç—ã–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞")

@router.message(SalesStates.waiting_for_joint_color)
async def process_joint_color(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–≤–µ—Ç–∞ —Å—Ç—ã–∫–∞"""
    db = next(get_db())
    try:
        joint_color = message.text.strip()
        await state.update_data(joint_color=joint_color)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—ã–∫–æ–≤:")
        await state.set_state(SalesStates.waiting_for_joint_quantity)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç —Å—Ç—ã–∫–∞")

@router.message(SalesStates.waiting_for_joint_quantity)
async def process_joint_quantity(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—ã–∫–æ–≤"""
    try:
        quantity = int(message.text.strip())
        if quantity <= 0:
            await message.answer(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0",
                reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—ã–∫–æ–≤
        db = next(get_db())
        try:
            data = await state.get_data()
            joint_type = data.get('joint_type')
            joint_thickness = data.get('joint_thickness')
            joint_color = data.get('joint_color', '')
            
            joint = db.query(Joint).filter(
                Joint.type == joint_type,
                Joint.thickness == joint_thickness,
                Joint.color == joint_color
            ).first()
            
            if not joint or joint.quantity < quantity:
                available = joint.quantity if joint else 0
                await message.answer(
                    f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—ã–∫–æ–≤ (–¥–æ—Å—Ç—É–ø–Ω–æ: {available} —à—Ç.)",
                    reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—ã–∫–æ–≤
            await state.update_data(joint_quantity=quantity)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–ª–µ—è
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
            await message.answer(
                "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –∫–ª–µ–π?",
                reply_markup=keyboard
            )
            await state.set_state(SalesStates.waiting_for_need_glue)
        finally:
            db.close()
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ",
            reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
        )

@router.message(SalesStates.waiting_for_glue_quantity)
async def process_glue_quantity(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–µ—è"""
    try:
        quantity = int(message.text.strip())
        if quantity < 0:
            await message.answer(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º",
                reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–µ—è
        db = next(get_db())
        try:
            glue = db.query(Glue).first()
            if not glue or glue.quantity < quantity:
                available = glue.quantity if glue else 0
                if quantity > 0:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –∫–ª–µ–π
                    await message.answer(
                        f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—è (–¥–æ—Å—Ç—É–ø–Ω–æ: {available} —Ç—é–±–∏–∫–æ–≤)",
                        reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
                    )
                    return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—è
            await state.update_data(glue_quantity=quantity)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –æ –º–æ–Ω—Ç–∞–∂–µ
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
            await message.answer(
                "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –º–æ–Ω—Ç–∞–∂?",
                reply_markup=keyboard
            )
            await state.set_state(SalesStates.waiting_for_order_installation)
        finally:
            db.close()
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ",
            reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
        )

@router.message(SalesStates.waiting_for_installation)
async def process_installation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–Ω—Ç–∞–∂–∞"""
    db = next(get_db())
    try:
        installation = message.text.strip().lower()
        if installation not in ["–¥–∞", "–Ω–µ—Ç"]:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞: –¥–∞/–Ω–µ—Ç")
            return
        
        await state.update_data(installation=installation == "–¥–∞")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞:")
        await state.set_state(SalesStates.waiting_for_phone)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω—Ç–∞–∂ –∏–∑ —Å–ø–∏—Å–∫–∞")

@router.message(SalesStates.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
    db = next(get_db())
    try:
        phone = message.text.strip()
        await state.update_data(phone=phone)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
        await state.set_state(SalesStates.waiting_for_address)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞")

@router.message(SalesStates.waiting_for_address)
async def process_address(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    db = next(get_db())
    try:
        address = message.text.strip()
        await state.update_data(address=address)
        await message.answer("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏")

@router.message(Command("stock"))
async def cmd_stock(message: Message):
    if not await check_sales_access(message):
        return
        
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏
        finished_products = db.query(FinishedProduct).join(Film).all()
        
        if not finished_products:
            await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ.")
            return
            
        response = "–¢–µ–∫—É—â–∏–µ –∑–∞–ø–∞—Å—ã –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏:\n\n"
        
        # –ü–∞–Ω–µ–ª–∏
        response += "üì¶ –ì–æ—Ç–æ–≤—ã–µ –ø–∞–Ω–µ–ª–∏:\n"
        for product in finished_products:
            response += f"–ö–æ–¥ –ø–∞–Ω–µ–ª–∏: {product.film.code}\n"
            response += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product.quantity} —à—Ç.\n\n"
        
        # –°—Ç—ã–∫–∏
        joints = db.query(Joint).all()
        response += "üîÑ –°—Ç—ã–∫–∏:\n"
        for joint in joints:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø —Å—Ç—ã–∫–∞ –≤ –ø–æ–Ω—è—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            joint_type_map = {
                "butterfly": "–±–∞–±–æ—á–∫–∞",
                "simple": "–ø—Ä–æ—Å—Ç–æ–π",
                "closing": "–∑–∞–º—ã–∫–∞—é—â–∏–π"
            }
            joint_type = joint_type_map.get(joint.type.value, joint.type.value)
            
            response += f"–¶–≤–µ—Ç: {joint.color} ({joint_type})\n"
            response += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {joint.quantity} —à—Ç.\n\n"
        
        # –ö–ª–µ–π
        glue = db.query(Glue).first()
        response += "üß™ –ö–ª–µ–π:\n"
        if glue:
            response += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {glue.quantity} —à—Ç.\n"
        else:
            response += "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏\n"
        
        await message.answer(response)
    finally:
        db.close()

@router.message(F.text == "üìù –°–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑")
async def handle_create_order(message: Message, state: FSMContext):
    if not await check_sales_access(message):
        return
    
    await state.set_state(MenuState.SALES_CREATE_ORDER)
    db = next(get_db())
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –ø–ª–µ–Ω–∫–∏
        finished_products = db.query(FinishedProduct).join(Film).all()
        films = db.query(Film).all()
        
        # –°–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏
        ready_products = []
        if finished_products:
            for product in finished_products:
                if product.quantity > 0:
                    ready_products.append(f"‚Ä¢ {product.film.code} (–≥–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è: {product.quantity} —à—Ç.)")
        
        # –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏
        manufacturable_products = []
        for film in films:
            if film.total_remaining > 0:
                possible_panels = film.calculate_possible_panels()
                if possible_panels > 0:
                    manufacturable_products.append(f"‚Ä¢ {film.code} (–º–æ–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏: {possible_panels} –ø–∞–Ω–µ–ª–µ–π)")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        message_text = ""
        
        if ready_products:
            message_text += "üé® –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏:\n"
            message_text += "\n".join(ready_products)
            message_text += "\n\n"  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        
        if manufacturable_products:
            message_text += "üõ† –¶–≤–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∏–∑ —Ç–µ–∫—É—â–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:\n"
            message_text += "\n".join(manufacturable_products)
        
        if not ready_products and not manufacturable_products:
            await message.answer(
                "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –ø–ª–µ–Ω–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞.",
                reply_markup=get_menu_keyboard(MenuState.SALES_MAIN)
            )
            return
        
        await message.answer(
            message_text,
            reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
        )
        await state.set_state(SalesStates.waiting_for_order_film_color)
    finally:
        db.close()

@router.message(SalesStates.waiting_for_order_film_color)
async def process_order_film_color(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞ –ø–ª–µ–Ω–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞"""
    db = next(get_db())
    try:
        film_code = message.text.strip()
        film = db.query(Film).filter(Film.code == film_code).first()
        
        if not film:
            await message.answer(
                "‚ùå –ü–ª–µ–Ω–∫–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:",
                reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç –ø–ª–µ–Ω–∫–∏
        await state.update_data(film_code=film_code)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏
        finished_product = db.query(FinishedProduct).join(Film).filter(Film.code == film_code).first()
        available_quantity = 0
        if finished_product:
            available_quantity = finished_product.quantity
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π
        await message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π (–¥–æ—Å—Ç—É–ø–Ω–æ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏: {available_quantity} —à—Ç.):",
            reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
        )
        await state.set_state(SalesStates.waiting_for_order_panel_quantity)
    finally:
        db.close()

@router.message(SalesStates.waiting_for_order_panel_quantity)
async def process_order_panel_quantity(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞–Ω–µ–ª–µ–π –¥–ª—è –∑–∞–∫–∞–∑–∞"""
    try:
        quantity = int(message.text.strip())
        if quantity <= 0:
            await message.answer(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0",
                reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π
        await state.update_data(panel_quantity=quantity)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Å—Ç—ã–∫–æ–≤
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        await message.answer(
            "–¢—Ä–µ–±—É—é—Ç—Å—è –ª–∏ —Å—Ç—ã–∫–∏?",
            reply_markup=keyboard
        )
        await state.set_state(SalesStates.waiting_for_need_joints)
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ",
            reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
        )

@router.message(SalesStates.waiting_for_need_joints)
async def process_need_joints(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—ã–∫–æ–≤"""
    response = message.text.strip()
    
    if response == "‚úÖ –î–∞":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Å—Ç—ã–∫–∏
        await state.update_data(need_joints=True)
        
        # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—ã–∫–∏
        db = next(get_db())
        try:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç—ã–∫–∏ –ø–æ —Ç–∏–ø—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            butterfly_joints = db.query(Joint).filter(Joint.type == JointType.BUTTERFLY, Joint.quantity > 0).all()
            simple_joints = db.query(Joint).filter(Joint.type == JointType.SIMPLE, Joint.quantity > 0).all()
            closing_joints = db.query(Joint).filter(Joint.type == JointType.CLOSING, Joint.quantity > 0).all()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—ã–∫–∞—Ö
            joints_info = "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—ã–∫–∏:\n\n"
            
            if butterfly_joints:
                joints_info += "ü¶ã –ë–∞–±–æ—á–∫–∞:\n"
                for thickness in [0.5, 0.8]:
                    thickness_joints = [j for j in butterfly_joints if j.thickness == thickness]
                    if thickness_joints:
                        joints_info += f"  {thickness} –º–º: "
                        joints_info += ", ".join([f"{j.color} ({j.quantity} —à—Ç.)" for j in thickness_joints])
                        joints_info += "\n"
            
            if simple_joints:
                joints_info += "üîÑ –ü—Ä–æ—Å—Ç—ã–µ:\n"
                for thickness in [0.5, 0.8]:
                    thickness_joints = [j for j in simple_joints if j.thickness == thickness]
                    if thickness_joints:
                        joints_info += f"  {thickness} –º–º: "
                        joints_info += ", ".join([f"{j.color} ({j.quantity} —à—Ç.)" for j in thickness_joints])
                        joints_info += "\n"
            
            if closing_joints:
                joints_info += "üîí –ó–∞–º—ã–∫–∞—é—â–∏–µ:\n"
                for thickness in [0.5, 0.8]:
                    thickness_joints = [j for j in closing_joints if j.thickness == thickness]
                    if thickness_joints:
                        joints_info += f"  {thickness} –º–º: "
                        joints_info += ", ".join([f"{j.color} ({j.quantity} —à—Ç.)" for j in thickness_joints])
                        joints_info += "\n"
            
            if not butterfly_joints and not simple_joints and not closing_joints:
                joints_info = "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—ã–∫–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ"
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ç—ã–∫–æ–≤, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ –∫–ª–µ–µ
                await state.update_data(need_joints=False, joint_type=None, joint_thickness=None, joint_color=None, joint_quantity=0)
                
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∫–ª–µ—è
                keyboard = ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                        [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                    ],
                    resize_keyboard=True
                )
                await message.answer(
                    joints_info + "\n\n–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –∫–ª–µ–π?",
                    reply_markup=keyboard
                )
                await state.set_state(SalesStates.waiting_for_need_glue)
                return
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø —Å—Ç—ã–∫–∞
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="ü¶ã –ë–∞–±–æ—á–∫–∞")] if butterfly_joints else [],
                    [KeyboardButton(text="üîÑ –ü—Ä–æ—Å—Ç—ã–µ")] if simple_joints else [],
                    [KeyboardButton(text="üîí –ó–∞–º—ã–∫–∞—é—â–∏–µ")] if closing_joints else [],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
            
            await message.answer(
                joints_info + "\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç—ã–∫–∞:",
                reply_markup=keyboard
            )
            await state.set_state(SalesStates.waiting_for_order_joint_type)
        finally:
            db.close()
    elif response == "‚ùå –ù–µ—Ç":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ö–æ—á–µ—Ç —Å—Ç—ã–∫–∏
        await state.update_data(need_joints=False, joint_type=None, joint_thickness=None, joint_color=None, joint_quantity=0)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–ª–µ—è
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        await message.answer(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –∫–ª–µ–π?",
            reply_markup=keyboard
        )
        await state.set_state(SalesStates.waiting_for_need_glue)
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: ‚úÖ –î–∞ –∏–ª–∏ ‚ùå –ù–µ—Ç",
            reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
        )

@router.message(SalesStates.waiting_for_order_joint_type)
async def process_order_joint_type(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å—Ç—ã–∫–∞"""
    joint_type_text = message.text.strip()
    
    joint_type_map = {
        "ü¶ã –ë–∞–±–æ—á–∫–∞": JointType.BUTTERFLY,
        "üîÑ –ü—Ä–æ—Å—Ç—ã–µ": JointType.SIMPLE,
        "üîí –ó–∞–º—ã–∫–∞—é—â–∏–µ": JointType.CLOSING
    }
    
    if joint_type_text not in joint_type_map:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç—ã–∫–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
            reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Å—Ç—ã–∫–∞ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º –æ–±—ä–µ–∫—Ç enum, –∞ –Ω–µ –µ–≥–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ)
    joint_type = joint_type_map[joint_type_text]
    await state.update_data(joint_type=joint_type)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—â–∏–Ω—É —Å—Ç—ã–∫–∞
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="0.5 –º–º"), KeyboardButton(text="0.8 –º–º")],
            [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—â–∏–Ω—É —Å—Ç—ã–∫–∞:",
        reply_markup=keyboard
    )
    await state.set_state(SalesStates.waiting_for_order_joint_thickness)

@router.message(SalesStates.waiting_for_order_joint_thickness)
async def process_order_joint_thickness(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–ª—â–∏–Ω—ã —Å—Ç—ã–∫–∞"""
    thickness_text = message.text.strip()
    
    thickness_map = {
        "0.5 –º–º": 0.5,
        "0.8 –º–º": 0.8
    }
    
    if thickness_text not in thickness_map:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—â–∏–Ω—É —Å—Ç—ã–∫–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
            reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—â–∏–Ω—É —Å—Ç—ã–∫–∞
    thickness = thickness_map[thickness_text]
    await state.update_data(joint_thickness=thickness)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞ —Å—Ç—ã–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = next(get_db())
    try:
        data = await state.get_data()
        joint_type = data.get('joint_type')
        
        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ —Å—Ç—ã–∫–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏ —Ç–æ–ª—â–∏–Ω—ã
        joints = db.query(Joint).filter(
            Joint.type == joint_type,
            Joint.thickness == thickness,
            Joint.quantity > 0
        ).all()
        
        colors = set(joint.color for joint in joints)
        
        if not colors:
            await message.answer(
                "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∏ —Ç–æ–ª—â–∏–Ω—ã —Å—Ç—ã–∫–∞",
                reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
        keyboard_buttons = []
        for color in colors:
            # –ù–∞–π–¥–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ü–≤–µ—Ç–∞
            joint = next((j for j in joints if j.color == color), None)
            quantity = joint.quantity if joint else 0
            keyboard_buttons.append([KeyboardButton(text=f"{color} (–æ—Å—Ç–∞—Ç–æ–∫: {quantity} —à—Ç.)")])
        
        keyboard_buttons.append([KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")])
        keyboard = ReplyKeyboardMarkup(keyboard=keyboard_buttons, resize_keyboard=True)
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —Å—Ç—ã–∫–∞:",
            reply_markup=keyboard
        )
        await state.set_state(SalesStates.waiting_for_order_joint_color)
    finally:
        db.close()

@router.message(SalesStates.waiting_for_order_joint_color)
async def process_order_joint_color(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞ —Å—Ç—ã–∫–∞"""
    joint_color_text = message.text.strip()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å—Ç—ã–π —Ü–≤–µ—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤–∏–¥–∞ "–ë–µ–ª—ã–π (–æ—Å—Ç–∞—Ç–æ–∫: 10 —à—Ç.)"
    if "(" in joint_color_text:
        joint_color = joint_color_text.split("(")[0].strip()
    else:
        joint_color = joint_color_text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç—ã–∫–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
    db = next(get_db())
    try:
        data = await state.get_data()
        joint_type = data.get('joint_type')
        joint_thickness = data.get('joint_thickness')
        
        joint = db.query(Joint).filter(
            Joint.type == joint_type,
            Joint.thickness == joint_thickness,
            Joint.color == joint_color,
            Joint.quantity > 0
        ).first()
        
        if not joint:
            await message.answer(
                "‚ùå –°—Ç—ã–∫–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–≤–µ—Ç —Å—Ç—ã–∫–∞
        await state.update_data(joint_color=joint_color)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—ã–∫–æ–≤
        available_quantity = joint.quantity
        await message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—ã–∫–æ–≤ (–¥–æ—Å—Ç—É–ø–Ω–æ: {available_quantity} —à—Ç.):",
            reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
        )
        await state.set_state(SalesStates.waiting_for_order_joint_quantity)
    finally:
        db.close()

@router.message(SalesStates.waiting_for_order_joint_quantity)
async def process_order_joint_quantity(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—ã–∫–æ–≤"""
    try:
        quantity = int(message.text.strip())
        if quantity <= 0:
            await message.answer(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0",
                reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—ã–∫–æ–≤
        db = next(get_db())
        try:
            data = await state.get_data()
            joint_type = data.get('joint_type')
            joint_thickness = data.get('joint_thickness')
            joint_color = data.get('joint_color', '')
            
            joint = db.query(Joint).filter(
                Joint.type == joint_type,
                Joint.thickness == joint_thickness,
                Joint.color == joint_color
            ).first()
            
            if not joint or joint.quantity < quantity:
                available = joint.quantity if joint else 0
                await message.answer(
                    f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—ã–∫–æ–≤ (–¥–æ—Å—Ç—É–ø–Ω–æ: {available} —à—Ç.)",
                    reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—ã–∫–æ–≤
            await state.update_data(joint_quantity=quantity)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–ª–µ—è
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
            await message.answer(
                "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –∫–ª–µ–π?",
                reply_markup=keyboard
            )
            await state.set_state(SalesStates.waiting_for_need_glue)
        finally:
            db.close()
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ",
            reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
        )

@router.message(SalesStates.waiting_for_order_glue_quantity)
async def process_order_glue_quantity(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–µ—è"""
    try:
        quantity = int(message.text.strip())
        if quantity < 0:
            await message.answer(
                "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º",
                reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–µ—è
        db = next(get_db())
        try:
            glue = db.query(Glue).first()
            if not glue or glue.quantity < quantity:
                available = glue.quantity if glue else 0
                if quantity > 0:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –∫–ª–µ–π
                    await message.answer(
                        f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—è (–¥–æ—Å—Ç—É–ø–Ω–æ: {available} —Ç—é–±–∏–∫–æ–≤)",
                        reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
                    )
                    return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—è
            await state.update_data(glue_quantity=quantity)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –æ –º–æ–Ω—Ç–∞–∂–µ
            keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                    [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True
            )
            await message.answer(
                "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –º–æ–Ω—Ç–∞–∂?",
                reply_markup=keyboard
            )
            await state.set_state(SalesStates.waiting_for_order_installation)
        finally:
            db.close()
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ",
            reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
        )

@router.message(SalesStates.waiting_for_order_installation)
async def process_order_installation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –º–æ–Ω—Ç–∞–∂–µ"""
    response = message.text.strip()
    
    if response == "‚úÖ –î–∞":
        installation_required = True
    elif response == "‚ùå –ù–µ—Ç":
        installation_required = False
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: ‚úÖ –î–∞ –∏–ª–∏ ‚ùå –ù–µ—Ç",
            reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–Ω—Ç–∞–∂–µ
    await state.update_data(installation_required=installation_required)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:",
        reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
    )
    await state.set_state(SalesStates.waiting_for_order_customer_phone)

@router.message(SalesStates.waiting_for_order_customer_phone)
async def process_order_customer_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
    phone = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not phone or len(phone) < 5:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
            reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.update_data(customer_phone=phone)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç' –µ—Å–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑):",
        reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
    )
    await state.set_state(SalesStates.waiting_for_order_delivery_address)

@router.message(SalesStates.waiting_for_order_delivery_address)
async def process_order_delivery_address(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    address = message.text.strip()
    
    # –ï—Å–ª–∏ –∞–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω, —Å—á–∏—Ç–∞–µ–º —Å–∞–º–æ–≤—ã–≤–æ–∑–æ–º
    if address.lower() == "–Ω–µ—Ç":
        address = "–°–∞–º–æ–≤—ã–≤–æ–∑"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
    await state.update_data(delivery_address=address)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    data = await state.get_data()
    
    film_code = data.get('film_code', '')
    panel_quantity = data.get('panel_quantity', 0)
    need_joints = data.get('need_joints', False)
    joint_type = data.get('joint_type', '')
    joint_thickness = data.get('joint_thickness', 0)
    joint_color = data.get('joint_color', '')
    joint_quantity = data.get('joint_quantity', 0)
    glue_quantity = data.get('glue_quantity', 0)
    installation_required = data.get('installation_required', False)
    customer_phone = data.get('customer_phone', '')
    delivery_address = data.get('delivery_address', '')
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø —Å—Ç—ã–∫–∞ –∏–∑ enum –≤ —Ç–µ–∫—Å—Ç
    joint_type_text = ""
    if joint_type:
        if joint_type == JointType.BUTTERFLY.value:
            joint_type_text = "–ë–∞–±–æ—á–∫–∞"
        elif joint_type == JointType.SIMPLE.value:
            joint_type_text = "–ü—Ä–æ—Å—Ç—ã–µ"
        elif joint_type == JointType.CLOSING.value:
            joint_type_text = "–ó–∞–º—ã–∫–∞—é—â–∏–µ"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
    order_summary = f"üìù –°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–∞:\n\n"
    order_summary += f"üé® –¶–≤–µ—Ç –ø–ª–µ–Ω–∫–∏: {film_code}\n"
    order_summary += f"üìè –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–Ω–µ–ª–µ–π: {panel_quantity} —à—Ç.\n"
    
    if need_joints:
        order_summary += f"üîó –°—Ç—ã–∫–∏: {joint_type_text}, {joint_thickness} –º–º, {joint_color}, {joint_quantity} —à—Ç.\n"
    else:
        order_summary += f"üîó –°—Ç—ã–∫–∏: –ù–µ—Ç\n"
    
    order_summary += f"üß¥ –ö–ª–µ–π: {glue_quantity} —Ç—é–±–∏–∫–æ–≤\n"
    order_summary += f"üîß –ú–æ–Ω—Ç–∞–∂: {'–¢—Ä–µ–±—É–µ—Ç—Å—è' if installation_required else '–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'}\n"
    order_summary += f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: {customer_phone}\n"
    order_summary += f"üöö –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_address}\n"
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await state.update_data(order_summary=order_summary)
    await state.set_state(MenuState.SALES_ORDER_CONFIRM)
    
    await message.answer(
        order_summary + "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:",
        reply_markup=get_menu_keyboard(MenuState.SALES_ORDER_CONFIRM)
    )
    await state.set_state(SalesStates.waiting_for_order_confirmation)

@router.message(SalesStates.waiting_for_order_confirmation)
async def process_order_confirmation(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    response = message.text.strip()
    
    if response == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = next(get_db())
        try:
            data = await state.get_data()
            user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç—ã–∫–æ–≤, –µ—Å–ª–∏ –Ω–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            need_joints = data.get('need_joints', False)
            joint_type = data.get('joint_type') if need_joints else JointType.SIMPLE  # –ò—Å–ø–æ–ª—å–∑—É–µ–º SIMPLE –∫–∞–∫ —Ç–∏–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            joint_color = data.get('joint_color', '') if need_joints else ''
            joint_quantity = data.get('joint_quantity', 0) if need_joints else 0

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
            new_order = Order(
                manager_id=user.id,
                film_code=data.get('film_code', ''),
                panel_quantity=data.get('panel_quantity', 0),
                joint_type=joint_type,  # –¢–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
                joint_color=joint_color,
                joint_quantity=joint_quantity,
                glue_quantity=data.get('glue_quantity', 0),
                installation_required=data.get('installation_required', False),
                customer_phone=data.get('customer_phone', ''),
                delivery_address=data.get('delivery_address', ''),
                status=OrderStatus.NEW
            )
            
            db.add(new_order)
            db.commit()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer(
                f"‚úÖ –ó–∞–∫–∞–∑ #{new_order.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n" + data.get('order_summary', ''),
                reply_markup=get_menu_keyboard(MenuState.SALES_MAIN)
            )
            await state.set_state(MenuState.SALES_MAIN)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–∫–ª–∞–¥ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
            warehouse_users = db.query(User).filter(User.role == UserRole.WAREHOUSE).all()
            for wh_user in warehouse_users:
                try:
                    await message.bot.send_message(
                        wh_user.telegram_id,
                        f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{new_order.id}!\n\n" + data.get('order_summary', '')
                    )
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∫–ª–∞–¥–æ–≤—â–∏–∫—É {wh_user.telegram_id}: {str(e)}")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}")
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {str(e)}",
                reply_markup=get_menu_keyboard(MenuState.SALES_MAIN)
            )
            await state.set_state(MenuState.SALES_MAIN)
        finally:
            db.close()
    elif response == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑
        await message.answer(
            "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω",
            reply_markup=get_menu_keyboard(MenuState.SALES_MAIN)
        )
        await state.set_state(MenuState.SALES_MAIN)
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
            reply_markup=get_menu_keyboard(MenuState.SALES_ORDER_CONFIRM)
        )

@router.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É")
async def handle_back_to_admin(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞"""
    db = next(get_db())
    try:
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if not user or user.role != UserRole.SUPER_ADMIN:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–¥–º–∏–Ω–∞
        await state.update_data(is_admin_context=False)
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
        await state.set_state(MenuState.SUPER_ADMIN_MAIN)
        await message.answer(
            "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=get_menu_keyboard(MenuState.SUPER_ADMIN_MAIN)
        )
    finally:
        db.close()

@router.message(SalesStates.waiting_for_need_glue)
async def process_need_glue(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–ª–µ—è"""
    response = message.text.strip()
    
    if response == "‚úÖ –î–∞":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∫–ª–µ–π
        await state.update_data(need_glue=True)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—è
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª–µ—è –≤ –±–∞–∑–µ
        db = next(get_db())
        try:
            glue = db.query(Glue).first()
            available = glue.quantity if glue else 0
            
            await message.answer(
                f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–µ—è (–¥–æ—Å—Ç—É–ø–Ω–æ: {available} —Ç—é–±–∏–∫–æ–≤):",
                reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
            )
            await state.set_state(SalesStates.waiting_for_order_glue_quantity)
        finally:
            db.close()
    elif response == "‚ùå –ù–µ—Ç":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ö–æ—á–µ—Ç –∫–ª–µ–π
        await state.update_data(need_glue=False, glue_quantity=0)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –æ –º–æ–Ω—Ç–∞–∂–µ
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")],
                [KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        await message.answer(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –º–æ–Ω—Ç–∞–∂?",
            reply_markup=keyboard
        )
        await state.set_state(SalesStates.waiting_for_order_installation)
    else:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: ‚úÖ –î–∞ –∏–ª–∏ ‚ùå –ù–µ—Ç",
            reply_markup=get_menu_keyboard(MenuState.SALES_CREATE_ORDER)
        ) 