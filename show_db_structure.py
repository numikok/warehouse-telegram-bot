from sqlalchemy import create_engine, text, inspect
import os
from dotenv import load_dotenv
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
DATABASE_URL = os.getenv("DATABASE_URL")

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è Heroku: –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ postgres:// –≤ postgresql://
if DATABASE_URL and DATABASE_URL.startswith("postgres://"):
    DATABASE_URL = DATABASE_URL.replace("postgres://", "postgresql://", 1)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
engine = create_engine(DATABASE_URL)
inspector = inspect(engine)

def show_tables():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
    logger.info("\n=== –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    tables = inspector.get_table_names()
    logger.info(f"\n–ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
    
    # –î–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    for table_name in tables:
        logger.info(f"\nüìã –¢–∞–±–ª–∏—Ü–∞: {table_name}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö
        columns = inspector.get_columns(table_name)
        logger.info("–ö–æ–ª–æ–Ω–∫–∏:")
        for column in columns:
            logger.info(f"  - {column['name']}: {column['type']}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–∏—á–Ω—ã–µ –∫–ª—é—á–∏
        pk = inspector.get_pk_constraint(table_name)
        if pk['constrained_columns']:
            logger.info(f"–ü–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á: {', '.join(pk['constrained_columns'])}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
        fks = inspector.get_foreign_keys(table_name)
        if fks:
            logger.info("–í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏:")
            for fk in fks:
                logger.info(f"  - {fk['constrained_columns']} -> {fk['referred_table']}.{fk['referred_columns']}")

def show_enum_types():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ enum —Ç–∏–ø—ã –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è"""
    logger.info("\n=== Enum —Ç–∏–ø—ã ===")
    
    with engine.connect() as conn:
        result = conn.execute(text("""
            SELECT t.typname, e.enumlabel
            FROM pg_type t 
            JOIN pg_enum e ON t.oid = e.enumtypid
            ORDER BY t.typname, e.enumsortorder;
        """))
        
        current_type = None
        for row in result:
            if current_type != row[0]:
                current_type = row[0]
                logger.info(f"\nüî∑ {current_type}:")
            logger.info(f"  - {row[1]}")

def show_table_contents(table_name, limit=5):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
    logger.info(f"\n=== –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã {table_name} (–ø–µ—Ä–≤—ã–µ {limit} –∑–∞–ø–∏—Å–µ–π) ===")
    
    with engine.connect() as conn:
        result = conn.execute(text(f"SELECT * FROM {table_name} LIMIT {limit}"))
        for row in result:
            logger.info(row)

if __name__ == "__main__":
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        show_tables()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ enum —Ç–∏–ø—ã
        show_enum_types()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≤–∞–∂–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        important_tables = ['users', 'orders', 'finished_product']
        for table in important_tables:
            try:
                show_table_contents(table)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã {table}: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}") 